
//  Created by Евгений Никитин on 25.05.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

// MARK:  Вопросы (id) с 2801 по 2900

class BehavioralPatternsSet {
	static func getQuestions() -> [Question] {
		return [
			Question(question: ["Behavioral design patterns are concerned with ..."],
					 image: "",
					 optionA: "Assignment of responsibilities",
					 optionB: "Objects creation",
					 optionC: "Classes and objects composition",
					 optionD: "",
					 questionId: 2801,
					 helpText: "Behavioral design patterns are concerned with algorithms and the assignment of responsibilities between objects."),
			
			///
			
			Question(question: ["This behavioral pattern consisting of a source of command objects and a series of processing objects"],
					 image: "",
					 optionA: "Chain of Responsibility",
					 optionB: "Command",
					 optionC: "Iterator",
					 optionD: "",
					 questionId: 2801,
					 helpText: "In object-oriented design, the chain-of-responsibility pattern is a design pattern consisting of a source of command objects and a series of processing objects. Each processing object contains logic that defines the types of command objects that it can handle; the rest are passed to the next processing object in the chain. A mechanism also exists for adding new processing objects to the end of this chain. Thus, the chain of responsibility is an object oriented version of the if ... else if ... else if ....... else ... endif[dubious – discuss] idiom, with the benefit that the condition–action blocks can be dynamically rearranged and reconfigured at runtime. In a variation of the standard chain-of-responsibility model, some handlers may act as dispatchers, capable of sending commands out in a variety of directions, forming a tree of responsibility."),
			
			Question(question: ["This behavioral pattern is structurally nearly identical to the Decorator pattern (but in Decorator all classes can handle the request)"],
					 image: "",
					 optionA: "Chain of Responsibility",
					 optionB: "Command",
					 optionC: "Iterator",
					 optionD: "",
					 questionId: 2801,
					 helpText: "The chain-of-responsibility pattern is structurally nearly identical to the decorator pattern, the difference being that for the decorator, all classes handle the request, while for the chain of responsibility, exactly one of the classes in the chain handles the request. However, many implementations allow several elements in the chain to take responsibility."),
			
			Question(question: ["This behavioral pattern define a bunch of receiver objects having the responsibility, depending on run-time conditions, to either handle a request or forward it to the next receiver"],
					 image: "",
					 optionA: "Chain of Responsibility",
					 optionB: "Command",
					 optionC: "Iterator",
					 optionD: "",
					 questionId: 2801,
					 helpText: "Chain of Responsibility define a chain of receiver objects having the responsibility, depending on run-time conditions, to either handle a request or forward it to the next receiver on the chain (if any). This enables to send a request to a chain of receivers without having to know which one handles the request. The request gets passed along the chain until a receiver handles the request. The sender of a request is no longer coupled to a particular receiver."),
			
			Question(question: ["Behavioral design pattern that lets you pass requests along a chain of handlers"],
					 image: "",
					 optionA: "Chain of Responsibility",
					 optionB: "Command",
					 optionC: "Iterator",
					 optionD: "",
					 questionId: 2801,
					 helpText: "Chain of Responsibility is a behavioral design pattern that lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain."),
			
			Question(question: ["This behavioral pattern relies on transforming particular behaviors into stand-alone objects called handlers"],
					 image: "",
					 optionA: "Chain of Responsibility",
					 optionB: "Strategy",
					 optionC: "Mediator",
					 optionD: "",
					 questionId: 2801,
					 helpText: "Like many other behavioral design patterns, the Chain of Responsibility relies on transforming particular behaviors into stand-alone objects called handlers. Each check should be extracted to its own class with a single method that performs the check. The request, along with its data, is passed to this method as an argument. The pattern suggests that you link these handlers into a chain. Each linked handler has a field for storing a reference to the next handler in the chain. In addition to processing a request, handlers pass the request further along the chain. The request travels along the chain until all handlers have had a chance to process it. Here’s the best part: a handler can decide not to pass the request further down the chain and effectively stop any further processing."),
			
			Question(question: ["Use this behavioral pattern when your program is expected to process different kinds of requests in various ways, but the exact types of requests and their sequences are unknown beforehand"],
					 image: "",
					 optionA: "Chain of Responsibility",
					 optionB: "Strategy",
					 optionC: "Mediator",
					 optionD: "",
					 questionId: 2801,
					 helpText: "Use the Chain of Responsibility pattern when your program is expected to process different kinds of requests in various ways, but the exact types of requests and their sequences are unknown beforehand. The pattern lets you link several handlers into one chain and, upon receiving a request, “ask” each handler whether it can process it. This way all handlers get a chance to process the request."),
			
			Question(question: ["Use this behavioral pattern when it’s essential to execute several handlers in a particular order"],
					 image: "",
					 optionA: "Chain of Responsibility",
					 optionB: "Strategy",
					 optionC: "Mediator",
					 optionD: "",
					 questionId: 2801,
					 helpText: "Use the pattern when it’s essential to execute several handlers in a particular order. Since you can link the handlers in the chain in any order, all requests will get through the chain exactly as you planned."),
			
			///
			
			Question(question: ["Behavioral design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time"],
					 image: "",
					 optionA: "Command",
					 optionB: "Observer",
					 optionC: "State",
					 optionD: "Builder",
					 questionId: 2801,
					 helpText: "In object-oriented programming, the command pattern is a behavioral design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. This information includes the method name, the object that owns the method and values for the method parameters."),
			
			Question(question: ["Three terms always associated with this behavioral pattern are receiver, invoker and client. Which pattern is this?"],
					 image: "",
					 optionA: "Command",
					 optionB: "Mediator",
					 optionC: "State",
					 optionD: "",
					 questionId: 2801,
					 helpText: "Four terms always associated with the command pattern are command, receiver, invoker and client. A command object knows about receiver and invokes a method of the receiver. Values for parameters of the receiver method are stored in the command. The receiver object to execute these methods is also stored in the command object by aggregation. The receiver then does the work when the execute() method in command is called. An invoker object knows how to execute a command, and optionally does bookkeeping about the command execution. The invoker does not know anything about a concrete command, it knows only about the command interface. Invoker object(s), command objects and receiver objects are held by a client object, the client decides which receiver objects it assigns to the command objects, and which commands it assigns to the invoker. The client decides which commands to execute at which points. To execute a command, it passes the command object to the invoker object."),
			
			Question(question: ["The central ideas of this behavioral pattern closely mirror the semantics of first-class functions and higher-order functions in functional programming languages"],
					 image: "",
					 optionA: "Command",
					 optionB: "Prototype",
					 optionC: "State",
					 optionD: "",
					 questionId: 2801,
					 helpText: "The central ideas of Command pattern closely mirror the semantics of first-class functions and higher-order functions in functional programming languages. Specifically, the invoker object is a higher-order function of which the command object is a first-class argument."),
			
			Question(question: ["Behavioral design pattern that turns a request into a stand-alone object that contains all information about the request"],
					 image: "",
					 optionA: "Command",
					 optionB: "Iterator",
					 optionC: "Strategy",
					 optionD: "Visitor",
					 questionId: 2801,
					 helpText: "Command is a behavioral design pattern that turns a request into a stand-alone object that contains all information about the request. This transformation lets you parameterize methods with different requests, delay or queue a request’s execution, and support undoable operations."),
			
			Question(question: ["Use this behavioral pattern when you want to parametrize objects with operations"],
					 image: "",
					 optionA: "Command",
					 optionB: "Decorator",
					 optionC: "Strategy",
					 optionD: "",
					 questionId: 2801,
					 helpText: "Use the Command pattern when you want to parametrize objects with operations. The Command pattern can turn a specific method call into a stand-alone object. This change opens up a lot of interesting uses: you can pass commands as method arguments, store them inside other objects, switch linked commands at runtime, etc. Here’s an example: you’re developing a GUI component such as a context menu, and you want your users to be able to configure menu items that trigger operations when an end user clicks an item."),
			
			Question(question: ["Use this behavioral pattern when you want to queue operations, schedule their execution, or execute them remotely"],
					 image: "",
					 optionA: "Command",
					 optionB: "Facade",
					 optionC: "Strategy",
					 optionD: "",
					 questionId: 2801,
					 helpText: "Use the Command pattern when you want to queue operations, schedule their execution, or execute them remotely. As with any other object, a command can be serialized, which means converting it to a string that can be easily written to a file or a database. Later, the string can be restored as the initial command object. Thus, you can delay and schedule command execution. But there’s even more! In the same way, you can queue, log or send commands over the network."),
			
			Question(question: ["Use this behavioral pattern when you want to implement reversible operations"],
					 image: "",
					 optionA: "Command",
					 optionB: "Observer",
					 optionC: "Strategy",
					 optionD: "",
					 questionId: 2801,
					 helpText: "Use the Command pattern when you want to implement reversible operations. Although there are many ways to implement undo/redo, the Command pattern is perhaps the most popular of all. To be able to revert operations, you need to implement the history of performed operations. The command history is a stack that contains all executed command objects along with related backups of the application’s state."),
			
			///
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: [""],
					 image: "",
					 optionA: "",
					 optionB: "",
					 optionC: "",
					 optionD: "",
					 questionId: 2801,
					 helpText: ""),
			
			Question(question: ["Which behavioral pattern is on the image?"],
					 image: "BehavioralPatterns1",
					 optionA: "Chain of Responsibility",
					 optionB: "Delegate",
					 optionC: "Strategy",
					 optionD: "",
					 questionId: 2835,
					 helpText: "Chain of Responsibility is a behavioral design pattern that lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain."),
			
			Question(question: ["Which behavioral pattern is on the image?"],
					 image: "BehavioralPatterns2",
					 optionA: "Iterator",
					 optionB: "Command",
					 optionC: "Memento",
					 optionD: "",
					 questionId: 2836,
					 helpText: "Iterator is a behavioral design pattern that lets you traverse elements of a collection without exposing its underlying representation (list, stack, tree, etc.)."),
			
			Question(question: ["Which behavioral pattern is on the image?"],
					 image: "BehavioralPatterns3",
					 optionA: "Mediator",
					 optionB: "Command",
					 optionC: "Observer",
					 optionD: "",
					 questionId: 2837,
					 helpText: "Mediator is a behavioral design pattern that lets you reduce chaotic dependencies between objects. The pattern restricts direct communications between the objects and forces them to collaborate only via a mediator object."),
			
			Question(question: ["Which behavioral pattern is on the image?"],
					 image: "BehavioralPatterns4",
					 optionA: "Memento",
					 optionB: "Visitor",
					 optionC: "State",
					 optionD: "",
					 questionId: 2838,
					 helpText: "Memento is a behavioral design pattern that lets you save and restore the previous state of an object without revealing the details of its implementation."),
			
			Question(question: ["Which behavioral pattern is on the image?"],
					 image: "BehavioralPatterns5",
					 optionA: "Observer",
					 optionB: "Visitor",
					 optionC: "Iterator",
					 optionD: "State",
					 questionId: 2839,
					 helpText: "Observer is a behavioral design pattern that lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they’re observing."),
			
			Question(question: ["Which behavioral pattern is on the image?"],
					 image: "BehavioralPatterns6",
					 optionA: "Command",
					 optionB: "Chain of Responsibility",
					 optionC: "Mediator",
					 optionD: "",
					 questionId: 2840,
					 helpText: "Command is a behavioral design pattern that turns a request into a stand-alone object that contains all information about the request. This transformation lets you parameterize methods with different requests, delay or queue a request’s execution, and support undoable operations."),
			
			Question(question: ["Which behavioral pattern is on the image?"],
					 image: "BehavioralPatterns7",
					 optionA: "State",
					 optionB: "Adapter",
					 optionC: "Strategy",
					 optionD: "",
					 questionId: 2841,
					 helpText: "State is a behavioral design pattern that lets an object alter its behavior when its internal state changes. It appears as if the object changed its class."),
			
			Question(question: ["Which behavioral pattern is on the image?"],
					 image: "BehavioralPatterns8",
					 optionA: "Strategy",
					 optionB: "State",
					 optionC: "Command",
					 optionD: "",
					 questionId: 2842,
					 helpText: "Strategy is a behavioral design pattern that lets you define a family of algorithms, put each of them into a separate class, and make their objects interchangeable."),
			
			Question(question: ["Which behavioral pattern is on the image?"],
					 image: "BehavioralPatterns9",
					 optionA: "Template Method",
					 optionB: "Strategy",
					 optionC: "Factory Method",
					 optionD: "Memento",
					 questionId: 2843,
					 helpText: "Template Method is a behavioral design pattern that defines the skeleton of an algorithm in the superclass but lets subclasses override specific steps of the algorithm without changing its structure."),
			
			Question(question: ["Which behavioral pattern is on the image?"],
					 image: "BehavioralPatterns10",
					 optionA: "Visitor",
					 optionB: "Iterator",
					 optionC: "State",
					 optionD: "",
					 questionId: 2844,
					 helpText: "Visitor is a behavioral design pattern that lets you separate algorithms from the objects on which they operate.")

		]
	}
}
