
//  Created by Евгений Никитин on 15.04.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

// MARK:  01 - Вопросы (id) с 1 по 100

class TheBasicsSet {
	static func getQuestions() -> [Question] {
		return [
			Question(question: ["According to Swift's best practices, which letter case should the variable names start with?",
								"It is recommended to use this case for the first letter of constant and variable names",
								"Which case should be used for the first letter of constant and variable names in Swift?"],
					 image: "",
					 optionA: "Lower case",
					 optionB: "Upper case",
					 optionC: "It doesn’t matter",
					 optionD: "",
					 questionId: 1,
					 helpText: "The convention is to use Lower Camel Case while naming properties and methods. Their names should start with a lowercase letter. And if a name consists of several words, only the first word should be lowercased. At the same time, type names should start with an uppercase letter (Upper Camel Case)."),
			
			Question(question: ["What word can be defined as the introduction of a new object that you are going to use?",
								"The process of creating a new object that you are going to use is called ..."],
					 image: "",
					 optionA: "Declaration",
					 optionB: "Modification",
					 optionC: "Initialization",
					 optionD: "",
					 questionId: 2,
					 helpText: "A declaration introduces a new object into the program. Initialization assigns a specific value to the declared object."),
			
			Question(question: ["A variable name must be ...",
								"All constant and variable names must be ...",
								"It is required to give each variable and constant a ... name"],
					 image: "",
					 optionA: "Unique",
					 optionB: "Universal",
					 optionC: "Simple",
					 optionD: "",
					 questionId: 3,
					 helpText: "All variables and constants must have unique names. You can't use several variables or constants with the same name within the same program. And it's a good practice to name them using so-called lowerCamelCase. It means that names should begin with a lowercase letter. If the name consists of several words, only the first word should start with a lowercase letter."),
			
			Question(question: ["Is it necessary to use var or let keywords every time you call an existing variable or constant?",
								"It is true that every time you want to access a variable or a constant, you must use var or let operators?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "Only with let",
					 optionD: "",
					 questionId: 4,
					 helpText: "Var and let operators are required only while declaring variables and constants. To call them afterwards, you need to use only their names."),
			
			Question(question: ["Is it possible to create a variable that has the same name as another variable?",
								"Can we give the same name to two different constants?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 5,
					 helpText: "Names must be unique. It's impossible to declare a constant or a variable that has the same name as another constant or variable."),
			
			Question(question: ["What is a separate Swift command usually called?",
								"This word can be defined as a separate Swift command"],
					 image: "",
					 optionA: "Statement",
					 optionB: "Variable",
					 optionC: "Constant",
					 optionD: "Sentence",
					 questionId: 6,
					 helpText: "A separate command in Swift is called a statement. Just like any other programming language, Swift performs all actions by following the commands given (written) by the developer. A file with code usually consists of multiple statements written on separate lines."),
			
			Question(question: ["Is it possible to declare multiple constants on a single line?",
								"Can you declare two variables on a single line?",
								"Is it possible to declare two or more variables or constants on a single line?"],
					 image: "",
					 optionA: "Yes, separated by commas",
					 optionB: "Yes, separated by a backslash",
					 optionC: "No, each of them requires a new line",
					 optionD: "Yes, separated by a colon",
					 questionId: 7,
					 helpText: "You can declare multiple constants or multiple variables on a single line, separated by commas."),
			
			Question(question: ["Can we change the value of a variable?",
								"Is the value of a variable mutable?",
								"Is it possible to change the value assigned to a variable?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "Yes, but only inside a loop",
					 optionD: "",
					 questionId: 8,
					 helpText: "The distinctive feature of variables is that we can change their values many times during the program execution."),
			
			Question(question: ["A named block of memory whose value can't be changed once it is set",
								"The value of this type of memory block can be set only once with no option of changing it" ],
					 image: "",
					 optionA: "Constant",
					 optionB: "Invariable",
					 optionC: "Lambda",
					 optionD: "",
					 questionId: 9,
					 helpText: "Constants are pretty similar to variables since they also store some value, but they are declared with the let keyword, and you can't change their value once they are initialized. So, if the value of a variable remains the same throughout the program, you should consider using a constant instead."),
			
			Question(question: ["The keyword that is used to determine a constant",
								"Which keyword is used to introduce a constant?",
								"This keyword can be used to define a constant"],
					 image: "",
					 optionA: "let",
					 optionB: "set",
					 optionC: "var",
					 optionD: "",
					 questionId: 10,
					 helpText: "Constants are pretty similar to variables since they also store some value, but they are declared with the let keyword, and you can't change their value once they are initialized. So, if the value of a variable remains the same throughout the program, you should consider using a constant instead."),
			
			Question(question: ["In what case the data stored in a constant can be overwritten?",
								"The data stored in a constant can't be overwritten except while..."],
					 image: "",
					 optionA: "Inside a loop",
					 optionB: "Inside ViewDidLoad()",
					 optionC: "Inside a function",
					 optionD: "",
					 questionId: 11,
					 helpText: "A constant used in a loop will be overwritten with each iteration."),
			
			Question(question: ["Which keyword is used for defining a variable?",
								"The keyword that must be used while declaring a variable",
								"The keyword we use to define a variable"],
					 image: "",
					 optionA: "var",
					 optionB: "let",
					 optionC: "func",
					 optionD: "set",
					 questionId: 12,
					 helpText: "In Swift, you define variables using the var keyword. The distinctive feature of variables is that their value can be changed many times during the program execution."),
			
			Question(question: ["How multi-line documentation comments are created?"],
					 image: "",
					 optionA: "/** Comment */",
					 optionB: "// Comment",
					 optionC: "/// Comment",
					 optionD: "// MARK: Comment",
					 questionId: 13,
					 helpText: "In addition to the standard comments used in any other programming language, Swift allows adding comments right into the program's documentation. You may need such comments while developing a function library. Here is how documentation comments are created: /** Comment */. After adding the documentation comment to a function, you can click the function's name with the Opt (Alt) key pressed to see the comment."),
			
			Question(question: ["A named unit of data that stores an associated value",
								"What do you call a named storage location which contains a value?",
								"A memory storage location that contains a value and can be accessed by a name or another identifier"],
					 image: "",
					 optionA: "Variable or Constant",
					 optionB: "Structure",
					 optionC: "String",
					 optionD: "Library",
					 questionId: 14,
					 helpText: "Just like most other programming languages, Swift relies on variables and constants to store data. A variable or a constant is a named unit of storage location that is assigned a value."),
			
			Question(question: ["A data type that stores individual Unicode symbols",
								"Which type of data stores individual letters and other symbols?",
								"Individual Unicode symbols are stored in this data type"],
					 image: "",
					 optionA: "Character",
					 optionB: "Float",
					 optionC: "Bool",
					 optionD: "String",
					 questionId: 15,
					 helpText: "Swift’s String and Character types provide a fast, Unicode-compliant way to work with text. Each String is composed of independent Character values, while each Character represents an individual Unicode symbol."),
			
			Question(question: ["A data type responsible for storing any text value",
								"Which data type represents arbitrary text values",
								"An arbitrary text literal can be stored in this data type"],
					 image: "",
					 optionA: "String",
					 optionB: "Bool",
					 optionC: "Character",
					 optionD: "",
					 questionId: 16,
					 helpText: "Swift’s String and Character types provide a fast, Unicode-compliant way to work with text. Each String is composed of independent Character values, while each Character represents an individual Unicode symbol."),
			
			Question(question: ["What should we use if we are sure that the value of a variable won't change?",
								"What can we use instead of a variable if its value won't change??"],
					 image: "",
					 optionA: "A constant",
					 optionB: "A variable",
					 optionC: "A literal",
					 optionD: "A Structure",
					 questionId: 17,
					 helpText: "Besides variables, constants provide an additional way to store data in a program. They are pretty similar to variables since they also store some value, but constants are declared with the let keyword, and you can't change their value once they are initialized. So, if the value of a variable remains the same throughout the program, you should consider using a constant instead."),
			
			Question(question: ["A data type that stores whole numbers with no fractions or decimals. For instance, 42 or -23",
								"Which data type stores whole signed numbers?",
								"This type represents any whole number with no fractions"],
					 image: "",
					 optionA: "Int",
					 optionB: "UInt",
					 optionC: "Float",
					 optionD: "Double",
					 questionId: 18,
					 helpText: "An Int is a whole signed number, for example, 1, -30, 458. On a 32-bit platform, Int is the same size as Int32, while on a 64-bit platform, Int is the same size as Int64."),
			
			Question(question: ["All types in Swift start with a(n) ... letter",
								"Which letter case should you use for the first letter of any type in Swift?",
								"The names of all Swift's types start with this letter case"],
					 image: "",
					 optionA: "Uppercase",
					 optionB: "It doesn’t matter",
					 optionC: "Lowercase",
					 optionD: "",
					 questionId: 19,
					 helpText: "Type names in Swift are always capitalized, so they start with an uppercase letter."),
			
			Question(question: ["How can you access the minimum and maximum values of each integer type?",
								"How can you get the minimum and maximum values of Int or UInt?",
								"You can use these properties to access the minimum and maximum values of Int or UInt"],
					 image: "",
					 optionA: "min and max",
					 optionB: "first and last",
					 optionC: "count",
					 optionD: "first and max",
					 questionId: 20,
					 helpText: "You can access the minimum and maximum values of each integer type with its min and max properties"),
			
			Question(question: ["Which of the following types has a higher precision?",
								"Which type that stores numbers with a decimal point has a higher precision?",
								"This the type stores the largest number of decimal digits"],
					 image: "",
					 optionA: "Double",
					 optionB: "Float",
					 optionC: "UInt",
					 optionD: "",
					 questionId: 21,
					 helpText: "Double represents a 64-bit floating-point number - in most cases, it is preferable to a Float because it has higher precision and is less likely to lose valuable accuracy. It has a precision of 15 decimal digits, whereas Float's precision can be as little as 6 decimal digits."),
			
			Question(question: ["Which type stores only the integers that are either positive or equal to zero?",
								"The type that stores only unsigned integers",
								"Pick the type that can store nonnegative integers only"],
					 image: "",
					 optionA: "UInt",
					 optionB: "Float",
					 optionC: "Int",
					 optionD: "Double",
					 questionId: 22,
					 helpText: "Swift provides an unsigned integer type, UInt (Unsigned Integer), which has the same size as the current platform’s native word size. Use it only when you specifically need an unsigned integer type with the same size as the platform’s native word size. Otherwise, Int is preferred, even when the values to be stored are known to be nonnegative. A consistent use of Int for integer values aids code interoperability, avoids the need to convert between different number types, and matches integer type inference."),
			
			Question(question: ["A sequence of characters surrounded by double quotation marks",
								"A series of Unicode characters enclosed in quotes",
								"Choose a literal that consists of a sequence of characters surrounded by double quotes"],
					 image: "",
					 optionA: "A string literal",
					 optionB: "An integer literal",
					 optionC: "An empty array literal",
					 optionD: "",
					 questionId: 23,
					 helpText: "A string literal is a sequence of characters surrounded by double quotation marks."),
			
			Question(question: ["The source code representation of a numeric value",
								"A positive or negative number expressed in the source code",
								"What do we call the following values in Swift: -2234, 10, 0?"],
					 image: "",
					 optionA: "Integer literal",
					 optionB: "Operator",
					 optionC: "String literal",
					 optionD: "Random number",
					 questionId: 24,
					 helpText: "Integer literals represent integer values of unspecified precision. An integer literal can be a positive or negative number, or zero."),
			
			Question(question: ["What approach(es) can you take to provide a constant or variable with a type?",
								"Choose the way(s) types can be declared in Swift",
								"How Swift can work out an object’s type?"],
					 image: "",
					 optionA: "Explicitly or Implicitly",
					 optionB: "Only implicitly",
					 optionC: "Distinctly or Vaguely",
					 optionD: "",
					 questionId: 25,
					 helpText: "Explicitly, via type annotation by placing a colon after the constant or variable name, followed by a space, followed by the name of the type to use. Implicitly, via type inference that enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide."),
			
			Question(question: ["Is it possible to use a variable of non-optional type before it is initialized?",
								"Can we use a non-optional variable before initializing it?",
								"Is it possible to use a variable before initialization if it is not represented by an optional?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 26,
					 helpText: "All variables and constants must be initialized before used (unless they are optional types)."),
			
			Question(question: ["Which data type can store any integer within the following boundaries: -2 147 483 648 ... 2 147 483 647?",
								"The type that can store any integer from -2 147 483 648 to 2 147 483 647",
								"Pick the type whose maximum and minimum values can't exceed -2 147 483 648 and 2 147 483 647"],
					 image: "",
					 optionA: "Int32",
					 optionB: "Decimal",
					 optionC: "Uint32",
					 optionD: "Int64",
					 questionId: 27,
					 helpText: "Values from -2 147 483 648 to 2 147 483 647 can be stored in Int32."),
			
			Question(question: ["If you don't specify an integer’s size in code, what will it be?",
								"If you don't specify an integer's size within its type declaration, what size will that integer have?",
								"What size will all integers have unless it is explicitly specified in code?"],
					 image: "",
					 optionA: "Platform’s native word size",
					 optionB: "32",
					 optionC: "64",
					 optionD: "128",
					 questionId: 28,
					 helpText: "Unless it is explicitly specified, integers always have the same size as the current platform’s native word size"),
			
			Question(question: ["What do we call the process of preparing a constant, variable, or any other object for use?",
								"What is the process of declaring a variable along with assigning its value called?",
								"Assigning a value to a previously declared object for the first time is called..."],
					 image: "",
					 optionA: "Initialization",
					 optionB: "Inheritance",
					 optionC: "Declaration",
					 optionD: "",
					 questionId: 29,
					 helpText: "Initialization is the process of preparing a constant, variable or any other object for use. This process involves setting an initial value for each stored property and performing any other setup required before the new object is ready for use."),
			
			Question(question: ["What precision does the Double type provide?",
								"How many decimal digits can the Double data type store?",
								"Double's precision equals to this number of decimal digits"],
					 image: "",
					 optionA: "15 decimal digits",
					 optionB: "6 decimal digits",
					 optionC: "12 decimal digits",
					 optionD: "18 decimal digits",
					 questionId: 30,
					 helpText: "Double represents a 64-bit floating-point number. It has a precision of 15 decimal digits."),
			
			Question(question: ["What precision does the Float type provide?",
								"How many decimal digits can the Double data type store?",
								"Double's precision equals to this number of decimal digits"],
					 image: "",
					 optionA: "6 decimal digits",
					 optionB: "4 decimal digits",
					 optionC: "12 decimal digits",
					 optionD: "10 decimal digits",
					 questionId: 31,
					 helpText: "Float's precision can be as little as 6 decimal digits."),
			
			Question(question: ["If no specific floating-point number type is required, which type is preferred?",
								"If both types (Float & Double) are appropriate for your task, which one is preferred?",
								"In situations where higher precision is required, which type should you use?"],
					 image: "",
					 optionA: "Double",
					 optionB: "Float",
					 optionC: "Character",
					 optionD: "String",
					 questionId: 32,
					 helpText: "Double has a precision of 15 decimal digits, whereas Float's precision can be as little as 6 decimal digits. The appropriate floating-point type to use depends on the nature and range of values you need to work with in your code. In situations where either type would be appropriate, Double is preferred."),
			
			Question(question: ["Can you pass an Int value into a program if it expects the value to be of the String type?",
								"If a block of your code accepts String objects, can you pass it a Character?",
								"Can you pass a positive number of the Int32 type when your code expects a UInt32 number?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "It depends",
					 optionD: "",
					 questionId: 33,
					 helpText: "Swift is a language with strict type checking. Such languages force you to be explicit about the types of values you are going to work with. For instance, if an object is expected to be of the String type, you can't pass it an Int, or any other type except for String because it will result in an error."),
			
			Question(question: ["How many double quotation marks do you need to use to introduce a multiline string literal?",
								"What number of double quotation marks surround multiline string literals in Swift?",
								"Choose the correct number of double quotation marks you need to use to open and close a multiline string literal"],
					 image: "",
					 optionA: "Three",
					 optionB: "Two",
					 optionC: "One",
					 optionD: "Four",
					 questionId: 34,
					 helpText: "If you need a string that spans several lines, use a multiline string literal—a sequence of characters surrounded by three double quotation marks. A multiline string literal includes all of the lines between its opening and closing quotation marks). The string begins on the first line after the opening quotation marks and ends on the line before the closing quotation marks."),
			
			Question(question: ["What character adds a line break in a multiline string literal, and it does it only in code allowing you not to display the line break as part of the string value of this line?"],
					 image: "",
					 optionA: "Backslash",
					 optionB: "Asterisk",
					 optionC: "Dash",
					 optionD: "",
					 questionId: 35,
					 helpText: "When your source code includes a line break inside of a multiline string literal, that line break also appears in the string’s value. If you want to use line breaks to make your source code easier to read, but you don’t want the line breaks to be part of the string’s value, write a backslash at the end of those lines. To simplify - Use it if you want to wrap a line inside your code to make it more readable, but don't want that line to wrap as well after compilation."),
			
			Question(question: ["How can you initialize an empty string with initializer syntax?",
								"How is an empty String type initialized with initializer syntax?",
								"This is exactly how an empty string is initialized with initializer syntax"],
					 image: "",
					 optionA: "= String()",
					 optionB: "= [String]",
					 optionC: "= (String)",
					 optionD: "",
					 questionId: 36,
					 helpText: "To create an empty String value as the starting point for building a longer string, either assign an empty string literal to a variable: var emptyString = \"\", or initialize a new String instance with initializer syntax: var anotherEmptyString = String()"),
			
			Question(question: ["A way to construct a new String value from a mix of constants, variables, literals, and expressions by including their values inside a string literal"],
					 image: "",
					 optionA: "String interpolation",
					 optionB: "String concatenation",
					 optionC: "String merging",
					 optionD: "",
					 questionId: 37,
					 helpText: "String interpolation is a way to construct a new String value from a mix of constants, variables, literals, and expressions by including their values inside a string literal. You can use string interpolation in both single-line and multiline string literals. Each item that you insert into the string literal is wrapped in a pair of parentheses, prefixed by a backslash."),
			
			Question(question: ["Can we append a Character value to a String variable with the String type’s append() method?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 38,
					 helpText: "You can append a Character value to a String variable with the String type’s append() method."),
			
			Question(question: ["How many ways to compare textual values does Swift provide?",
								"The number of ways to compare textual values in Swift",
								"How many different options do you have to compare Swift’s textual values?"],
					 image: "",
					 optionA: "Three",
					 optionB: "Two",
					 optionC: "Eleven",
					 optionD: "",
					 questionId: 39,
					 helpText: "Swift provides three ways to compare textual values: string and character equality, prefix equality, and suffix equality."),
			
			Question(question: ["What type will we get as a result of comparing two Strings?",
								"What type will be returned as a result of comparing two String values?",
								"What do we get after comparing two Characters?"],
					 image: "",
					 optionA: "Bool",
					 optionB: "String",
					 optionC: "Character",
					 optionD: "",
					 questionId: 40,
					 helpText: "Comparing String or Character returns a Bool value (true or false)."),
			
			Question(question: ["What type will be assigned to the variable from the image above?",
								"What type will be inferred with the implicit typing in this example?"],
					 image: "TheBasics36",
					 optionA: "Double",
					 optionB: "Float",
					 optionC: "Decimal",
					 optionD: "",
					 questionId: 41,
					 helpText: "With implicit typing, a floating-point number is assigned the Double type, as it is the preferred choice. In situations where either type would be appropriate, Double is preferred."),
			
			Question(question: ["What will we get after running this code?"],
					 image: "TheBasics37",
					 optionA: "We will get an error",
					 optionB: "The value will change",
					 optionC: "",
					 optionD: "",
					 questionId: 42,
					 helpText: "Swift is a type-safe language. A type safe language encourages you to be clear about the types of values your code can work with. If part of your code requires a String, you can’t pass it an Int by mistake. The error occurs because the variable name expects a string literal, and the floating point number is not a string and does not match the variable name type."),
			
			Question(question: ["The reserved terms that have special meaning in Swift and can be used only for their particular purpose?"],
					 image: "",
					 optionA: "Keyword",
					 optionB: "Function",
					 optionC: "Closure",
					 optionD: "Identifier",
					 questionId: 43,
					 helpText: "Swift keywords are the words reserved for a purpose. They cannot be used for variable names or any other identifiers. There are four types of keywords in Swift based on the location of their usage in a program: Keywords in Declarations, Keywords in Statements, Keywords in Expressions and Types, Keywords in Specific Contexts."),
			
			Question(question: ["What is the result of comparing name and char variables?"],
					 image: "TheBasics39",
					 optionA: "true",
					 optionB: "false",
					 optionC: "Comparison error",
					 optionD: "",
					 questionId: 44,
					 helpText: "Although we only assign a single character to a char variable, without explicitly specifying the data type, Swift will automatically assign the type to String, so these two variables can be compared, and the result of the comparison will be true (because in this case the values of the variables are equal)"),
			
			Question(question: ["What will we get in the console after running this code snippet?"],
					 image: "TheBasics40",
					 optionA: "Comparison error",
					 optionB: "false",
					 optionC: "true",
					 optionD: "",
					 questionId: 45,
					 helpText: "We have two variables with different values, and if we answer without thinking everything through we might pick the ‘false’ option since their values are not equal. But in this code snippet, the variables also have different data types, which causes the error \"Binary operator '==' cannot be applied to operands of type 'String' and 'Character'\""),
			
			Question(question: ["Are all basic Swift types (Int, String, Double, Bool) hashable?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 46,
					 helpText: "All basic Swift types (Int, String, Double, Bool) are hashable types by default and can be used as set value types or as dictionary key types. Enumeration member values without any associated values are also hashable by default."),
			
			Question(question: ["Which data types allows you to create and pass around groupings of values, and return multiple values from a function as a single compound value?"],
					 image: "",
					 optionA: "Tuple",
					 optionB: "Dictionary",
					 optionC: "Set",
					 optionD: "",
					 questionId: 47,
					 helpText: "In addition to familiar types, Swift introduces advanced types not found in Objective-C, such as tuples. Tuples enable you to create and pass around groupings of values. You can use a tuple to return multiple values from a function as a single compound value."),
			
			Question(question: ["The types that handle the absence of a value"],
					 image: "",
					 optionA: "Optional types",
					 optionB: "Tuple types",
					 optionC: "Collection types",
					 optionD: "",
					 questionId: 48,
					 helpText: "Swift introduces optional types, which handle the absence of a value. Optionals say either “there is a value, and it equals x” or “there isn’t a value at all”. Using optionals is similar to using nil with pointers in Objective-C, but they work for any type, not just classes. Not only are optionals safer and more expressive than nil pointers in Objective-C, they’re at the heart of many of Swift’s most powerful features."),
			
			Question(question: ["Can we pass an optional String to a piece of code that expects a non-optional String?",
								"Can you pass an optional Double to a block of code that expects a non-optional Double?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 49,
					 helpText: "Swift is a type-safe language, which means the language helps you to be clear about the types of values your code can work with. If part of your code requires a String, type safety prevents you from passing it an Int by mistake. Likewise, type safety prevents you from accidentally passing an optional String to a piece of code that requires a non-optional String. Type safety helps you catch and fix errors as early as possible in the development process."),
			
			Question(question: ["Choose the correct option: Declare a constant named numbers, whose type is Double with a value of 1.0",
								"Which line declares a constant named numbers of type Double with a value of 1.0?"],
					 image: "",
					 optionA: "let numbers: Double = 1.0",
					 optionB: "var numbers: Double = 1.0",
					 optionC: "let numbers = Double(1.0)",
					 optionD: "let numbers = Double : 1.0",
					 questionId: 50,
					 helpText: "Correct answer: let numbers: Double = 1.0"),
			
			Question(question: ["Can we use an Int? value as an operand in a math operation?",
								"Can you use Double? as an operand in a math operation?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 51,
					 helpText: "You can't use Int? or Double? while performing mathematical operations as they are optional types and you need to unwrap them first."),
			
			Question(question: ["What can't constant and variable names contain?",
								"Which of these cannot be used when writing constant and variable names?",
								"Choose what variable and constant names cannot contain?"],
					 image: "",
					 optionA: "Whitespaces and mathematical symbols",
					 optionB: "Unicode-symbols",
					 optionC: "Underscores",
					 optionD: "",
					 questionId: 52,
					 helpText: "Constant and variable names can’t contain whitespace characters, mathematical symbols, arrows, private-use Unicode scalar values, or line- and box-drawing characters. Nor can they begin with a number, although numbers may be included elsewhere within the name."),
			
			Question(question: ["Can we, after declaring a constant, change it into a variable further down the code?",
								"Can we change a variable of a certain type to store values of a different type?",
								"Can we change already declared constants to variables, and variables to constants?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 53,
					 helpText: "Once you’ve declared a constant or variable of a certain type, you can’t declare it again with the same name, or change it to store values of a different type. Nor can you change a constant into a variable or a variable into a constant."),
			
			Question(question: ["Which global function can output one or more values to the console?"],
					 image: "",
					 optionA: "print(_:separator:terminator:)",
					 optionB: "show()",
					 optionC: "alert()",
					 optionD: "Console.WriteLine",
					 questionId: 54,
					 helpText: "The print(_:separator:terminator:) function is a global function that prints one or more values to an appropriate output. In Xcode, for example, the print(_:separator:terminator:) function prints its output in Xcode’s “console” pane. The separator and terminator parameter have default values, so you can omit them when you call this function. By default, the function terminates the line it prints by adding a line break. To print a value without a line break after it, pass an empty string as the terminator—for example, print(someValue, terminator: \"\")."),
			
			Question(question: ["What is the name of a compiler-ignored, non-executable text in the code?",
								"What is the name of the non-executable text in the code?",
								"What can you add to get a non-executable piece of code?"],
					 image: "",
					 optionA: "Comments",
					 optionB: "Exceptions",
					 optionC: "Notation",
					 optionD: "",
					 questionId: 55,
					 helpText: "Use comments to include non-executable text in your code, as a note or reminder to yourself. Comments are ignored by the Swift compiler when your code is compiled. Single-line comments begin with two forward-slashes (//). Multiline comments start with a forward-slash followed by an asterisk (/*) and end with an asterisk followed by a forward-slash (*/)"),
			
			Question(question: ["In which case it is necessary to use a semicolon (;) in your code in Swift?",
								"When would you need to put a semicolon (;) in your code?",
								"Using semicolons after each statement is not required in Swift except for one case. Which one?"],
					 image: "",
					 optionA: "Multiple statements on a single line",
					 optionB: "Inside a closure",
					 optionC: "After each statement",
					 optionD: "",
					 questionId: 56,
					 helpText: "Unlike many other languages, Swift doesn’t require you to write a semicolon (;) after each statement in your code, although you can do so if you wish. However, semicolons are required if you want to write multiple separate statements on a single line: let cat = \"🐱\"; print(cat) // Prints \"🐱\""),
			
			Question(question: ["Which type will the number constant be?",
								"Choose the correct type of the number constant"],
					 image: "TheBasics51",
					 optionA: "Double",
					 optionB: "Float",
					 optionC: "Int",
					 optionD: "Character",
					 questionId: 57,
					 helpText: "If you combine integer and floating-point literals in an expression, the type of Double will be inferred from the context. The literal value of 1 has no explicit type, so an appropriate output type of Double is inferred from the presence of a floating-point literal as part of the addition."),
			
			Question(question: ["How can you change the name of an existing type to a type name that is contextually more appropriate?"],
					 image: "",
					 optionA: "With the typealias keyword",
					 optionB: "With the typecopy keyword",
					 optionC: "With the typeshadow keyword",
					 optionD: "",
					 questionId: 58,
					 helpText: "Type aliases define an alternative name for an existing type. You define type aliases with the typealias keyword. Type aliases are useful when you want to refer to an existing type by a name that is contextually more appropriate, such as when working with data of a specific size from an external source."),
			
			Question(question: ["What two Boolean constant values does Swift provide for the Bool type?",
								"Swift has two logical constant values for the Bool type, which ones?",
								"Choose the two possible values a Bool object can ever be"],
					 image: "",
					 optionA: "true and false",
					 optionB: "true and nottrue",
					 optionC: "1 and 0",
					 optionD: "truth and lie",
					 questionId: 59,
					 helpText: "Swift has a basic Boolean type, called Bool. Boolean values are referred to as logical, because they can only ever be true or false. Swift provides two Boolean constant values, true and false. You don’t need to declare constants or variables as Bool if you set them to true or false as soon as you create them. Type inference helps make Swift code more concise and readable when it initializes constants or variables with other values whose type is already known."),
			
			Question(question: ["How can you correctly refer to the first element of a tuple?",
								"How can we refer to the first element of a tuple?",
								"We can refer to exact elements of a tuple. How can we refer to the first element?"],
					 image: "",
					 optionA: "someTuples.0",
					 optionB: "someTuples.1",
					 optionC: "someTuples[0]",
					 optionD: "someTuples(1)",
					 questionId: 60,
					 helpText: "You can decompose a tuple’s contents into separate constants or variables, which you then access as usual. If you only need some of the tuple’s values, ignore parts of the tuple with an underscore (_) when you decompose the tuple. Alternatively, access the individual element values in a tuple using the dot syntax and index numbers starting at zero."),
			
			Question(question: ["When can we give names to individual elements of a tuple?",
								"At what point can we give names to the individual elements of a tuple?"],
					 image: "",
					 optionA: "When the tuple is defined",
					 optionB: "After the tuple is defined",
					 optionC: "After it is used for the first time",
					 optionD: "",
					 questionId: 61,
					 helpText: "You can name the individual elements in a tuple when the tuple is defined. For example: let gameRecord = (questionNumber: 50, score: 49)."),
			
			Question(question: ["A special object that groups the values of different types into a single compound value",
								"An object that provides the simplest way of combining multiple values of different types into a single compound value",
								"Each individual value of that compound object may be of a different data type."],
					 image: "",
					 optionA: "Tuple",
					 optionB: "Array",
					 optionC: "Dictionary",
					 optionD: "",
					 questionId: 62,
					 helpText: "A tuple is a complex object that groups the values of different data types within a single compound value.  Each individual value in a tuple may be of a different data type, and it doesn't depend on the rest of the tuple's values."),
			
			Question(question: ["What type will Swift assign to convertedNum?"],
					 image: "TheBasics57",
					 optionA: "Int?",
					 optionB: "Int",
					 optionC: "String",
					 optionD: "",
					 questionId: 63,
					 helpText: "As the initializer might fail, it returns an optional Int, rather than an Int. An optional Int is written as Int?, not Int. The question mark indicates that the value it contains is optional, meaning that it might contain some Int value, or it might contain no value at all. (It can’t contain anything else, such as a Bool value or a String value. It’s either an Int, or it’s nothing at all.)"),
			
			Question(question: ["How can we set an optional variable to no value?"],
					 image: "",
					 optionA: "By assigning it nil",
					 optionB: "By making it equal to 0",
					 optionC: "By assigning it empty array literal",
					 optionD: "Via the .removeValue method",
					 questionId: 64,
					 helpText: "You set an optional variable to a valueless state by assigning it the special value nil. You can’t use nil with non-optional constants and variables. If a constant or variable in your code needs to work with the absence of a value under certain conditions, always declare it as an optional value of the appropriate type."),
			
			Question(question: ["How can we safely check if an optional contains a value?",
								"How do we know whether an optional contains a value or not?",
								"Here’s how you can find out if an optional contains a value or not"],
					 image: "",
					 optionA: "By comparing it against nil",
					 optionB: "By using the identical operator ===",
					 optionC: "Inside for-in loop",
					 optionD: "Trough forced unwrap",
					 questionId: 65,
					 helpText: "You can use an if statement to find out whether an optional contains a value by comparing the optional against nil. You perform this comparison with the “equal to” operator (==) or the “not equal to” operator (!=). If an optional has a value, it’s considered to be “not equal to” nil"),
			
			Question(question: ["Once you’re sure that the optional does contain a value, what is the fastest way to access it?",
								"What is the fastest way of accessing a value, once we are sure that the optional does contain it?"],
					 image: "",
					 optionA: "By force-unwrapping (!) it",
					 optionB: "Inside while loop",
					 optionC: "Using nil-coalescing operator",
					 optionD: "",
					 questionId: 66,
					 helpText: "Once you’re sure that the optional does contain a value, you can access its underlying value by adding an exclamation point (!) to the end of the optional’s name. The exclamation point effectively says, “I know that this optional definitely has a value; please use it.” This is known as forced unwrapping of the optional value."),
			
			Question(question: ["Objects available anywhere in the program are ..."],
					 image: "",
					 optionA: "Global objects",
					 optionB: "Local objects",
					 optionC: "",
					 optionD: "",
					 questionId: 67,
					 helpText: "Each created object can only be used according to certain rules, one of which is called the scope. Scope defines where exactly in the code you can use this or that object. By belonging to the scope, objects are divided into local and global."),
			
			Question(question: ["Which Swift's feature provides a way to dynamically refer to a type's property rather than to its value?"],
					 image: "",
					 optionA: "KeyPath",
					 optionB: "NamePath",
					 optionC: "PropertyURL",
					 optionD: "",
					 questionId: 68,
					 helpText: #"Swift provides KeyPaths to store references to the properties of types. They are useful while performing dynamic programming tasks, i.e. handling collections or key-value observing. How it works: you can create a key-path reference to a concrete property and assign it to a constant by putting a backslash followed by the type and its property that you want to keep track of. It will enable you to access the current value of this property later in your code. For example: let someObject = SomeStructure(someValue: 42); let ourKeyPath = \SomeStructure.someValue"#),
			
			Question(question: ["The correct type of the tuple from the image",
								"Choose the tuple’s type",
								"Which of the following data types will be assigned to the tuple from this code snippet?"],
					 image: "TheBasics69",
					 optionA: "(String, Double, Bool)",
					 optionB: "Tuple.type",
					 optionC: "(String, Float, Bool)",
					 optionD: "(Character, Double, True)",
					 questionId: 69,
					 helpText: "Correct answer: (String, Double, Bool). The type of a tuple depends on its values. In other words, it is represented by a comma-separated list of types of values the tuple contains surrounded by a pair of parentheses. So, the type of any tuple looks like the tuple itself, with the only difference that concrete values are changed to their types in the same order."),
			
			Question(question: ["Can we name all of the individual elements of a tuple?",
								"Is it correct that we must either name each element of a tuple or leave all of them unnamed, that is, we can't name just some of the elements?",
								"Assigning names to a tuple's elements does not prevent us from using their indexes. Is that true?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 70,
					 helpText: "In addition to value, each element of a tuple can also have a name. The name of a particular element is written right before its value and is followed by a colon. It is not allowed to specify names only for some tuple elements: you must either name each element or leave all of them unnamed. Once the name is specified, it can be used to access the underlying element's value via the dot syntax. It does not prevent you from accessing the values by their indices though. Indices are always available in a tuple. Accessing elements by names might just be more convenient and straightforward than accessing them via indices.")
		]
	}
	
	
	///
	
	
	static func getDemoQuestions() -> [Question] {
		return [
			Question(question: ["According to Swift's best practices, which letter case should the variable names start with?",
								"It is recommended to use this case for the first letter of constant and variable names",
								"Which case should be used for the first letter of constant and variable names in Swift?"],
					 image: "",
					 optionA: "Lower case",
					 optionB: "Upper case",
					 optionC: "It doesn’t matter",
					 optionD: "",
					 questionId: 1,
					 helpText: "The convention is to use Lower Camel Case while naming properties and methods. Their names should start with a lowercase letter. And if a name consists of several words, only the first word should be lowercased. At the same time, type names should start with an uppercase letter (Upper Camel Case)."),
			
			Question(question: ["What word can be defined as the introduction of a new object that you are going to use?",
								"The process of creating a new object that you are going to use is called ..."],
					 image: "",
					 optionA: "Declaration",
					 optionB: "Modification",
					 optionC: "Initialization",
					 optionD: "",
					 questionId: 2,
					 helpText: "A declaration introduces a new object into the program. Initialization assigns a specific value to the declared object."),
			
			Question(question: ["A variable name must be ...",
								"All constant and variable names must be ...",
								"It is required to give each variable and constant a ... name"],
					 image: "",
					 optionA: "Unique",
					 optionB: "Universal",
					 optionC: "Simple",
					 optionD: "",
					 questionId: 3,
					 helpText: "All variables and constants must have unique names. You can't use several variables or constants with the same name within the same program. And it's a good practice to name them using so-called lowerCamelCase. It means that names should begin with a lowercase letter. If the name consists of several words, only the first word should start with a lowercase letter."),
			
			Question(question: ["Is it necessary to use var or let keywords every time you call an existing variable or constant?",
								"It is true that every time you want to access a variable or a constant, you must use var or let operators?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "Only with let",
					 optionD: "",
					 questionId: 4,
					 helpText: "Var and let operators are required only while declaring variables and constants. To call them afterwards, you need to use only their names."),
			
			Question(question: ["Is it possible to create a variable that has the same name as another variable?",
								"Can we give the same name to two different constants?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 5,
					 helpText: "Names must be unique. It's impossible to declare a constant or a variable that has the same name as another constant or variable."),
			
			Question(question: ["What is a separate Swift command usually called?",
								"This word can be defined as a separate Swift command"],
					 image: "",
					 optionA: "Statement",
					 optionB: "Variable",
					 optionC: "Constant",
					 optionD: "Sentence",
					 questionId: 6,
					 helpText: "A separate command in Swift is called a statement. Just like any other programming language, Swift performs all actions by following the commands given (written) by the developer. A file with code usually consists of multiple statements written on separate lines."),
			
			Question(question: ["Is it possible to declare multiple constants on a single line?",
								"Can you declare two variables on a single line?",
								"Is it possible to declare two or more variables or constants on a single line?"],
					 image: "",
					 optionA: "Yes, separated by commas",
					 optionB: "Yes, separated by a backslash",
					 optionC: "No, each of them requires a new line",
					 optionD: "Yes, separated by a colon",
					 questionId: 7,
					 helpText: "You can declare multiple constants or multiple variables on a single line, separated by commas."),
			
			Question(question: ["Can we change the value of a variable?",
								"Is the value of a variable mutable?",
								"Is it possible to change the value assigned to a variable?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "Yes, but only inside a loop",
					 optionD: "",
					 questionId: 8,
					 helpText: "The distinctive feature of variables is that we can change their values many times during the program execution."),
			
			Question(question: ["A named block of memory whose value can't be changed once it is set",
								"The value of this type of memory block can be set only once with no option of changing it" ],
					 image: "",
					 optionA: "Constant",
					 optionB: "Invariable",
					 optionC: "Lambda",
					 optionD: "",
					 questionId: 9,
					 helpText: "Constants are pretty similar to variables since they also store some value, but they are declared with the let keyword, and you can't change their value once they are initialized. So, if the value of a variable remains the same throughout the program, you should consider using a constant instead."),
			
			Question(question: ["The keyword that is used to determine a constant",
								"Which keyword is used to introduce a constant?",
								"This keyword can be used to define a constant"],
					 image: "",
					 optionA: "let",
					 optionB: "set",
					 optionC: "var",
					 optionD: "",
					 questionId: 10,
					 helpText: "Constants are pretty similar to variables since they also store some value, but they are declared with the let keyword, and you can't change their value once they are initialized. So, if the value of a variable remains the same throughout the program, you should consider using a constant instead."),
			
			Question(question: ["In what case the data stored in a constant can be overwritten?",
								"The data stored in a constant can't be overwritten except while..."],
					 image: "",
					 optionA: "Inside a loop",
					 optionB: "Inside ViewDidLoad()",
					 optionC: "Inside a function",
					 optionD: "",
					 questionId: 11,
					 helpText: "A constant used in a loop will be overwritten with each iteration."),
			
			Question(question: ["Which keyword is used for defining a variable?",
								"The keyword that must be used while declaring a variable",
								"The keyword we use to define a variable"],
					 image: "",
					 optionA: "var",
					 optionB: "let",
					 optionC: "func",
					 optionD: "set",
					 questionId: 12,
					 helpText: "In Swift, you define variables using the var keyword. The distinctive feature of variables is that their value can be changed many times during the program execution."),
			
			Question(question: ["How multi-line documentation comments are created?"],
					 image: "",
					 optionA: "/** Comment */",
					 optionB: "// Comment",
					 optionC: "/// Comment",
					 optionD: "// MARK: Comment",
					 questionId: 13,
					 helpText: "In addition to the standard comments used in any other programming language, Swift allows adding comments right into the program's documentation. You may need such comments while developing a function library. Here is how documentation comments are created: /** Comment */. After adding the documentation comment to a function, you can click the function's name with the Opt (Alt) key pressed to see the comment."),
			
			Question(question: ["A named unit of data that stores an associated value",
								"What do you call a named storage location which contains a value?",
								"A memory storage location that contains a value and can be accessed by a name or another identifier"],
					 image: "",
					 optionA: "Variable or Constant",
					 optionB: "Structure",
					 optionC: "String",
					 optionD: "Library",
					 questionId: 14,
					 helpText: "Just like most other programming languages, Swift relies on variables and constants to store data. A variable or a constant is a named unit of storage location that is assigned a value."),
			
			Question(question: ["A data type that stores individual Unicode symbols",
								"Which type of data stores individual letters and other symbols?",
								"Individual Unicode symbols are stored in this data type"],
					 image: "",
					 optionA: "Character",
					 optionB: "Float",
					 optionC: "Bool",
					 optionD: "String",
					 questionId: 15,
					 helpText: "Swift’s String and Character types provide a fast, Unicode-compliant way to work with text. Each String is composed of independent Character values, while each Character represents an individual Unicode symbol."),
			
			Question(question: ["A data type responsible for storing any text value",
								"Which data type represents arbitrary text values",
								"An arbitrary text literal can be stored in this data type"],
					 image: "",
					 optionA: "String",
					 optionB: "Bool",
					 optionC: "Character",
					 optionD: "",
					 questionId: 16,
					 helpText: "Swift’s String and Character types provide a fast, Unicode-compliant way to work with text. Each String is composed of independent Character values, while each Character represents an individual Unicode symbol."),
			
			Question(question: ["What should we use if we are sure that the value of a variable won't change?",
								"What can we use instead of a variable if its value won't change??"],
					 image: "",
					 optionA: "A constant",
					 optionB: "A variable",
					 optionC: "A literal",
					 optionD: "A Structure",
					 questionId: 17,
					 helpText: "Besides variables, constants provide an additional way to store data in a program. They are pretty similar to variables since they also store some value, but constants are declared with the let keyword, and you can't change their value once they are initialized. So, if the value of a variable remains the same throughout the program, you should consider using a constant instead."),
			
			Question(question: ["A data type that stores whole numbers with no fractions or decimals. For instance, 42 or -23",
								"Which data type stores whole signed numbers?",
								"This type represents any whole number with no fractions"],
					 image: "",
					 optionA: "Int",
					 optionB: "UInt",
					 optionC: "Float",
					 optionD: "Double",
					 questionId: 18,
					 helpText: "An Int is a whole signed number, for example, 1, -30, 458. On a 32-bit platform, Int is the same size as Int32, while on a 64-bit platform, Int is the same size as Int64."),
			
			Question(question: ["All types in Swift start with a(n) ... letter",
								"Which letter case should you use for the first letter of any type in Swift?",
								"The names of all Swift's types start with this letter case"],
					 image: "",
					 optionA: "Uppercase",
					 optionB: "It doesn’t matter",
					 optionC: "Lowercase",
					 optionD: "",
					 questionId: 19,
					 helpText: "Type names in Swift are always capitalized, so they start with an uppercase letter."),
			
			Question(question: ["How can you access the minimum and maximum values of each integer type?",
								"How can you get the minimum and maximum values of Int or UInt?",
								"You can use these properties to access the minimum and maximum values of Int or UInt"],
					 image: "",
					 optionA: "min and max",
					 optionB: "first and last",
					 optionC: "count",
					 optionD: "first and max",
					 questionId: 20,
					 helpText: "You can access the minimum and maximum values of each integer type with its min and max properties"),
			
			Question(question: ["Which of the following types has a higher precision?",
								"Which type that stores numbers with a decimal point has a higher precision?",
								"This the type stores the largest number of decimal digits"],
					 image: "",
					 optionA: "Double",
					 optionB: "Float",
					 optionC: "UInt",
					 optionD: "",
					 questionId: 21,
					 helpText: "Double represents a 64-bit floating-point number - in most cases, it is preferable to a Float because it has higher precision and is less likely to lose valuable accuracy. It has a precision of 15 decimal digits, whereas Float's precision can be as little as 6 decimal digits."),
			
			Question(question: ["Which type stores only the integers that are either positive or equal to zero?",
								"The type that stores only unsigned integers",
								"Pick the type that can store nonnegative integers only"],
					 image: "",
					 optionA: "UInt",
					 optionB: "Float",
					 optionC: "Int",
					 optionD: "Double",
					 questionId: 22,
					 helpText: "Swift provides an unsigned integer type, UInt (Unsigned Integer), which has the same size as the current platform’s native word size. Use it only when you specifically need an unsigned integer type with the same size as the platform’s native word size. Otherwise, Int is preferred, even when the values to be stored are known to be nonnegative. A consistent use of Int for integer values aids code interoperability, avoids the need to convert between different number types, and matches integer type inference."),
			
			Question(question: ["A sequence of characters surrounded by double quotation marks",
								"A series of Unicode characters enclosed in quotes",
								"Choose a literal that consists of a sequence of characters surrounded by double quotes"],
					 image: "",
					 optionA: "A string literal",
					 optionB: "An integer literal",
					 optionC: "An empty array literal",
					 optionD: "",
					 questionId: 23,
					 helpText: "A string literal is a sequence of characters surrounded by double quotation marks."),
			
			Question(question: ["The source code representation of a numeric value",
								"A positive or negative number expressed in the source code",
								"What do we call the following values in Swift: -2234, 10, 0?"],
					 image: "",
					 optionA: "Integer literal",
					 optionB: "Operator",
					 optionC: "String literal",
					 optionD: "Random number",
					 questionId: 24,
					 helpText: "Integer literals represent integer values of unspecified precision. An integer literal can be a positive or negative number, or zero."),
			
			Question(question: ["What approach(es) can you take to provide a constant or variable with a type?",
								"Choose the way(s) types can be declared in Swift",
								"How Swift can work out an object’s type?"],
					 image: "",
					 optionA: "Explicitly or Implicitly",
					 optionB: "Only implicitly",
					 optionC: "Distinctly or Vaguely",
					 optionD: "",
					 questionId: 25,
					 helpText: "Explicitly, via type annotation by placing a colon after the constant or variable name, followed by a space, followed by the name of the type to use. Implicitly, via type inference that enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide."),
			
			Question(question: ["Is it possible to use a variable of non-optional type before it is initialized?",
								"Can we use a non-optional variable before initializing it?",
								"Is it possible to use a variable before initialization if it is not represented by an optional?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 26,
					 helpText: "All variables and constants must be initialized before used (unless they are optional types)."),
			
			Question(question: ["Which data type can store any integer within the following boundaries: -2 147 483 648 ... 2 147 483 647?",
								"The type that can store any integer from -2 147 483 648 to 2 147 483 647",
								"Pick the type whose maximum and minimum values can't exceed -2 147 483 648 and 2 147 483 647"],
					 image: "",
					 optionA: "Int32",
					 optionB: "Decimal",
					 optionC: "Uint32",
					 optionD: "Int64",
					 questionId: 27,
					 helpText: "Values from -2 147 483 648 to 2 147 483 647 can be stored in Int32."),
			
			Question(question: ["If you don't specify an integer’s size in code, what will it be?",
								"If you don't specify an integer's size within its type declaration, what size will that integer have?",
								"What size will all integers have unless it is explicitly specified in code?"],
					 image: "",
					 optionA: "Platform’s native word size",
					 optionB: "32",
					 optionC: "64",
					 optionD: "128",
					 questionId: 28,
					 helpText: "Unless it is explicitly specified, integers always have the same size as the current platform’s native word size"),
			
			Question(question: ["What do we call the process of preparing a constant, variable, or any other object for use?",
								"What is the process of declaring a variable along with assigning its value called?",
								"Assigning a value to a previously declared object for the first time is called..."],
					 image: "",
					 optionA: "Initialization",
					 optionB: "Inheritance",
					 optionC: "Declaration",
					 optionD: "",
					 questionId: 29,
					 helpText: "Initialization is the process of preparing a constant, variable or any other object for use. This process involves setting an initial value for each stored property and performing any other setup required before the new object is ready for use."),
			
			Question(question: ["What precision does the Double type provide?",
								"How many decimal digits can the Double data type store?",
								"Double's precision equals to this number of decimal digits"],
					 image: "",
					 optionA: "15 decimal digits",
					 optionB: "6 decimal digits",
					 optionC: "12 decimal digits",
					 optionD: "18 decimal digits",
					 questionId: 30,
					 helpText: "Double represents a 64-bit floating-point number. It has a precision of 15 decimal digits.")
		]
	}
}



