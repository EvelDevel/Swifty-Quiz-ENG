
//  Created by Евгений Никитин on 15.04.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

// MARK:  Вопросы (id) с 1 по 100

class TheBasicsSet {
    static func getQuestions() -> [Question] {
        return [
            Question (question: ["As a good practice, what letter should a variable name start with in Swift?",
                                "It is recommended to write the name of a variable or constant with this letter",
                                "What letter is it recommended to write variable or constant names in Swift?"],
                     image: "",
                     optionA: "With lowercase",
                     optionB: "Capitalized",
                     optionC: "Optional",
                     optionD: "",
                     questionId: 1,
                     helpText: "It is good practice to use CamelCase property and method names. That is, the names start with a Lower Camel Case. If the name consists of several words, then only the first one begins with a lowercase letter. It is recommended to write type names with a capital letter (Upper Camel Case). "),
            
            Question (question: ["What is the name of the creation of a new object with which you plan to interact?",
                                "Creation of a new object with which interaction is planned"],
                     image: "",
                     optionA: "Declaration",
                     optionB: "Modify",
                     optionC: "Initialization",
                     optionD: "Announcement",
                     questionId: 2,
                     helpText: "Declaration - creation of a new object with which you plan to interact. Initialization - assignment of a certain value to the declared object."),
            
            ///
            
            Question (question: ["What should be the variable names?",
                                "What should be the names of constants or variables?",
                                "We have to come up with names of variables or constants just like that"],
                     image: "",
                     optionA: "Unique",
                     optionB: "Universal",
                     optionC: "Monosyllabic",
                     optionD: "",
                     questionId: 3,
                     helpText: "Variables and constants must have unique names. You cannot use several variables and (or) constants with the same names in a program. Moreover, it is good practice to use names in the so-called camel case or CamelCase. That is, names begin with a lowercase letter . If the name consists of several words, then only the first of them begins with a lowercase letter. "),
            
            Question (question: ["Should you use var and let every time you access a created variable or constant?",
                                "Each time you refer to a variable or constant, you must specify a var or let statement. Is that so?"],
                     image: "",
                     optionA: "No",
                     optionB: "Yes",
                     optionC: "Let only",
                     optionD: "",
                     questionId: 63,
                     helpText: "The var and let statements should only be used when declaring a parameter. Further, when referring to declared variables and constants, you should only use their names."),
            
            Question (question: ["Can you create a variable with a name already taken by another variable?",
                                "Can we give a constant a name that is occupied by another constant?"],
                     image: "",
                     optionA: "No",
                     optionB: "Yes",
                     optionC: "",
                     optionD: "",
                     questionId: 64,
                     helpText: "Names must be unique. You cannot create a variable or constant with a name already occupied by another variable or constant."),
            
            Question (question: ["What is the name of the completed Swift command?",
                                "This is how a completed command is called in Swift"],
                     image: "",
                     optionA: "Expression",
                     optionB: "Variable",
                     optionC: "Constant",
                     optionD: "Offer",
                     questionId: 4,
                     helpText: "A completed command in Swift is called an expression. Swift, like any other programming language, performs its functions using commands that are given (written) by the developer. A code file usually consists of a set of expressions written on many lines.") ,
            
            Question (question: ["Is it possible to declare several constants on one line?",
                                "Can we declare two variables at once on one line?",
                                "Is it possible to declare two or more variables or constants on one line?"],
                     image: "",
                     optionA: "Yes, comma separated",
                     optionB: "Yes, backslash",
                     optionC: "No, each on a new line",
                     optionD: "Yes, separated by colon",
                     questionId: 5,
                     helpText: "We can define several variables and constants at once on one line. In this case, they must be separated by a comma."),
            
            Question (question: ["Can we change the value of the variable?",
                                "Does the value assigned to the variable change?",
                                "Is it possible to change the value assigned to a variable?"],
                     image: "",
                     optionA: "Yes",
                     optionB: "No",
                     optionC: "Yes, but only inside the loop",
                     optionD: "",
                     questionId: 6,
                     helpText: "A distinctive feature of variables is that we can change their value many times while the program is running."),
            
            Question (question: ["A named piece of memory, the value of which can be set only once and cannot be changed in the future",
                                "The value of this named section of memory can be set only once, without the possibility of changing it later"],
                     image: "",
                     optionA: "Constant",
                     optionB: "Constant",
                     optionC: "Lambda",
                     optionD: "",
                     questionId: 7,
                     helpText: "Constants are like variables, they also store some value, with the exception that they are defined using the let keyword, and we cannot change their value after their initialization. Thus, if the value of a variable does not change during the program, it is better to use a constant instead of this variable. "),
            
            Question (question: ["The keyword that is used to define the constant",
                                "What keyword is used to define a constant?",
                                "This keyword can be used to define a constant"],
                     image: "",
                     optionA: "let",
                     optionB: "set",
                     optionC: "var",
                     optionD: "",
                     questionId: 8,
                     helpText: "Constants are like variables, they also store some value, with the exception that they are defined using the let keyword, and we cannot change their value after their initialization. Thus, if the value of a variable does not change during the program, it is better to use a constant instead of this variable. "),
            
            Question (question: ["When can the data in a constant be overwritten?",
                                "Exception when data in a constant can be overwritten"],
                     image: "",
                     optionA: "Inside a loop",
                     optionB: "Only in ViewDidLoad ()",
                     optionC: "Inside a function",
                     optionD: "",
                     questionId: 9,
                     helpText: "An exception is when used in a loop, where the constant will be overwritten every iteration."),
            
            Question (question: ["What keyword is used to define a variable?",
                                "The keyword that is used to define the variable",
                                "With this keyword you can define a variable"],
                     image: "",
                     optionA: "var",
                     optionB: "let",
                     optionC: "func",
                     optionD: "set",
                     questionId: 10,
                     helpText: "The var keyword is used to define a variable. A distinctive feature of variables is that we can change their value many times while the program is running"),
            
            Question (question: ["How is the help comment formatted?"],
                     image: "",
                     optionA: "/ ** Comment * /",
                     optionB: "// Comment",
                     optionC: "/// Comment",
                     optionD: "// MARK: Comment",
                     questionId: 66,
                     helpText: "In addition to the standard comments that you might see in any programming language, Swift allows you to integrate comments into the help system. This kind of comments is necessary when you are developing a library of functions. They are formatted as follows: / ** Comment * /. After writing the help comment to a function, you can Alt-press its name to get help. "),
            
            Question (question: ["A named section in memory that stores some value",
                                "What is the name of the named section in memory in which some value is stored?",
                                "A named or otherwise addressed memory area, the address of which can be used to access data"],
                     image: "",
                     optionA: "Variable or Constant",
                     optionB: "Structure",
                     optionC: "String",
                     optionD: "Library",
                     questionId: 11,
                     helpText: "To store data in Swift, as in other programming languages, variables and constants are used. A variable or constant is a named section in memory that stores some value."),
            
            Question (question: ["Data type responsible for storing individual Unicode characters",
                                "What type stores individual characters?",
                                "Individual Unicode characters are stored in this data type"],
                     image: "",
                     optionA: "Character",
                     optionB: "Float",
                     optionC: "Bool",
                     optionD: "String",
                     questionId: 12,
                     helpText: "Two data types are used to work with text: Character and String. Character is responsible for storing individual Unicode characters, and String is for storing arbitrary text information."),
            
            Question (question: ["Data type responsible for storing arbitrary text information",
                                "What type of data stores free text?",
                                "An arbitrary string literal can be stored in this type"],
                     image: "",
                     optionA: "String",
                     optionB: "Bool",
                     optionC: "Character",
                     optionD: "",
                     questionId: 13,
                     helpText: "Two data types are used to work with text: Character and String. Character is responsible for storing individual Unicode characters, and String is for storing arbitrary text information."),
            
            Question (question: ["If we are sure that the value of the variable will not change, what should we use?",
                                "If we are sure that the value of the variable will not change, what should we declare instead?"],
                     image: "",
                     optionA: "Constant",
                     optionB: "Variable",
                     optionC: "Literal",
                     optionD: "Structure",
                     questionId: 14,
                     helpText: "In addition to variables, constants can be used to store data in a program. Constants are like variables, they also store some value, except that they are defined using the let keyword and we cannot change their value after they are initialized. Thus, if the value of some variable will not change during the program, it is better to use a constant instead of this variable. "),
            
            Question (question: ["What data type stores numbers that do not contain a fractional part (for example 42 or -23)?",
                                "What type are signed integers stored in?",
                                "Any integers without a fractional part are stored in this type"],
                     image: "",
                     optionA: "Int",
                     optionB: "UInt",
                     optionC: "Float",
                     optionD: "Double",
                     questionId: 15,
                     helpText: "Int: a signed integer, such as 1, -30, 458. Equivalent to Int32 on 32-bit platforms, and Int64 on 64-bit platforms."),
            
            Question (question: ["All types in Swift are written with ...",
                                "With what letter should all types be written in Swift?",
                                "All types in Swift are written with this letter"],
                     image: "",
                     optionA: "Capital letter",
                     optionB: "At our discretion",
                     optionC: "Lowercase letter",
                     optionD: "",
                     questionId: 16,
                     helpText: "All types in Swift are capitalized, just remember that."),
            
            Question (question: ["How do I access the minimum and maximum value of each type of integer?",
                                "How to get the minimum and maximum number from Int or UInt?",
                                "It is through these properties that we can access the maximum and minimum Int and UInt numbers"],
                     image: "",
                     optionA: "min and max",
                     optionB: "first and last",
                     optionC: "count",
                     optionD: "first and max",
                     questionId: 17,
                     helpText: "You can get the minimum and maximum value of each number using the min and max properties."),
            
            Question (question: ["What type can store longer fractional numbers?",
                                "What type of floating point can store the longer fractional part?",
                                "It is in this type that the largest number of decimal places can be stored"],
                     image: "",
                     optionA: "Double",
                     optionB: "Float",
                     optionC: "UInt",
                     optionD: "",
                     questionId: 18,
                     helpText: "Double is a 64 bit floating point number - it should be used when values ​​need to be very large or especially precise. It has 15 decimal places precision, whereas Float is only 6."),
            
            Question (question: ["What type only stores positive integers?",
                                "A type that stores only unsigned integers",
                                "Only positive integers can be stored in this type"],
                     image: "",
                     optionA: "UInt",
                     optionB: "Float",
                     optionC: "Int",
                     optionD: "Double",
                     questionId: 19,
                     helpText: "Swift provides an unsigned integer type, UInt (Unsigned integer), which is the same size as the system bit. Use UInt only when you really need an unsigned integer type. If you don’t, use Int is preferred even when known that the values ​​will be non-negative. Constant use of Int for integers promotes compatibility, the code avoids conversions between different types of numbers and matches integer type inference. "),
            
            Question (question: ["A fixed sequence of characters surrounded by double quotes",
                                "A sequence of arbitrary characters inside double quotes",
                                "This literal consists of any sequence of characters"],
                     image: "",
                     optionA: "String literal",
                     optionB: "Numeric literal",
                     optionC: "Empty array literal",
                     optionD: "",
                     questionId: 20,
                     helpText: "A fixed sequence of characters surrounded by double quotes is called a string literal. Usually used as an initial value to initialize a constant or variable, and the type can be implicitly declared."),
            
            Question (question: ["Fixed sequence of numbers",
                                "A sequence of numbers starting with the prefix operator - or + ",
                                "What is the name of any of these examples: -2234, 10, 0?"],
                     image: "",
                     optionA: "Numeric literal",
                     optionB: "Operator",
                     optionC: "String literal",
                     optionD: "Random number",
                     questionId: 21,
                     helpText: "A fixed sequence of numbers that begins with either a digit or the prefix minus or plus operator is called a numeric literal."),
            
            Question (question: ["How can I declare a data type?",
                                "In Swift, you can declare a data type in several ways, how?",
                                "This is how you can declare the data type of a constant or variable in Swift"],
                     image: "",
                     optionA: "Explicitly or Implicitly",
                     optionB: "Implicit",
                     optionC: "Inaudible or Inaudible",
                     optionD: "",
                     questionId: 22,
                     helpText: "Explicitly, specifying the data type when declaring a variable, separated by a colon. Or implicitly, by initializing the value in a variable or constant (from which Xcode will figure out which data type to assign to this value)."),
            
            Question (question: ["Can I use a variable with an explicit, non-optional data type before initializing it?",
                                "There is a variable with an explicit, non-optional data type, can you use it before initialization?",
                                "Can a variable be used before initialization if it is not optional?"],
                     image: "",
                     optionA: "No",
                     optionB: "Yes",
                     optionC: "",
                     optionD: "",
                     questionId: 23,
                     helpText: "Using a variable or constant before it is initialized is not possible in Swift (except for values ​​with optional types)."),
            
            Question (question: ["What type can store any integer between -2 147 483 648 to 2 147 483 647?",
                                "A type that can store any integer from -2 147 483 648 to 2 147 483 647?",
                                "It is this type that can store any integer from -2 147 483 648 to 2 147 483 647"],
                     image: "",
                     optionA: "Int32",
                     optionB: "Decimal",
                     optionC: "Uint32",
                     optionD: "Int64",
                     questionId: 24,
                     helpText: "Values ​​from -2 147 483 648 to 2147 483 647 correspond to Int32."),
            
            Question (question: ["If you do not specify the size of an integer in the code, what will it be?",
                                "What will be the size of a number if you do not specify a specific value in an explicit type declaration?",
                                "What will be the size of an integer if you do not explicitly specify it in the code?"],
                     image: "",
                     optionA: "According to system bitness",
                     optionB: "32",
                     optionC: "64",
                     optionD: "128",
                     questionId: 25,
                     helpText: "Unless otherwise specified, the size of the number always corresponds to the capacity of the system."),
            
            Question (question: ["What is the name of the variable declaration with assignment of a value?",
                                "Declaring a variable and assigning a value to it",
                                "Assigning the initial value to the declared object"],
                     image: "",
                     optionA: "Initialization",
                     optionB: "Erection",
                     optionC: "Announcement",
                     optionD: "",
                     questionId: 26,
                     helpText: "Initialization is the preparatory process for an instance of a class, structure, or enumeration for future use. This process involves setting initial values ​​for each storage property of that instance and making any settings or initializations that are needed before the instance is used.") ,
            
            Question (question: ["What is the precision in decimal places of the Double type?",
                                "How many decimal digits can a Double store?",
                                "Double can store exactly as many digits after the decimal point"],
                     image: "",
                     optionA: "15 decimal digits",
                     optionB: "6 decimal digits",
                     optionC: "12 decimal digits",
                     optionD: "18 decimal digits",
                     questionId: 27,
                     helpText: "Double is a 64 bit floating point number. It has a precision of 15 decimal places."),
            
            Question (question: ["What is the precision in decimal places of the Float type?",
                                "How many decimal digits can a Float store?",
                                "Float can store exactly as many digits after the decimal point"],
                     image: "",
                     optionA: "6 decimal digits",
                     optionB: "4 decimal digits",
                     optionC: "12 decimal digits",
                     optionD: "10 decimal digits",
                     questionId: 28,
                     helpText: "Float is accurate to 6 decimal places."),
            
            Question (question: ["If using both floating point types is equivalent, which is preferred?",
                                "In cases where it is possible to use both types (Float and Double), which is preferable?",
                                "In situations where greater precision is needed, which type should be used?"],
                     image: "",
                     optionA: "Double",
                     optionB: "Float",
                     optionC: "Character",
                     optionD: "String",
                     questionId: 29,
                     helpText: "Double has a precision of at least 15 decimal digits, while Float precision can only be 6 decimal digits. The appropriate floating point type is used depending on the nature and range of values that you must work with in your code. where both are possible, Double is preferred. "),
            
            Question (question: ["Can you pass an Int type if some part of the code expects a String type?",
                                "If some part of the code expects a String type, can you pass in Character?",
                                "Can you pass a positive Int32 number if some part of the code expects Uint32?"],
                     image: "",
                     optionA: "No",
                     optionB: "Yes",
                     optionC: "In some cases",
                     optionD: "",
                     questionId: 30,
                     helpText: "Swift is a strongly typed language. A strongly typed language encourages you to be clear about the types of values ​​your code can work with. If part of your code expects a String (for example), you cannot pass an Int (or any other a type other than String) by mistake. "),
            
            Question (question: ["How many double quotes should I use when opening and closing a multiline string literal?",
                                "How many double quotes are there when opening a multiline string literal?",
                                "Exactly so many double quotes are put when closing an opening of a multiline string literal"],
                     image: "",
                     optionA: "Three at a time",
                     optionB: "Two by one",
                     optionC: "One at a time",
                     optionD: "Four by four",
                     questionId: 31,
                     helpText: "If you need to create a string that supports multi-line form, use a multi-line string literal - a sequence of characters wrapped in three double quotes. A multi-line string literal includes all lines between the three opening and three closing quotes. The line begins on the first line after opening quotes, and ends on the line preceding the closing quotes. "),
            
            Question (question: ["What character is a line break in a multiline string literal (in the code) that allows you not to display a line break as part of the value of this line?",
                                "This character can only break a multiline literal line within the code (for better readability), without displaying a line break as part of the value of that line"],
                     image: "",
                     optionA: "Backslash",
                     optionB: "Asterisk",
                     optionC: "Dash",
                     optionD: "",
                     questionId: 32,
                     helpText: "If you want to use a line break to make your code more readable, but you don't want the line break to appear as part of the string value, then you need to use a backslash at the end of these lines. To put it simply, if you want to wrap a line inside your code to make it more readable, but don't want that line to wrap as well after compilation. "),
            
            Question (question: ["How can you initialize an empty string?",
                                "How is an empty String type initialized?",
                                "An empty string is initialized in exactly this way (s)"],
                     image: "",
                     optionA: "= String ()",
                     optionB: "= [String]",
                     optionC: "= (String)",
                     optionD: "",
                     questionId: 33,
                     helpText: "To create an empty String value as a starting point for creating longer strings, either assign an empty string literal to a variable, or initialize a String object using the initialization syntax: = String ()."),
            
            Question (question: ["A way to create a new String value from different constants, variables, literals and expressions, including their values ​​in a string literal",
                                "Creating a new String value from various constants, variables, literals and expressions, including their values ​​in a string literal",
                                "Embedding different values ​​in a String using backslashes and parentheses is called?"],
                     image: "",
                     optionA: "Interpolation",
                     optionB: "Concatenation",
                     optionC: "Concatenate strings",
                     optionD: "Interspersed values",
                     questionId: 34,
                     helpText: "String interpolation is a way to create a new String value from various constants, variables, literals and expressions, including their values ​​in a string literal. Each element that you insert into a string literal must be enclosed in parentheses and inside the double quotes of the literal , and there must be a backslash in front of the open parenthesis. "),
            
            Question (question: ["How can I add a Character value to a String variable?",
                                "How can we add one Character to a String variable?",
                                "Using which method can we add Character to a String variable?"],
                     image: "",
                     optionA: "Using String append",
                     optionB: "Concatenation",
                     optionC: "Typecasting",
                     optionD: "Via addition operator",
                     questionId: 35,
                     helpText: "You can append a Character value to a String variable using the String append method. You cannot append a String or Character to an existing Character variable, because a Character value must only consist of a single character."),
            
            Question (question: ["Can I compare two strings?",
                                "Is it possible to compare two String values?",
                                "Can we compare two String values?"],
                     image: "",
                     optionA: "Yes",
                     optionB: "Only ==",
                     optionC: "Only! =",
                     optionD: "No",
                     questionId: 36,
                     helpText: "Swift provides three ways to compare text values: string and character equality, prefix equality, and suffix equality. String and character equality is checked by the equality operator (==) and the inequality operator (! =). Two String values ​​(or two Character values ) are considered equal if their extended grapheme sets are canonically equivalent. Extended grapheme sets are canonically equivalent if they have the same linguistic meaning and appearance, even if they initially consist of different Unicode scalars. "),
            
            Question (question: ["What will be returned when comparing two String?",
                                "What type will be returned as a result of comparing two String values?",
                                "What do we get after comparing two Character?"],
                     image: "",
                     optionA: "Bool",
                     optionB: "String",
                     optionC: "Character",
                     optionD: "1 or 0",
                     questionId: 37,
                     helpText: "When comparing String or Character, the Bool value is returned (true or false)."),
            
            Question (question: ["What type will be assigned to the variable from the image?",
                                "What type will be assigned with this implicit typing?"],
                     image: "TheBasics36",
                     optionA: "Double",
                     optionB: "Float",
                     optionC: "Decimal",
                     optionD: "",
                     questionId: 38,
                     helpText: "With implicit typing, a floating-point number is assigned the type Double, since that is the preferred choice."),
            
            Question (question: ["What do we get when we try to run this code?"],
                     image: "TheBasics37",
                     optionA: "We will face an error",
                     optionB: "Nothing will happen",
                     optionC: "Variable is assigned a number",
                     optionD: "Variable is cleared",
                     questionId: 39,
                     helpText: "Swift is a type-safe language with strong typing, so after we assign a type to a variable, we cannot change it. So, in this case, we will encounter an error. The error occurs because the variable name expects a string literal, and a number floating point is not a string and does not match the type of name. "),
            
            Question (question: ["Is the character set reserved by the programming language?",
                                "Character sets reserved by a programming language that cannot be used as identifiers"],
                     image: "",
                     optionA: "Keyword",
                     optionB: "Function",
                     optionC: "Closure",
                     optionD: "Identifier",
                     questionId: 40,
                     helpText: "Keywords are reserved and cannot be used as identifiers unless they are enclosed in single quotes. Keywords other than inout, var, and let can be used as external parameter names in a function declaration or function call unnecessarily put them in single quotes. "),
            
            Question (question: ["What do we get when comparing the variables name and char?"],
                     image: "TheBasics39",
                     optionA: "true",
                     optionB: "false",
                     optionC: "Error",
                     optionD: "",
                     questionId: 41,
                     helpText: "Although we only assign a single character to the char variable, without explicitly specifying the data type, Swift will automatically assign the type to String, so the two can be compared and the comparison will return true (because in this case the values ​​of the variables are equal)") ,
            
            Question (question: ["What do we get when comparing the variables name and name2?"],
                     image: "TheBasics40",
                     optionA: "Comparison error",
                     optionB: "false",
                     optionC: "true",
                     optionD: "",
                     questionId: 42,
                     helpText: "Before us are two variables with different values, and if you hurry up, you can answer that the result of the comparison will be false, since their values ​​are not equal. But in this case, the variables have different data types, and such a comparison will cause an error Binary operator '==' cannot be applied to operands of type 'String' and 'Character' "),
            
            Question (question: ["Are all base types (Int, String, Double, Bool) in Swift hashable?",
                                "All basic types (Int, String, Double, Bool) in Swift are hashable, are they?",],
                     image: "",
                     optionA: "Yes",
                     optionB: "No",
                     optionC: "Everything except Bool",
                     optionD: "Everything except String",
                     questionId: 43,
                     helpText: "All basic Swift types (Int, String, Double, Bool) are hashable types by default and can be used as set value types or as dictionary key types. Enumeration member values ​​without any associated values ​​are also hashable. default."),
            
            Question (question: ["What allows you to create and pass groups of values, and return multiple values ​​from a function?",
                                "With this, you can return multiple values ​​from a function as one integer value",
                                "How can we create and pass groups of values ​​in Swift?"],
                     image: "",
                     optionA: "Tuple",
                     optionB: "Optional",
                     optionC: "Multiple",
                     optionD: "Variable",
                     questionId: 44,
                     helpText: "In addition to familiar types, Swift includes extended types that are not in Objective-C. These include tuples, which allow you to create and pass groups of values. Tuples can return multiple values ​​from a function as a single integer value."),
            
            Question (question: ["A type that allows you to work with missing values",
                                "What type allows you to work with missing values?",
                                "You can work with missing values ​​using this type"],
                     image: "",
                     optionA: "Optional type",
                     optionB: "Tuple type",
                     optionC: "Collection type",
                     optionD: "",
                     questionId: 45,
                     helpText: "Swift also includes optional types that allow you to work with missing values. Optional values ​​say either there is a value here and it is equal to x or there is no value at all. Optional types are similar to using nil with pointers in Objective-C , but they work with all types, not just classes. Optional values ​​are safer and more expressive than nil pointers in Objective-C, and are at the heart of many of Swift's most powerful features."),
            
            Question (question: ["Can we pass an optional String to a piece of code that expects a non-optional String?",
                                "Can you pass an optional Double to a piece of code that expects a non-optional Double?"],
                     image: "",
                     optionA: "No",
                     optionB: "Yes",
                     optionC: "",
                     optionD: "",
                     questionId: 46,
                     helpText: "Swift is type safe, which means Swift helps you figure out what types of values ​​your code can work with. If a piece of your code expects a String, type safety will prevent you from passing an Int to it by mistake. Also, type safety is not will allow you to accidentally pass an optional String to a piece of code that a non-optional String expects. Type safety allows you to catch and fix bugs as early as possible in the development process. "),
            
            Question (question: ["Choose the appropriate option: Declare a constant named numbers, which will be of type Double with a value of 1.0.",
                                "How we write this: Declare a constant named numbers, which will be of type Double with a value of 1.0."],
                     image: "",
                     optionA: "let numbers: Double = 1.0",
                     optionB: "var numbers: Double = 1.0",
                     optionC: "let numbers = Double (1.0)",
                     optionD: "let numbers = Double: 1.0",
                     questionId: 47,
                     helpText: "The correct answer would be: let numbers: Double = 1.0."),
            
            Question (question: ["Can we use a value of type Int? As an operand in a mathematical operation?",
                                "Can you use Double? As an operand in a math operation?"],
                     image: "",
                     optionA: "No",
                     optionB: "Yes",
                     optionC: "",
                     optionD: "",
                     questionId: 71,
                     helpText: "Remember, an optional datatype is a completely new datatype, so even though optionals can take values ​​of basic datatypes, the rest of the properties of those datatypes are not optional. For example, you can't use Int? or Double? When performing mathematical operations."),
            
            Question (question: ["What cannot the names of constants and variables contain?",
                                "This cannot be used when writing constant and variable names",
                                "Choose what variable and constant names cannot contain?"],
                     image: "",
                     optionA: "Spaces and Arrows",
                     optionB: "Latin letters",
                     optionC: "Underscore",
                     optionD: "Unicode characters",
                     questionId: 48,
                     helpText: "Constant and variable names cannot contain spaces, mathematical symbols, arrows, private (or invalid) Unicode code points, or line or rectangle drawing characters. Also, names cannot start with numbers, although numbers can be included in name anywhere else. "),
            
            Question (question: ["Can we change it to a variable after declaring a constant, further down the code?",
                                "After declaring a variable, further down the code, can we change it to a constant?",
                                "Can we change constants to variables, and variables to constants?"],
                     image: "",
                     optionA: "No",
                     optionB: "Yes",
                     optionC: "",
                     optionD: "",
                     questionId: 49,
                     helpText: "If you have declared a constant or variable of a certain type, then you cannot re-declare it with the same name or force it to store a value of a different type inside yourself. Also, you cannot change a constant to a variable, and a variable to a constant."),
            
            Question (question: ["Which global function can output one or more values ​​to the console?",
                                "A global function that is used to print values ​​to the console",
                                "A function that is global and allows one or more values ​​to be printed to the console?"],
                     image: "",
                     optionA: "print (_: separator: terminator :)",
                     optionB: "show ()",
                     optionC: "alert ()",
                     optionD: "Console.WriteLine",
                     questionId: 50,
                     helpText: "The print (_: separator: terminator :) function is a global function that outputs one or more values ​​as appropriate. In Xcode, for example, the print (_: separator: terminator :) function outputs values ​​to the console. The separator and terminator parameters have default values, so you can simply skip them when using the function. By default, the function ends the output with a newline character. To print values ​​to the console without a newline, you need to specify an empty string in the terminator parameter. "),
            
            Question (question: ["What is the name of a compiler-ignored, non-executable text in the code?",
                                "What is the name of the non-executable text in the code?",
                                "What do you need to add to get a non-executable piece of code?"],
                     image: "",
                     optionA: "Comment",
                     optionB: "Exception",
                     optionC: "Note",
                     optionD: "",
                     questionId: 51,
                     helpText: "Use comments to add non-executable text in your code as a note or a reminder to yourself. Comments are ignored by the Swift compiler at compile time. Comments in Swift are very similar to comments in C. Single line comments start with two slashes (//), multi-line comments begin with a slash and an asterisk (/ *) and end with an asterisk followed by a slash (* /). Inside a multi-line comment, you can put any piece of code you want to make non-executable. "),
            
            Question (question: ["Is there one case when you need to put a semicolon (;) in your code in Swift?",
                                "When would you need to put a semicolon (;) in your code?",
                                "In this case, you need to put a semicolon in the code"],
                     image: "",
                     optionA: "Multiple expressions per line",
                     optionB: "Declaring two variables",
                     optionC: "After every expression",
                     optionD: "",
                     questionId: 52,
                     helpText: "Unlike many other languages, Swift does not require you to write a semicolon (;) after each expression in your code, although you can do that if you want. However, semicolons are required if you want to write multiple separate expressions on one line Example: let name = SomeValue; print (name). "),
            
            Question (question: ["What type will the constant number be?",
                                "Choose the correct type for Swift to assign to the number constant?",
                                "The constant number will have exactly this type"],
                     image: "TheBasics51",
                     optionA: "Double",
                     optionB: "Float",
                     optionC: "Int",
                     optionD: "Character",
                     questionId: 53,
                     helpText: "If you combine integer and floating point literals in a single expression, then the type will be inferred to be Double. Swift always chooses Double (instead of Float) when inferring a floating point type. The literal value 1 is not of an explicit type itself by itself, so that the corresponding Double is inferred from the presence of a floating-point literal as part of the addition."),
            
            Question (question: ["How to change the name of an existing type to a more appropriate in context?",
                                "How can you change the name of an existing type to suit the context?",
                                "How can I give an alternate name for an existing type?"],
                     image: "",
                     optionA: "Create typealias",
                     optionB: "Create copy of type",
                     optionC: "Create context name",
                     optionD: "This is not possible",
                     questionId: 54,
                     helpText: "Type aliases provide an alternate name for an existing type. You can specify a type alias using the typealias keyword. Type aliases are useful when you want to refer to an existing type by a name that is more appropriate in context. After you have specified an alias once like, you can use the alias wherever you would like to use it. "),
            
            Question (question: ["What two boolean constants does Swift provide for the Bool type?",
                                "Swift has two logical constants for the Bool type, which ones?",
                                "What two booleans can we assign to variables of type Bool?"],
                     image: "",
                     optionA: "true and false",
                     optionB: "true and not true",
                     optionC: "1 and 0",
                     optionD: "truth and false",
                     questionId: 55,
                     helpText: "Swift has a simple boolean type Bool. This type is called boolean because it can only be true or false. Swift provides two boolean constants, true and false respectively. As with Int and Double in the previous chapters, you cannot you must specify constants or variables as Bool if you set them to true or false when you create them. Type inference helps keep Swift code concise and readable when you create constants or variables with values ​​that you know exactly. "),
            
            Question (question: ["How to correctly address the first element of a tuple?",
                                "How can we refer to the first element of the tuple?",
                                "We can refer to the first element of the tuple through the numeric index, how exactly?"],
                     image: "",
                     optionA: "someTuples.0",
                     optionB: "someTuples.1",
                     optionC: "someTuples [0]",
                     optionD: "someTuples (1)",
                     questionId: 56,
                     helpText: "You can decompose the contents of a tuple into separate constants and variables that can be accessed in the usual way. If you only want some of the values ​​of a tuple, you can ignore parts of the tuple during decomposition using the underscore (_) character. Alternatively it is possible to access individual parts of a tuple using numeric indices starting with zero. "),
            
            Question (question: ["When can we give names to the individual elements of a tuple?",
                                "At what point can we give names to the individual elements of the tuple?"],
                     image: "",
                     optionA: "During announcement",
                     optionB: "After initialization",
                     optionC: "After first use",
                     optionD: "At the moment of accessing the element",
                     questionId: 57,
                     helpText: "You can give names to individual elements of the tuple during declaration. For example: let gameRecord = (questionNumber: 50, score: 49)."),
            
            Question (question: ["A special object that groups values ​​of different types within a single composite value",
                                "An object offering the simplest way to combine values ​​of different types within a single value",
                                "Each individual value in this object can have its own data type, which does not depend on others"],
                     image: "",
                     optionA: "Tuple",
                     optionB: "Array",
                     optionC: "Collection",
                     optionD: "",
                     questionId: 68,
                     helpText: "A tuple is a special object that groups values ​​of different types within a single composite value. Moreover, a tuple offers the simplest way to combine values ​​of different types within a single value. Each individual value in a tuple can have its own data type. which does not depend on others in any way. "),
            
            Question (question: ["What type is used when a value might be missing?",
                                "If the value can be missing, which type will we use?",
                                "This type is used if the value may be missing"],
                     image: "",
                     optionA: "Optional",
                     optionB: "Boolean Bool",
                     optionC: "Tuple",
                     optionD: "Implicit type",
                     questionId: 58,
                     helpText: "Optional types are used in cases where a value may not be present. An optional type implies that there are two options: either the value is present and can be extracted from the optional, or it is not at all."),
            
            Question (question: ["What type will Swift assign convertedNum to?",
                                "Constant convertedNum will be assigned exactly this type",
                                "Swift will assign this type to convertedNum"],
                     image: "TheBasics57",
                     optionA: "Int?",
                     optionB: "Int",
                     optionC: "String",
                     optionD: "We will face an error",
                     questionId: 59,
                     helpText: "Since the Int () method may have an invalid argument, it returns an optional Int instead of Int. An optional Int is written Int? rather than Int. A question mark means that the value it contains is optional, which means it can contain some Int value, or it may contain no value at all. (It cannot contain anything else, such as a Bool value or a String value. It's either Int or nothing at all."),
            
            Question (question: ["How can we set an optional variable to no value?",
                                "How can you assign a missing value to an optional variable?",
                                "A missing value for an optional variable can be set like this"],
                     image: "",
                     optionA: "Assign nil",
                     optionB: "Assign 0",
                     optionC: "Assign empty array literal",
                     optionD: ".removeValue",
                     questionId: 60,
                     helpText: "We can set an optional variable to a null state by assigning the special value nil to it. nil cannot be used with non-optional constants and variables. If the value of a constant or variable should ever be absent in your code under certain conditions, always declare them as an optional value of the appropriate type. "),
            
            Question (question: ["How can we check if an optional contains a value?",
                                "How do we know if an optional contains a value or not?",
                                "This way you can find out if an optional contains a value or not"],
                     image: "",
                     optionA: "Compare with nil with if",
                     optionB: "Via operator ===",
                     optionC: "Inside a for-in loop",
                     optionD: "Through forced unwrap",
                     questionId: 61,
                     helpText: "You can use an if statement comparing an optional with nil to check if the optional contains a value. This comparison can be done using the equal operator (==) or the inequality operator (! =). If optional has a value , it will be treated as unequal nil."),
            
            Question (question: ["If we are sure that the option matters, what is the fastest way to get it?",
                                "What is the fastest way we can get the value of an option if we are sure that it is present?",
                                "How to quickly get the value of an optional if the value is definitely there?"],
                     image: "",
                     optionA: "Force checkout (!)",
                     optionB: "Inside a while loop",
                     optionC: "Optionals bind",
                     optionD: "Operator ??",
                     questionId: 62,
                     helpText: "If you are sure that an optional contains a value, you can access its value by adding an exclamation point (!) at the end of the optional name. The exclamation point actually says, I know for sure that this optional contains a value, please use it. This expression is known as Forcing the value of an optional."),
            
            Question (question: ["Are objects available anywhere in the program?"],
                     image: "",
                     optionA: "Global Objects",
                     optionB: "Local Objects",
                     optionC: "",
                     optionD: "",
                     questionId: 65,
                     helpText: "Each created object can be used only according to certain rules, one of which is called the scope. The scope determines where exactly in the code a particular object can be used. By belonging to the scope of the object, objects are divided into local and global."),
            
            Question (question: ["What is the name of the ability to refer to a property dynamically instead of directly?"],
                     image: "TheBasics67",
                     optionA: "KeyPath",
                     optionB: "NamePath",
                     optionC: "PropertyURL",
                     optionD: "",
                     questionId: 67,
                     helpText: "One of the useful features of Objective-C was the ability to refer to a property dynamically, rather than directly. In other words, you could specify the object and its property to use, but not read or write this property now, but do this later. After creating a struct and a constant using this structure, you can use a backslash character before specifying the parameter to create a dynamic link. The name constant is written to reference the value of the name property from Starship."),
            
            Question (question: ["What type will this tuple have?",
                                "This tuple will have this data type",
                                "What data type will this tuple be assigned?"],
                     image: "TheBasics69",
                     optionA: "(String, Double, Bool)",
                     optionB: "Tuple.type",
                     optionC: "(String, Float, Bool)",
                     optionD: "(Character, Double, True)",
                     questionId: 69,
                     helpText: "You might have a question: if a tuple groups values ​​of different data types into one, then what is the data type of the tuple itself? The correct answer is (String, Double, Bool). The data type of a tuple is a fixed ordered set of data types. , the values ​​included in it, which is written in parentheses and whose elements are separated by commas from each other. For the tuple from our example, this is (String, Double, Bool) and we have it set implicitly. The order of specifying data types must correspond to the order of the elements in the tuple."),
            
            Question (question: ["Can we give a name for each element of the tuple?",
                                "We cannot give names for some of the elements of a tuple, we must either not use them at all, or specify them for each element. Is that so?",
                                "Naming tuple elements does not prevent us from using their indices. Is that so?"],
                     image: "",
                     optionA: "Yes",
                     optionB: "No",
                     optionC: "",
                     optionD: "",
                     questionId: 70,
                     helpText: "For each element of the tuple, you can specify not only a value, but also a name. The name of the element is specified separately before each element, separated by a colon. At the same time, you cannot specify names for individual elements: you must either specify names for all elements, or not use them at all The specified tuple names can be used to retrieve the values ​​of these elements. The syntax is the same as when accessing through indexes. Naming values ​​does not prevent you from using indexes. Indexes in a tuple can always be used. Accessing elements using names is more convenient. and clearer than index access. "),
            
            Question (question: ["What is the name of the forced extraction of an optional value?",
                                "Retrieving an optional value using the (!) Operator"],
                     image: "",
                     optionA: "Force unwrap",
                     optionB: "Unwrapping",
                     optionC: "Optional Chaining",
                     optionD: "",
                     questionId: 72,
                     helpText: "Swift offers a mechanism to retrieve an optional value called forced retrieval. This uses a special operator to convert the value of the optional data type to the value of the primary (for that optional) data type, for example, Int? is converted to Int. For forced retrieval, use an exclamation mark as a postfix to the name of a parameter containing an optional value.When forced to retrieve a value, you must ensure that a parameter with an optional data type contains a value and not nil, otherwise an attempt will be made to convert a non-existent value to the main data type, after compiling such code, we will encounter an error. "),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 73,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 74,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 75,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 76,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 77,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 78,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 79,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 80,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 81,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 82,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 83,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 84,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 85,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 86,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 87,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 88,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 89,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 90,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 91,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 92,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 93,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 94,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 95,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 96,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 97,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 98,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 99,
            //                     helpText: ""),
            //
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //                     questionId: 100,
            //                     helpText: ""),
        ]
    }
}



