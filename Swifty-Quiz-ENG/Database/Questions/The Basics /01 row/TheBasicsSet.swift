
//  Created by Евгений Никитин on 15.04.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

// MARK:  01 - Вопросы (id) с 1 по 100

class TheBasicsSet {
	static func getQuestions() -> [Question] {
		return [
			Question(question: ["According to Swift's best practices, which letter case should the variable names start with?",
								"It is recommended to use this case for the first letter of constant and variable names",
								"Which case should be used for the first letter of constant and variable names in Swift?"],
					 image: "",
					 optionA: "Lower case",
					 optionB: "Upper case",
					 optionC: "It doesn’t matter",
					 optionD: "",
					 questionId: 1,
					 helpText: "The convention is to use Lower Camel Case while naming properties and methods. Their names should start with a lowercase letter. And if a name consists of several words, only the first word should be lowercased. At the same time, type names should start with an uppercase letter (Upper Camel Case)."),

			Question(question: ["What word can be defined as the introduction of a new object that you are going to use?",
								"The process of creating a new object that you are going to use is called ..."],
					 image: "",
					 optionA: "Declaration",
					 optionB: "Modification",
					 optionC: "Initialization",
					 optionD: "",
					 questionId: 2,
					 helpText: "A declaration introduces a new object into the program. Initialization assigns a specific value to the declared object."),

			Question(question: ["A variable name must be ...",
								"All constant and variable names must be ...",
								"It is required to give each variable and constant a ... name"],
					 image: "",
					 optionA: "Unique",
					 optionB: "Universal",
					 optionC: "Simple",
					 optionD: "",
					 questionId: 3,
					 helpText: "All variables and constants must have unique names. You can't use several variables or constants with the same name within the same program. And it's a good practice to name them using so-called lowerCamelCase. It means that names should begin with a lowercase letter. If the name consists of several words, only the first word should start with a lowercase letter."),

			Question(question: ["Is it necessary to use var or let keywords every time you call an existing variable or constant?",
								"It is true that every time you want to access a variable or a constant, you must use var or let operators?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "Only with let",
					 optionD: "",
					 questionId: 63,
					 helpText: "Var and let operators are required only while declaring variables and constants. To call them afterwards, you need to use only their names."),

			Question(question: ["Is it possible to create a variable that has the same name as another variable?",
								"Can we give the same name to two different constants?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 64,
					 helpText: "Names must be unique. It's impossible to declare a constant or a variable that has the same name as another constant or variable. The only exception is when these variables and constants are in different scopes. For example: you can name a local variable (inside a function) the same as you called a global variable."),

			Question(question: ["What is a separate Swift command usually called?",
								"This word can be defined as a separate Swift command"],
					 image: "",
					 optionA: "Statement",
					 optionB: "Variable",
					 optionC: "Constant",
					 optionD: "Sentence",
					 questionId: 4,
					 helpText: "A separate command in Swift is called a statement. Just like any other programming language, Swift performs all actions by following the commands given (written) by the developer. A file with code usually consists of multiple statements written on separate lines."),

			Question(question: ["Is it possible to declare multiple constants on a single line?",
								"Can you declare two variables on a single line?",
								"Is it possible to declare two or more variables or constants on a single line?"],
					 image: "",
					 optionA: "Yes, separated by commas",
					 optionB: "Yes, separated by a backslash",
					 optionC: "No, each of them requires a new line",
					 optionD: "Yes, separated by a colon",
					 questionId: 5,
					 helpText: "You can declare multiple constants or multiple variables on a single line, separated by commas."),

			Question(question: ["Can we change the value of a variable?",
								"Is the value of a variable mutable?",
								"Is it possible to change the value assigned to a variable?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "Yes, but only inside a loop",
					 optionD: "",
					 questionId: 6,
					 helpText: "The distinctive feature of variables is that we can change their values many times during the program execution."),

			Question(question: ["A named block of memory whose value can't be changed once it is set",
								"The value of this type of memory block can be set only once with no option of changing it" ],
					 image: "",
					 optionA: "Constant",
					 optionB: "Invariable",
					 optionC: "Lambda",
					 optionD: "",
					 questionId: 7,
					 helpText: "Constants are pretty similar to variables since they also store some value, but they are declared with the let keyword, and you can't change their value once they are initialized. So, if the value of a variable remains the same throughout the program, you should consider using a constant instead."),

			Question(question: ["The keyword that is used to determine a constant",
								"Which keyword is used to introduce a constant?",
								"This keyword can be used to define a constant"],
					 image: "",
					 optionA: "let",
					 optionB: "set",
					 optionC: "var",
					 optionD: "",
					 questionId: 8,
					 helpText: "Constants are pretty similar to variables since they also store some value, but they are declared with the let keyword, and you can't change their value once they are initialized. So, if the value of a variable remains the same throughout the program, you should consider using a constant instead."),

			Question(question: ["In what case the data stored in a constant can be overwritten?",
								"The data stored in a constant can't be overwritten except while..."],
					 image: "",
					 optionA: "Inside a loop",
					 optionB: "Inside ViewDidLoad()",
					 optionC: "Inside a function",
					 optionD: "",
					 questionId: 9,
					 helpText: "A constant used in a loop will be overwritten with each iteration."),

			Question(question: ["Which keyword is used for defining a variable?",
								"The keyword that must be used while declaring a variable",
								"The keyword we use to define a variable"],
					 image: "",
					 optionA: "var",
					 optionB: "let",
					 optionC: "func",
					 optionD: "set",
					 questionId: 10,
					 helpText: "In Swift, you define variables using the var keyword. The distinctive feature of variables is that their value can be changed many times during the program execution."),

			Question(question: ["How multi-line documentation comments are created?"],
					 image: "",
					 optionA: "/** Comment */",
					 optionB: "// Comment",
					 optionC: "/// Comment",
					 optionD: "// MARK: Comment",
					 questionId: 66,
					 helpText: "In addition to the standard comments used in any other programming language, Swift allows adding comments right into the program's documentation. You may need such comments while developing a function library. Here is how documentation comments are created: /** Comment */. After adding the documentation comment to a function, you can click the function's name with the Opt (Alt) key pressed to see the comment."),

			Question(question: ["A named unit of data that stores an associated value",
								"What do you call a named storage location which contains a value?",
								"A memory storage location that contains a value and can be accessed by a name or another identifier"],
					 image: "",
					 optionA: "Variable or Constant",
					 optionB: "Structure",
					 optionC: "String",
					 optionD: "Library",
					 questionId: 11,
					 helpText: "Just like most other programming languages, Swift relies on variables and constants to store data. A variable or a constant is a named unit of storage location that is assigned a value."),

			Question(question: ["A data type that stores individual Unicode symbols",
								"Which type of data stores individual letters and other symbols?",
								"Individual Unicode symbols are stored in this data type"],
					 image: "",
					 optionA: "Character",
					 optionB: "Float",
					 optionC: "Bool",
					 optionD: "String",
					 questionId: 12,
					 helpText: "Swift’s String and Character types provide a fast, Unicode-compliant way to work with text. Each String is composed of independent Character values, while each Character represents an individual Unicode symbol."),

			Question(question: ["A data type responsible for storing any text value",
								"Which data type represents arbitrary text values",
								"An arbitrary text literal can be stored in this data type"],
					 image: "",
					 optionA: "String",
					 optionB: "Bool",
					 optionC: "Character",
					 optionD: "",
					 questionId: 13,
					 helpText: "Swift’s String and Character types provide a fast, Unicode-compliant way to work with text. Each String is composed of independent Character values, while each Character represents an individual Unicode symbol."),

			Question(question: ["What should we use if we are sure that the value of a variable won't change?",
								"What can we use instead of a variable if its value won't change??"],
					 image: "",
					 optionA: "A constant",
					 optionB: "A variable",
					 optionC: "A literal",
					 optionD: "A Structure",
					 questionId: 14,
					 helpText: "Besides variables, constants provide an additional way to store data in a program. They are pretty similar to variables since they also store some value, but constants are declared with the let keyword, and you can't change their value once they are initialized. So, if the value of a variable remains the same throughout the program, you should consider using a constant instead."),

			Question(question: ["A data type that stores whole numbers with no fractions or decimals. For instance, 42 or -23",
								"Which data type stores whole signed numbers?",
								"This type represents any whole number with no fractions"],
					 image: "",
					 optionA: "Int",
					 optionB: "UInt",
					 optionC: "Float",
					 optionD: "Double",
					 questionId: 15,
					 helpText: "An Int is a whole signed number, for example, 1, -30, 458. On a 32-bit platform, Int is the same size as Int32, while on a 64-bit platform, Int is the same size as Int64."),

			Question(question: ["All types in Swift start with a(n) ... letter",
								"Which letter case should you use for the first letter of any type in Swift?",
								"The names of all Swift's types start with this letter case"],
					 image: "",
					 optionA: "Uppercase",
					 optionB: "It doesn’t matter",
					 optionC: "Lowercase",
					 optionD: "",
					 questionId: 16,
					 helpText: "Type names in Swift are always capitalized, so they start with an uppercase letter."),

			Question(question: ["How can you access the minimum and maximum values of each integer type?",
								"How can you get the minimum and maximum values of Int or UInt?",
								"You can use these properties to access the minimum and maximum values of Int or UInt"],
					 image: "",
					 optionA: "min и max",
					 optionB: "first и last",
					 optionC: "count",
					 optionD: "first и max",
					 questionId: 17,
					 helpText: "You can access the minimum and maximum values of each integer type with its min and max properties"),

			Question(question: ["Which of the following types has a higher precision?",
								"Which type that stores numbers with a decimal point has a higher precision?",
								"Pick the type that stores the largest number of decimal digits"],
					 image: "",
					 optionA: "Double",
					 optionB: "Float",
					 optionC: "UInt",
					 optionD: "",
					 questionId: 18,
					 helpText: "Double represents a 64-bit floating-point number - in most cases, it is preferable to a Float because it has higher precision and is less likely to lose valuable accuracy. It has a precision of 15 decimal digits, whereas Float's precision can be as little as 6 decimal digits."),

			Question(question: ["Which type stores only the integers that are either positive or equal to zero?",
								"The type that stores only unsigned integers",
								"Pick the type that can store nonnegative integers only"],
					 image: "",
					 optionA: "UInt",
					 optionB: "Float",
					 optionC: "Int",
					 optionD: "Double",
					 questionId: 19,
					 helpText: "Swift provides an unsigned integer type, UInt (Unsigned Integer), which has the same size as the current platform’s native word size. Use it only when you specifically need an unsigned integer type with the same size as the platform’s native word size. Otherwise, Int is preferred, even when the values to be stored are known to be nonnegative. A consistent use of Int for integer values aids code interoperability, avoids the need to convert between different number types, and matches integer type inference."),

			Question(question: ["A sequence of characters surrounded by double quotation marks",
								"A series of Unicode characters enclosed in quotes",
								"Choose a literal that consists of a sequence of characters surrounded by double quotes"],
					 image: "",
					 optionA: "A string literal",
					 optionB: "An integer literal",
					 optionC: "An empty array literal",
					 optionD: "",
					 questionId: 20,
					 helpText: "A string literal is a sequence of characters surrounded by double quotation marks."),


			Question(question: ["The source code representation of a numeric value",
								"A positive or negative number expressed in the source code",
								"What do we call the following values in Swift: -2234, 10, 0?"],
					 image: "",
					 optionA: "Integer literal",
					 optionB: "Operator",
					 optionC: "String literal",
					 optionD: "Random number",
					 questionId: 21,
					 helpText: "Integer literals represent integer values of unspecified precision. An integer literal can be a positive or negative number, or zero."),

			Question(question: ["What approach(es) can you take to provide a constant or variable with a type?",
								"Choose the way(s) types can be declared in Swift",
								"How Swift can work out an object’s type?"],
					 image: "",
					 optionA: "Explicitly or Implicitly",
					 optionB: "Only implicitly",
					 optionC: "Distinctly or Vaguely",
					 optionD: "",
					 questionId: 22,
					 helpText: "Explicitly, via type annotation by placing a colon after the constant or variable name, followed by a space, followed by the name of the type to use. Implicitly, via type inference that enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide."),

			Question(question: ["Is it possible to use a variable of non-optional type before it is initialized?",
								"Can we use a non-optional variable before initializing it?",
								"Is it possible to use a variable before initialization if it is not represented by an optional?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 23,
					 helpText: "All variables and constants must be initialized before used (unless they are optional types)."),

			Question(question: ["Which data type can store any integer within the following boundaries: -2 147 483 648 ... 2 147 483 647?",
								"The type that can store any integer from -2 147 483 648 to 2 147 483 647",
								"Pick the type whose maximum and minimum values can't exceed -2 147 483 648 and 2 147 483 647"],
					 image: "",
					 optionA: "Int32",
					 optionB: "Decimal",
					 optionC: "Uint32",
					 optionD: "Int64",
					 questionId: 24,
					 helpText: "Values from -2 147 483 648 to 2 147 483 647 can be stored in Int32."),

			Question(question: ["If you don't specify an integer’s size in code, what will it be?",
								"If you don't specify an integer's size within its type declaration, what size will that integer have?",
								"What size will all integers have unless it is explicitly specified in code?"],
					 image: "",
					 optionA: "Platform’s native word size",
					 optionB: "32",
					 optionC: "64",
					 optionD: "128",
					 questionId: 25,
					 helpText: "Unless it is explicitly specified, integers always have the same size as the current platform’s native word size"),

			Question(question: ["What do we call the process of preparing a constant, variable, or any other object for use?",
								"What is the process of declaring a variable along with assigning its value called?",
								"Assigning a value to a previously declared object for the first time is called..."],
					 image: "",
					 optionA: "Initialization",
					 optionB: "Inheritance",
					 optionC: "Declaration",
					 optionD: "",
					 questionId: 26,
					 helpText: "Initialization is the process of preparing a constant, variable or any other object for use. This process involves setting an initial value for each stored property and performing any other setup required before the new object is ready for use."),


			///


			Question(question: ["Какую точность в десятичных знаках имеет тип Double?",
								"Сколько десятичных цифр может хранить тип Double?",
								"Double может хранить именно столько цифр после запятой"],
					 image: "",
					 optionA: "15 десятичных цифр",
					 optionB: "6 десятичных цифр",
					 optionC: "12 десятичных цифр",
					 optionD: "18 десятичных цифр",
					 questionId: 27,
					 helpText: "Double является 64 битным числом с плавающей точкой. Он имеет точность в 15 десятичных знаков."),

			Question(question: ["Какую точность в десятичных знаках имеет тип Float?",
								"Сколько десятичных цифр может хранить тип Float?",
								"Float может хранить именно столько цифр после запятой"],
					 image: "",
					 optionA: "6 десятичных цифр",
					 optionB: "4 десятичных цифр",
					 optionC: "12 десятичных цифр",
					 optionD: "10 десятичных цифр",
					 questionId: 28,
					 helpText: "Float имеет точность в 6 десятичных знаков."),

			Question(question: ["Если равноценно использование обоих типов с плавающей точкой, использование какого предпочтительнее?",
								"В случаях, где возможно использование обоих типов (Float и Double), какой предпочтительнее?",
								"В ситуациях, где нужна бОльшая точность вычислений, какой тип необходимо использовать?"],
					 image: "",
					 optionA: "Double",
					 optionB: "Float",
					 optionC: "Character",
					 optionD: "String",
					 questionId: 29,
					 helpText: "Double имеет точность минимум 15 десятичных цифр, в то время как точность Float может быть всего лишь 6 десятичных цифр. Соответствующий тип числа с плавающей точкой используется в зависимости от характера и диапазона значений, с которыми вы должны работать в коде. В случаях, где возможно использование обоих типов, предпочтительным считается Double."),

			Question(question: ["Можете ли вы передать тип Int, если некоторая часть кода ожидает тип String?",
								"Если некоторая часть кода ожидает тип String, можете ли вы передать Character?",
								"Можете ли вы передать положительное число типа Int32, если некоторая часть кода ожидает Uint32?"],
					 image: "",
					 optionA: "Нет",
					 optionB: "Да",
					 optionC: "В некоторых случаях",
					 optionD: "",
					 questionId: 30,
					 helpText: "Swift - язык со строгой типизацией. Язык со строгой типизацией призывает вас иметь четкое представление о типах значений, с которыми может работать ваш код. Если часть вашего кода ожидает String (например), вы не сможете передать ему Int (или любой другой тип, кроме String) по ошибке."),

			Question(question: ["Cколько двойных кавычек нужно ставить при открытии и закрытии многострочного строкового литерала?",
								"Какое количество двойных кавычек ставится при открытии многострочного строкового литерала?",
								"При закрытии открытии многострочного строкового литерала ставится именно столько двойных кавычек"],
					 image: "",
					 optionA: "По три",
					 optionB: "По две",
					 optionC: "По одной",
					 optionD: "По четыре",
					 questionId: 31,
					 helpText: "Если вам нужно создать строку, которая поддерживает многострочный вид, используйте литерал многострочной строки - последовательность символов, обернутых в три двойные кавычки. Многострочный литерал строки включает в себя все строки между тремя открывающими и тремя закрывающими кавычками. Строка начинается на первой строке после открывающих кавычек, а заканчивается на строке предшествующей закрывающим кавычкам."),

			Question(question: ["Каким символом осуществляется перенос строки в многострочном строковом литерале (в коде), позволяющий не отображать символ переноса строки в качестве части значения этой строки?",
								"Этот символ может перенести строку многострочного литерала только внутри кода (для лучшего чтения), не отображая перенос строки как часть значения этой строки"],
					 image: "",
					 optionA: "Обратный слеш",
					 optionB: "Звездочка",
					 optionC: "Тире",
					 optionD: "",
					 questionId: 32,
					 helpText: "Если вы хотите использовать символ переноса строки для того, чтобы сделать ваш код более читаемым, но вы не хотите чтобы символ переноса строки отображался в качестве части значения строки, то вам нужно использовать символ обратного слеша в конце этих строк. Проще говоря, если вы хотите перенести строку внутри кода, чтобы сделать его более читаемым, но не хотите, чтобы после компиляции эта строка также перенеслась."),

			Question(question: ["Как можно инициализировать пустую строку?",
								"Как инициализируется пустой тип String?",
								"Инициализация пустой строки происходит именно таким(ими) способом(ами)"],
					 image: "",
					 optionA: "= String()",
					 optionB: "= [String]",
					 optionC: "= (String)",
					 optionD: "",
					 questionId: 33,
					 helpText: "Чтобы создать пустое String значение в качестве отправной точки для создания более длинных строк, либо присвойте литерал пустой строки к переменной, либо инициализируйте объект String c помощью синтаксиса инициализации: = String()."),

			Question(question: ["Способ создать новое значение типа String из разных констант, переменных, литералов и выражений, включая их значения в строковый литерал",
								"Создание нового String-значения из разных констант, переменных, литералов и выражений, включая их значения в строковый литерал",
								"Включение разных значений в String, используя обратный слеш и круглые скобки, называется?"],
					 image: "",
					 optionA: "Интерполяция",
					 optionB: "Конкатенация",
					 optionC: "Объединение строк",
					 optionD: "Вкрапление значений",
					 questionId: 34,
					 helpText: "Интерполяция строк - способ создать новое значение типа String из разных констант, переменных, литералов и выражений, включая их значения в строковый литерал. Каждый элемент, который вы вставляете в строковый литерал, должен быть помещен в скобки и находиться внутри двойных кавычек литерала, а перед открывающей скобкой должен стоять знак обратного слэша."),

			Question(question: ["Каким образом можно добавить значение типа Character к переменной типа String?",
								"Как мы можем добавить один Character к переменной типа String?",
								"Используя какой метод мы можем добавить Character к переменной String?"],
					 image: "",
					 optionA: "Используя String append",
					 optionB: "Конкатенация",
					 optionC: "Приведение типов",
					 optionD: "Через оператор сложения",
					 questionId: 35,
					 helpText: "Вы можете добавить значение типа Character к переменной типа String, используя метод String append. Вы не можете добавить String или Character к уже существующей переменной типа Character, потому что значение типа Character должно состоять только из одиночного символа."),

			Question(question: ["Можно ли сравнивать две строки?",
								"Возможно ли сравнение двух значений типа String?",
								"Можем ли мы сравнить два значения String?"],
					 image: "",
					 optionA: "Да",
					 optionB: "Только ==",
					 optionC: "Только !=",
					 optionD: "Нет",
					 questionId: 36,
					 helpText: "Swift предусматривает три способа сравнения текстовых значений: равенство строк и символов, равенство префиксов, и равенство суффиксов. Равенство строк и символов проверяется оператором равенства (==) и оператором неравенства (!=). Два String значения (или два Character значения) считаются равными, если их расширенные наборы графем канонически эквивалентны. Расширенные наборы графем канонически эквивалентны, если они имеют один и тот же языковой смысл и внешний вид, даже если они изначально состоят из разных скалярных величин Юникода."),

			Question(question: ["Что вернется, при сравнении двух String?",
								"Какой тип вернется в результате сравнения двух String значений?",
								"Что мы получим после сравнения двух Character?"],
					 image: "",
					 optionA: "Bool",
					 optionB: "String",
					 optionC: "Character",
					 optionD: "1 или 0",
					 questionId: 37,
					 helpText: "При сравнении String или Character возвращается Bool-значение (true или false)."),

			Question(question: ["Какой тип будет присвоен переменной с изображения?",
								"Какой тип будет присвоен при подобной неявной типизации?"],
					 image: "TheBasics36",
					 optionA: "Double",
					 optionB: "Float",
					 optionC: "Decimal",
					 optionD: "",
					 questionId: 38,
					 helpText: "При неявной типизации, числу с плавающей точкой присваивается тип Double, так как он является предпочтительным выбором."),

			Question(question: ["Что мы получим, при попытке запустить этот код?"],
					 image: "TheBasics37",
					 optionA: "Столкнемся с ошибкой",
					 optionB: "Ничего не произойдет",
					 optionC: "Переменной присваивается число",
					 optionD: "Переменная обнуляется",
					 questionId: 39,
					 helpText: "Swift является типобезопасным языком со строгой типизацией, поэтому после того, как мы присвоили переменной тип, мы не можем его изменить. Так, в этом случае мы столкнемся с ошибкой. Ошибка возникает, так как переменная name ожидает строковый литерал, а число с плавающей точкой не является строкой и не соответствует переменной name по типу."),

			Question(question: ["Набор символов, зарезервированный языком программирования?",
								"Зарезервированные языком программирования наборы символов, которые не могут быть использованы в качестве идентификаторов"],
					 image: "",
					 optionA: "Ключевое слово",
					 optionB: "Функция",
					 optionC: "Замыкание",
					 optionD: "Идентификатор",
					 questionId: 40,
					 helpText: "Ключевые слова зарезервированы и не могут быть использованы в качестве идентификаторов, если не помещены в одиночные кавычки. Ключевые слова, кроме inout, var,  и let, могут быть использованы в качестве внешних имен параметров в объявлении функции или в вызове функции без необходимости помещать их в одиночные кавычки."),

			Question(question: ["Что мы получим, при сравнении переменных name и char?"],
					 image: "TheBasics39",
					 optionA: "true",
					 optionB: "false",
					 optionC: "Ошибку",
					 optionD: "",
					 questionId: 41,
					 helpText: "Хотя мы и присваиваем переменной char всего один отдельный символ, без явного указания типа данных Swift автоматически присвоит тип String, поэтому две этих переменных могут сравниваться, и результатом сравнения будет true (потому что в данном случае значения у переменных равны)"),

			Question(question: ["Что мы получим, при сравнении переменных name и name2?"],
					 image: "TheBasics40",
					 optionA: "Ошибку сравнения",
					 optionB: "false",
					 optionC: "true",
					 optionD: "",
					 questionId: 42,
					 helpText: "Перед нами две переменных с разными значениями, и если поторопиться, то можно ответить, что результатом сравнения будет false, так как их значения не равны. Но в данном случае, у переменных разные типы данных, и подобное сравнение вызовет ошибку Binary operator '==' cannot be applied to operands of type 'String' and 'Character'"),

			Question(question: ["Являются ли все базовые типы (Int, String, Double, Bool) в Swift хешируемыми?",
								"Все базовые типы (Int, String, Double, Bool) в Swift являются хешируемыми, так ли это?",],
					 image: "",
					 optionA: "Да",
					 optionB: "Нет",
					 optionC: "Все, кроме Bool",
					 optionD: "Все, кроме String",
					 questionId: 43,
					 helpText: "Все базовые типы Swift (Int, String, Double, Bool) являются хешируемыми типами по умолчанию и могут быть использованы в качестве типов значений множества или в качестве типов ключей словаря. Значения членов перечисления без каких-либо связанных значений так жетакже являются хешируемыми по умолчанию."),

			Question(question: ["Что позволяет создавать и передавать группы значений, и возвращать несколько значений из функции?",
								"С помощью этого можно вернуть несколько значений из функции как одно целое значение",
								"С помощью чего мы можем создавать и передавать группы значений в Swift?"],
					 image: "",
					 optionA: "Кортеж",
					 optionB: "Опционал",
					 optionC: "Множество",
					 optionD: "Переменная",
					 questionId: 44,
					 helpText: "В дополнение к знакомым типам, Swift включает расширенные типы, которых нет в Objective-C. К ним относятся кортежи, которые позволяют создавать и передавать группы значений. Кортежи могут возвращать несколько значений из функции как одно целое значение."),

			Question(question: ["Тип, позволяющий работать с отсутствующими значениями",
								"Какой тип позволяет работать с отсутствующими значениями?",
								"С отсутствующими значениями можно работать с помощью этого типа"],
					 image: "",
					 optionA: "Опциональный тип",
					 optionB: "Тип кортежа",
					 optionC: "Тип коллекции",
					 optionD: "",
					 questionId: 45,
					 helpText: "Swift также включает опциональные типы, которые позволяют работать с отсутствующими значениями. Опциональные значения говорят либо «здесь есть значение, и оно равно х», либо «здесь нет значения вообще». Опциональные типы подобны использованию nil с указателями в Objective-C, но они работают со всеми типами, не только с классами. Опциональные значения безопаснее и выразительнее чем nil указатели в Objective-C, и находятся в сердце многих наиболее мощных особенностей Swift."),

			Question(question: ["Можем ли мы передать опциональный String куску кода, который ожидает неопциональный String?",
								"Можете ли вы передать опциональный тип Double куску кода, который ждет неопциональный тип Double?"],
					 image: "",
					 optionA: "Нет",
					 optionB: "Да",
					 optionC: "",
					 optionD: "",
					 questionId: 46,
					 helpText: "Swift - язык типобезопасный, что означает, что Swift помогает вам понять, с какими типами значений ваш код может работать. Если кусок вашего кода ожидает String, безопасность типов не даст вам передать ему Int по ошибке. Кроме того, безопасность типов не позволит вам случайно передать опциональный String куску кода, который ожидает неопциональный String. Безопасность типов позволяет вам улавливать и исправлять ошибки как можно раньше в процессе разработки."),

			Question(question: ["Выберите соответствующий вариант: Объявляем константу с именем numbers, тип которой будет Double со значением 1.0.",
								"Как мы запишем следующее: Объявляем константу с именем numbers, тип которой будет Double со значением 1.0."],
					 image: "",
					 optionA: "let numbers: Double = 1.0",
					 optionB: "var numbers: Double = 1.0",
					 optionC: "let numbers = Double(1.0)",
					 optionD: "let numbers = Double : 1.0",
					 questionId: 47,
					 helpText: "Правильный ответ будет: let numbers: Double = 1.0."),

			Question(question: ["Можем ли мы использовать значение с типом Int? как операнд в математической операции?",
								"Можете ли вы использовать Double? как операнд в математической операции?"],
					 image: "",
					 optionA: "Нет",
					 optionB: "Да",
					 optionC: "",
					 optionD: "",
					 questionId: 71,
					 helpText: "Запомните, опциональный тип данных - это совершенно новый тип данных, поэтому, несмотря на то, что опционалы могут принимать значения основных типов данных, остальные свойства этих типов к опционалам не относятся. Например вы не можете использовать типы Int? или Double? при выполнении математических операций."),

			Question(question: ["Что не могут содержать имена констант и переменных?",
								"Это нельзя использовать при написании имен констант и переменных",
								"Выберите, что не могут содержать имена переменных и констант?"],
					 image: "",
					 optionA: "Пробелы и стрелки",
					 optionB: "Латинские буквы",
					 optionC: "Нижнее подчеркивание",
					 optionD: "Unicode-символы",
					 questionId: 48,
					 helpText: "Имена констант и переменных не могут содержать пробелы, математические символы, стрелки, приватные (или невалидные) кодовые точки Unicode, а так жетакже символы отрисовки линий или прямоугольников. Так жеТакже имена не могут начинаться с цифр, хотя цифры могут быть включены в имя в любом другом месте. "),

			Question(question: ["Можем ли мы после объявления константы, дальше по коду изменить ее на переменную?",
								"После объявление переменной, дальше по коду, можем ли мы поменять ее на константу?",
								"Можем ли мы менять константы на переменные, а переменные - на константы?"],
					 image: "",
					 optionA: "Нет",
					 optionB: "Да",
					 optionC: "",
					 optionD: "",
					 questionId: 49,
					 helpText: "Если вы объявили константу или переменную определенного типа, то вы не можете объявить ее заново с тем же именем или заставить хранить внутри себя значение другого типа. Также вы не можете изменить константу на переменную, а переменную - на константу."),

			Question(question: ["Какая глобальная функция может вывести одно или более значений в консоль?",
								"Глобальная функция, которая используется для выведения значений в консоль",
								"Функция, являющаяся глобальной, и позволяющая выводить одно или более значений в консоль?"],
					 image: "",
					 optionA: "print(_:separator:terminator:)",
					 optionB: "show()",
					 optionC: "alert()",
					 optionD: "Console.WriteLine",
					 questionId: 50,
					 helpText: "Функция print(_:separator:terminator:) является глобальной, которая выводит одно или более значений в подходящем виде. В Xcode, например, функция print(_:separator:terminator:) выводит значения в консоль. Параметры separator и terminator имеют дефолтные значения, так что при использовании функции их можно просто пропустить. По умолчанию функция заканчивает вывод символом переноса строки. Чтобы вывести в консоль значения без переноса на новую строку, вам нужно указать пустую строку в параметре terminator."),

			Question(question: ["Как называется игнорируемый компилятором, неисполняемый текст в коде?",
								"Как называется неисполняемый текст в коде?",
								"Что нужно добавить, чтобы у вас появился неисполняемый участок кода?"],
					 image: "",
					 optionA: "Комментарий",
					 optionB: "Исключение",
					 optionC: "Примечание",
					 optionD: "",
					 questionId: 51,
					 helpText: "Используйте комментарии, чтобы добавить неисполняемый текст в коде,  как примечание или напоминание самому себе. Комментарии игнорируются компилятором Swift во время компиляции кода. Комментарии в Swift очень похожи на комментарии в C. Однострочные комментарии начинаются с двух слешей (//), многострочные комментарии начинаются со слеша и звездочки (/*) и заканчиваются звездочкой, за которой следует слеш (*/). Внутри многострочного комментария вы можете поместить любой участок кода, который хотите сделать неисполняемым."),

			Question(question: ["Один случай, когда в Swift необходимо ставить точку с запятой (;) в коде?",
								"В каком случае вам необходимо будет поставить точку с запятой (;) в коде?",
								"В этом случае вам нужно ставить точку с запятой в коде"],
					 image: "",
					 optionA: "Несколько выражений на строке",
					 optionB: "Объявление двух переменных",
					 optionC: "После каждого выражения",
					 optionD: "",
					 questionId: 52,
					 helpText: "В отличие от многих других языков, Swift не требует писать точку с запятой (;) после каждого выражения в коде, хотя вы можете делать это, если хотите. Однако точки с запятой требуются, если вы хотите написать несколько отдельных выражений на одной строке. Пример: let name = SomeValue; print(name)."),

			Question(question: ["Какой тип будет у константы number?",
								"Выберите правильный тип, который Swift присвоит константе number?",
								"У константы number будет именно такой тип"],
					 image: "TheBasics51",
					 optionA: "Double",
					 optionB: "Float",
					 optionC: "Int",
					 optionD: "Character",
					 questionId: 53,
					 helpText: "Если объединить целые литералы и литералы с плавающей точкой в одном выражении, в этом случае тип будет выводиться как Double. Swift всегда выбирает Double (вместо Float), когда выводит тип чисел с плавающей точкой. Литеральное значение 1 не имеет явного типа само по себе, так что соответствующий тип Double выводится из наличия литерала с плавающей точкой как части сложения."),

			Question(question: ["Как изменить имя существующего типа на более подходящее по контексту?",
								"Как вы можете изменить имя существующего типа на подходящее по контексту?",
								"Как можно задать альтернативное имя для существующего типа?"],
					 image: "",
					 optionA: "Создать typealias",
					 optionB: "Создать копию типа",
					 optionC: "Создать контекстное имя",
					 optionD: "Это невозможно",
					 questionId: 54,
					 helpText: "Псевдонимы типов задают альтернативное имя для существующего типа. Можно задать псевдоним типа с помощью ключевого слова typealias. Псевдонимы типов полезны, когда вы хотите обратиться к существующему типу по имени, которое больше подходит по контексту. После того как вы один раз задали псевдоним типа, вы можете использовать псевдоним везде, где вы хотели бы его использовать. "),

			Question(question: ["Какие две логические константы предусматривает Swift для типа Bool?",
								"В Swift есть две логические постоянные для типа Bool, какие?",
								"Какие два логических значения мы можем присваивать переменным типа Bool?"],
					 image: "",
					 optionA: "true и false",
					 optionB: "true и not true",
					 optionC: "1 и 0",
					 optionD: "truth и false",
					 questionId: 55,
					 helpText: "В Swift есть простой логический тип Bool. Этот тип называют логическим, потому что он может быть только true или false. Swift предусматривает две логические константы, true и false соответственно. Так же как с Int и Double в предыдущих главах, вам не нужно указывать константы или переменные как Bool, если при создании вы присвоили им значения true или false. Вывод типов помогает сделать код Swift кратким и читабельным тогда, когда вы создаете константы или переменные со значениями которые точно известны."),

			Question(question: ["Как корректно обратиться в первому элементу кортежа?",
								"Каким образом мы можем обратиться к первому элементу кортежа?",
								"Мы можем обратиться к первому элементу кортежа через числовой индекс, как именно?"],
					 image: "",
					 optionA: "someTuples.0",
					 optionB: "someTuples.1",
					 optionC: "someTuples[0]",
					 optionD: "someTuples(1)",
					 questionId: 56,
					 helpText: "Вы можете разложить содержимое кортежа на отдельные константы и переменные, к которым можно получить доступ привычным способом. Если вам нужны только некоторые из значений кортежа, вы можете игнорировать части кортежа во время разложения с помощью символа подчеркивания (_). В качестве альтернативы можно получать доступ к отдельным частям кортежа, используя числовые индексы, начинающиеся с нуля."),

			Question(question: ["Когда мы можем дать имена отдельным элементам кортежа?",
								"В какой момент мы можем дать имена отдельным элементам кортежа?"],
					 image: "",
					 optionA: "Во время объявления",
					 optionB: "После инициализации",
					 optionC: "После первого использования",
					 optionD: "В момент обращения к элементу",
					 questionId: 57,
					 helpText: "Вы можете давать имена отдельным элементам кортежа во время объявления. Например: let gameRecord = (questionNumber: 50, score: 49)."),

			Question(question: ["Особый объект, который группирует значения различных типов в пределах одного составного значения",
								"Объект, предлагающий наиболее простой способ объединения значений различных типов в пределах одного значения",
								"У каждого отдельного значения в составе этого объекта может быть собственный тип данных, который никак не зависит от других"],
					 image: "",
					 optionA: "Кортеж",
					 optionB: "Массив",
					 optionC: "Коллекция",
					 optionD: "",
					 questionId: 68,
					 helpText: "Кортеж - это особый объект, который группирует значения различных типов в пределах одного составного значения. Более того, кортеж предлагает наиболее простой способ объединения значений различных типов в пределах одного значения. У каждого отдельного значения в составе кортежа может быть собственный тип данных, который никак не зависит от других."),

			Question(question: ["Какой тип используется, когда значение может отсутствовать?",
								"Если значение можно отсутствовать, какой тип мы будем использовать?",
								"Этот тип используется, если значение может отсутствовать"],
					 image: "",
					 optionA: "Опциональный",
					 optionB: "Логический Bool",
					 optionC: "Кортеж",
					 optionD: "Неявный тип",
					 questionId: 58,
					 helpText: "Опциональные типы используются в тех случаях, когда значение может отсутствовать. Опциональный тип подразумевает, что возможны два варианта: или значение есть, и его можно извлечь из опционала, либо его вообще нет."),

			Question(question: ["Какой тип Swift присвоит константе convertedNum?",
								"Константе convertedNum присвоится именно этот тип",
								"Swift присвоит этот тип константе convertedNum"],
					 image: "TheBasics57",
					 optionA: "Int?",
					 optionB: "Int",
					 optionC: "String",
					 optionD: "Столкнемся с ошибкой",
					 questionId: 59,
					 helpText: "Поскольку метод Int() может иметь недопустимый аргумент, он возвращает опциональный Int, вместо Int. Опциональный Int записывается как Int?, а не Int. Знак вопроса означает, что содержащееся в ней значение является опциональным, что означает, что он может содержать некое Int значение, или он может вообще не содержать никакого значения. (Он не может содержать ничего другого, например, Bool значение или значение String. Он либо Int, либо вообще ничто)."),

			Question(question: ["Каким образом мы можем установить опциональную переменную в состояние отсутствия значения?",
								"Каким путем вы можете присвоить опциональной переменной отсутствующее значение?",
								"Отсутствующее значение для опциональной переменной можно установить именно так"],
					 image: "",
					 optionA: "Присвоить nil",
					 optionB: "Присвоить 0",
					 optionC: "Присвоить литерал пустого массива",
					 optionD: ".removeValue",
					 questionId: 60,
					 helpText: "Мы можем установить опциональную переменную в состояние отсутствия значения, путем присвоения ему специального значения nil. nil не может быть использован с не опциональными константами и переменными. Если значение константы или переменной при определенных условиях в коде должно когда-нибудь отсутствовать, всегда объявляйте их как опциональное значение соответствующего типа."),

			Question(question: ["Каким образом мы можем проверить, содержит ли опционал значение?",
								"Как мы можем узнать, содержит опционал значение или нет?",
								"Таким образом вы можете узнать, содержит опционал значение или нет"],
					 image: "",
					 optionA: "Сравнивая с nil через if",
					 optionB: "Через оператор ===",
					 optionC: "Внутри цикла for-in",
					 optionD: "Через forced unwrap",
					 questionId: 61,
					 helpText: "Вы можете использовать инструкцию if, сравнивая опционал с nil, чтобы проверить, содержит ли опционал значение. Это сравнение можно сделать с помощью оператора «равенства» (==) или оператора «неравенства» (!=). Если опционал имеет значение, он будет рассматриваться как «неравным» nil."),

			Question(question: ["Если мы точно уверены, что опционал имеет значение, каким наиболее быстрым образом мы можем его получить?",
								"Каким самым быстрым образом мы можем получить значение опционала, если уверены, что оно присутствует?",
								"Как быстро получить значение опционала, если значение точно есть?"],
					 image: "",
					 optionA: "Принудительное извлечение (!)",
					 optionB: "Внутри цикла while",
					 optionC: "Привязка опционалов",
					 optionD: "Оператор ??",
					 questionId: 62,
					 helpText: "Если вы уверены, что опционал содержит значение, вы можете получить доступ к его значению, добавив восклицательный знак (!) в конце имени опционала. Восклицательный знак фактически говорит: «Я знаю точно, что этот опционал содержит значение, пожалуйста, используй его». Это выражение известно как Принудительное извлечение значения опционала."),

			Question(question: ["Объекты, доступные в любой точке программы?"],
					 image: "",
					 optionA: "Глобальные объекты",
					 optionB: "Локальные объекты",
					 optionC: "",
					 optionD: "",
					 questionId: 65,
					 helpText: "Каждый созданный объект может использоваться только по определенным правилам, одно из которых называется областью видимости. Область видимости определяет, где именно в коде можно использовать тот или иной объект. По принадлежности к области видимости объекты делятся на локальные и глобальные."),

			Question(question: ["Как называется возможность сослаться на свойство динамически, а не напрямую?"],
					 image: "TheBasics67",
					 optionA: "KeyPath",
					 optionB: "NamePath",
					 optionC: "PropertyURL",
					 optionD: "",
					 questionId: 67,
					 helpText: "Одной из полезных особенностей Objective-C была возможность сослаться на свойство динамически, а не напрямую. Другими словами, вы могли указать объект и его свойство, которое необходимо использовать, но при этом не производить чтение или запись данного свойства сейчас, а сделать это позже. После создания структуры и константы, использующей эту структуру, вы можете использовать символ обратного слеша перед указанием параметра для создания динамический ссылки. В константу name записывается ссылка на значение свойства name из Starship."),

			Question(question: ["Какой тип будет у данного кортежа?",
								"У этого кортежа будет такой тип данных",
								"Какой тип данных будет присвоен этому кортежу?"],
					 image: "TheBasics69",
					 optionA: "(String, Double, Bool)",
					 optionB: "Tuple.type",
					 optionC: "(String, Float, Bool)",
					 optionD: "(Character, Double, True)",
					 questionId: 69,
					 helpText: "У вас мог возникнуть вопрос: если кортеж группирует значения различных типов данных в одно, то какой же тогда тип данных у самого кортежа? Правильный ответ: (String, Double, Bool). Тип данных кортежа - это фиксированный упорядоченный набор типов данных, входящих в него значений, который записывается в скобках и элементы которого отделяются запятыми друг от друга. Для кортежа из нашего примера это (String, Double, Bool) и у нас он задается неявно. Порядок указания типов данных должен соответствовать порядку следования элементов в кортеже."),

			Question(question: ["Можем ли мы задать имя для каждого элемента кортежа?",
								"Мы не можем задать имена для части элементов кортежа, мы обязаны либо не использовать их вовсе, либо задать их для каждого элемента. Так ли это?",
								"Присвоение элементам кортежа имен не лишает нас возможности использовать их индексы. Так ли это?"],
					 image: "",
					 optionA: "Да",
					 optionB: "Нет",
					 optionC: "",
					 optionD: "",
					 questionId: 70,
					 helpText: "Для каждого элемента кортежа можно задать не только значение, но и имя. Имя элемента указывается отдельно перед каждым элементом через двоеточие. При этом задать имена для отдельных элементов невозможно: вы должны либо указать имена для всех элементов, либо не использовать их вовсе. Указанные имена кортежа можно использовать при получении значений этих элементов. При этом применяется тот же синтаксис, что и при доступе через индексы. Присвоение имен значениям не лишает вас возможности использовать индексы. Индексы в кортеже можно задействовать всегда. Доступ к элементам с использованием имен удобнее и нагляднее, чем доступ через индексы."),

			Question(question: ["Как называется принудительное извлечение опционального значения?",
								"Извлечение опционального значения с помощью оператора (!)"],
					 image: "",
					 optionA: "Force unwrap",
					 optionB: "Unwrapping",
					 optionC: "Optional Chaining",
					 optionD: "",
					 questionId: 72,
					 helpText: "Swift предлагает механизм извлечения опционального значения, который называется принудительным извлечением. При этом с помощью специального оператора значение опционального типа данных преобразуется в значение основного (для этого опционала) типа данных, например Int? преобразуется в Int. Для принудительного извлечения используется знак восклицания в качестве постфикса названия параметра, содержащего значение опционального типа. При принудительном извлечении значения вы должны гарантировать, что параметр с опциональным типом данных содержит какое-либо значение, а не равен nil. В противном случае будет иметь место попытка преобразовать в основной тип данных несуществующее значение, после компиляции такого кода мы столкнемся с ошибкой.")
		]
	}


	///


	static func getDemoQuestions() -> [Question] {
		return [
			Question(question: ["According to Swift's best practices, which letter case should the variable names start with?",
								"It is recommended to use this case for the first letter of constant and variable names",
								"Which case should be used for the first letter of constant and variable names in Swift?"],
					 image: "",
					 optionA: "Lower case",
					 optionB: "Upper case",
					 optionC: "It doesn’t matter",
					 optionD: "",
					 questionId: 1,
					 helpText: "The convention is to use Lower Camel Case while naming properties and methods. Their names should start with a lowercase letter. And if a name consists of several words, only the first word should be lowercased. At the same time, type names should start with an uppercase letter (Upper Camel Case)."),

			Question(question: ["What word can be defined as the introduction of a new object that you are going to use?",
								"The process of creating a new object that you are going to use is called ..."],
					 image: "",
					 optionA: "Declaration",
					 optionB: "Modification",
					 optionC: "Initialization",
					 optionD: "",
					 questionId: 2,
					 helpText: "A declaration introduces a new object into the program. Initialization assigns a specific value to the declared object."),

			Question(question: ["A variable name must be ...",
								"All constant and variable names must be ...",
								"It is required to give each variable and constant a ... name"],
					 image: "",
					 optionA: "Unique",
					 optionB: "Universal",
					 optionC: "Simple",
					 optionD: "",
					 questionId: 3,
					 helpText: "All variables and constants must have unique names. You can't use several variables or constants with the same name within the same program. And it's a good practice to name them using so-called lowerCamelCase. It means that names should begin with a lowercase letter. If the name consists of several words, only the first word should start with a lowercase letter."),

			Question(question: ["Is it necessary to use var or let keywords every time you call an existing variable or constant?",
								"It is true that every time you want to access a variable or a constant, you must use var or let operators?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "Only with let",
					 optionD: "",
					 questionId: 63,
					 helpText: "Var and let operators are required only while declaring variables and constants. To call them afterwards, you need to use only their names."),

			Question(question: ["Is it possible to create a variable that has the same name as another variable?",
								"Can we give the same name to two different constants?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 64,
					 helpText: "Names must be unique. It's impossible to declare a constant or a variable that has the same name as another constant or variable. The only exception is when these variables and constants are in different scopes. For example: you can name a local variable (inside a function) the same as you called a global variable."),

			Question(question: ["What is a separate Swift command usually called?",
								"This word can be defined as a separate Swift command"],
					 image: "",
					 optionA: "Statement",
					 optionB: "Variable",
					 optionC: "Constant",
					 optionD: "Sentence",
					 questionId: 4,
					 helpText: "A separate command in Swift is called a statement. Just like any other programming language, Swift performs all actions by following the commands given (written) by the developer. A file with code usually consists of multiple statements written on separate lines."),

			Question(question: ["Is it possible to declare multiple constants on a single line?",
								"Can you declare two variables on a single line?",
								"Is it possible to declare two or more variables or constants on a single line?"],
					 image: "",
					 optionA: "Yes, separated by commas",
					 optionB: "Yes, separated by a backslash",
					 optionC: "No, each of them requires a new line",
					 optionD: "Yes, separated by a colon",
					 questionId: 5,
					 helpText: "You can declare multiple constants or multiple variables on a single line, separated by commas."),

			Question(question: ["Can we change the value of a variable?",
								"Is the value of a variable mutable?",
								"Is it possible to change the value assigned to a variable?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "Yes, but only inside a loop",
					 optionD: "",
					 questionId: 6,
					 helpText: "The distinctive feature of variables is that we can change their values many times during the program execution."),

			Question(question: ["A named block of memory whose value can't be changed once it is set",
								"The value of this type of memory block can be set only once with no option of changing it" ],
					 image: "",
					 optionA: "Constant",
					 optionB: "Invariable",
					 optionC: "Lambda",
					 optionD: "",
					 questionId: 7,
					 helpText: "Constants are pretty similar to variables since they also store some value, but they are declared with the let keyword, and you can't change their value once they are initialized. So, if the value of a variable remains the same throughout the program, you should consider using a constant instead."),

			Question(question: ["The keyword that is used to determine a constant",
								"Which keyword is used to introduce a constant?",
								"This keyword can be used to define a constant"],
					 image: "",
					 optionA: "let",
					 optionB: "set",
					 optionC: "var",
					 optionD: "",
					 questionId: 8,
					 helpText: "Constants are pretty similar to variables since they also store some value, but they are declared with the let keyword, and you can't change their value once they are initialized. So, if the value of a variable remains the same throughout the program, you should consider using a constant instead."),

			Question(question: ["In what case the data stored in a constant can be overwritten?",
								"The data stored in a constant can't be overwritten except while..."],
					 image: "",
					 optionA: "Inside a loop",
					 optionB: "Inside ViewDidLoad()",
					 optionC: "Inside a function",
					 optionD: "",
					 questionId: 9,
					 helpText: "A constant used in a loop will be overwritten with each iteration."),

			Question(question: ["Which keyword is used for defining a variable?",
								"The keyword that must be used while declaring a variable",
								"The keyword we use to define a variable"],
					 image: "",
					 optionA: "var",
					 optionB: "let",
					 optionC: "func",
					 optionD: "set",
					 questionId: 10,
					 helpText: "In Swift, you define variables using the var keyword. The distinctive feature of variables is that their value can be changed many times during the program execution."),

			Question(question: ["How multi-line documentation comments are created?"],
					 image: "",
					 optionA: "/** Comment */",
					 optionB: "// Comment",
					 optionC: "/// Comment",
					 optionD: "// MARK: Comment",
					 questionId: 66,
					 helpText: "In addition to the standard comments used in any other programming language, Swift allows adding comments right into the program's documentation. You may need such comments while developing a function library. Here is how documentation comments are created: /** Comment */. After adding the documentation comment to a function, you can click the function's name with the Opt (Alt) key pressed to see the comment."),

			Question(question: ["A named unit of data that stores an associated value",
								"What do you call a named storage location which contains a value?",
								"A memory storage location that contains a value and can be accessed by a name or another identifier"],
					 image: "",
					 optionA: "Variable or Constant",
					 optionB: "Structure",
					 optionC: "String",
					 optionD: "Library",
					 questionId: 11,
					 helpText: "Just like most other programming languages, Swift relies on variables and constants to store data. A variable or a constant is a named unit of storage location that is assigned a value."),

			Question(question: ["A data type that stores individual Unicode symbols",
								"Which type of data stores individual letters and other symbols?",
								"Individual Unicode symbols are stored in this data type"],
					 image: "",
					 optionA: "Character",
					 optionB: "Float",
					 optionC: "Bool",
					 optionD: "String",
					 questionId: 12,
					 helpText: "Swift’s String and Character types provide a fast, Unicode-compliant way to work with text. Each String is composed of independent Character values, while each Character represents an individual Unicode symbol."),

			Question(question: ["A data type responsible for storing any text value",
								"Which data type represents arbitrary text values",
								"An arbitrary text literal can be stored in this data type"],
					 image: "",
					 optionA: "String",
					 optionB: "Bool",
					 optionC: "Character",
					 optionD: "",
					 questionId: 13,
					 helpText: "Swift’s String and Character types provide a fast, Unicode-compliant way to work with text. Each String is composed of independent Character values, while each Character represents an individual Unicode symbol."),

			Question(question: ["What should we use if we are sure that the value of a variable won't change?",
								"What can we use instead of a variable if its value won't change??"],
					 image: "",
					 optionA: "A constant",
					 optionB: "A variable",
					 optionC: "A literal",
					 optionD: "A Structure",
					 questionId: 14,
					 helpText: "Besides variables, constants provide an additional way to store data in a program. They are pretty similar to variables since they also store some value, but constants are declared with the let keyword, and you can't change their value once they are initialized. So, if the value of a variable remains the same throughout the program, you should consider using a constant instead."),

			Question(question: ["A data type that stores whole numbers with no fractions or decimals. For instance, 42 or -23",
								"Which data type stores whole signed numbers?",
								"This type represents any whole number with no fractions"],
					 image: "",
					 optionA: "Int",
					 optionB: "UInt",
					 optionC: "Float",
					 optionD: "Double",
					 questionId: 15,
					 helpText: "An Int is a whole signed number, for example, 1, -30, 458. On a 32-bit platform, Int is the same size as Int32, while on a 64-bit platform, Int is the same size as Int64."),

			Question(question: ["All types in Swift start with a(n) ... letter",
								"Which letter case should you use for the first letter of any type in Swift?",
								"The names of all Swift's types start with this letter case"],
					 image: "",
					 optionA: "Uppercase",
					 optionB: "It doesn’t matter",
					 optionC: "Lowercase",
					 optionD: "",
					 questionId: 16,
					 helpText: "Type names in Swift are always capitalized, so they start with an uppercase letter."),

			Question(question: ["How can you access the minimum and maximum values of each integer type?",
								"How can you get the minimum and maximum values of Int or UInt?",
								"You can use these properties to access the minimum and maximum values of Int or UInt"],
					 image: "",
					 optionA: "min и max",
					 optionB: "first и last",
					 optionC: "count",
					 optionD: "first и max",
					 questionId: 17,
					 helpText: "You can access the minimum and maximum values of each integer type with its min and max properties"),

			Question(question: ["Which of the following types has a higher precision?",
								"Which type that stores numbers with a decimal point has a higher precision?",
								"Pick the type that stores the largest number of decimal digits"],
					 image: "",
					 optionA: "Double",
					 optionB: "Float",
					 optionC: "UInt",
					 optionD: "",
					 questionId: 18,
					 helpText: "Double represents a 64-bit floating-point number - in most cases, it is preferable to a Float because it has higher precision and is less likely to lose valuable accuracy. It has a precision of 15 decimal digits, whereas Float's precision can be as little as 6 decimal digits."),

			Question(question: ["Which type stores only the integers that are either positive or equal to zero?",
								"The type that stores only unsigned integers",
								"Pick the type that can store nonnegative integers only"],
					 image: "",
					 optionA: "UInt",
					 optionB: "Float",
					 optionC: "Int",
					 optionD: "Double",
					 questionId: 19,
					 helpText: "Swift provides an unsigned integer type, UInt (Unsigned Integer), which has the same size as the current platform’s native word size. Use it only when you specifically need an unsigned integer type with the same size as the platform’s native word size. Otherwise, Int is preferred, even when the values to be stored are known to be nonnegative. A consistent use of Int for integer values aids code interoperability, avoids the need to convert between different number types, and matches integer type inference."),

			Question(question: ["A sequence of characters surrounded by double quotation marks",
								"A series of Unicode characters enclosed in quotes",
								"Choose a literal that consists of a sequence of characters surrounded by double quotes"],
					 image: "",
					 optionA: "A string literal",
					 optionB: "An integer literal",
					 optionC: "An empty array literal",
					 optionD: "",
					 questionId: 20,
					 helpText: "A string literal is a sequence of characters surrounded by double quotation marks."),


			Question(question: ["The source code representation of a numeric value",
								"A positive or negative number expressed in the source code",
								"What do we call the following values in Swift: -2234, 10, 0?"],
					 image: "",
					 optionA: "Integer literal",
					 optionB: "Operator",
					 optionC: "String literal",
					 optionD: "Random number",
					 questionId: 21,
					 helpText: "Integer literals represent integer values of unspecified precision. An integer literal can be a positive or negative number, or zero."),

			Question(question: ["What approach(es) can you take to provide a constant or variable with a type?",
								"Choose the way(s) types can be declared in Swift",
								"How Swift can work out an object’s type?"],
					 image: "",
					 optionA: "Explicitly or Implicitly",
					 optionB: "Only implicitly",
					 optionC: "Distinctly or Vaguely",
					 optionD: "",
					 questionId: 22,
					 helpText: "Explicitly, via type annotation by placing a colon after the constant or variable name, followed by a space, followed by the name of the type to use. Implicitly, via type inference that enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide."),

			Question(question: ["Is it possible to use a variable of non-optional type before it is initialized?",
								"Can we use a non-optional variable before initializing it?",
								"Is it possible to use a variable before initialization if it is not represented by an optional?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 23,
					 helpText: "All variables and constants must be initialized before used (unless they are optional types)."),

			Question(question: ["Which data type can store any integer within the following boundaries: -2 147 483 648 ... 2 147 483 647?",
								"The type that can store any integer from -2 147 483 648 to 2 147 483 647",
								"Pick the type whose maximum and minimum values can't exceed -2 147 483 648 and 2 147 483 647"],
					 image: "",
					 optionA: "Int32",
					 optionB: "Decimal",
					 optionC: "Uint32",
					 optionD: "Int64",
					 questionId: 24,
					 helpText: "Values from -2 147 483 648 to 2 147 483 647 can be stored in Int32."),

			Question(question: ["If you don't specify an integer’s size in code, what will it be?",
								"If you don't specify an integer's size within its type declaration, what size will that integer have?",
								"What size will all integers have unless it is explicitly specified in code?"],
					 image: "",
					 optionA: "Platform’s native word size",
					 optionB: "32",
					 optionC: "64",
					 optionD: "128",
					 questionId: 25,
					 helpText: "Unless it is explicitly specified, integers always have the same size as the current platform’s native word size"),

			Question(question: ["What do we call the process of preparing a constant, variable, or any other object for use?",
								"What is the process of declaring a variable along with assigning its value called?",
								"Assigning a value to a previously declared object for the first time is called..."],
					 image: "",
					 optionA: "Initialization",
					 optionB: "Inheritance",
					 optionC: "Declaration",
					 optionD: "",
					 questionId: 26,
					 helpText: "Initialization is the process of preparing a constant, variable or any other object for use. This process involves setting an initial value for each stored property and performing any other setup required before the new object is ready for use."),

			Question(question: ["Какую точность в десятичных знаках имеет тип Double?",
								"Сколько десятичных цифр может хранить тип Double?",
								"Double может хранить именно столько цифр после запятой"],
					 image: "",
					 optionA: "15 десятичных цифр",
					 optionB: "6 десятичных цифр",
					 optionC: "12 десятичных цифр",
					 optionD: "18 десятичных цифр",
					 questionId: 27,
					 helpText: "Double является 64 битным числом с плавающей точкой. Он имеет точность в 15 десятичных знаков.")

		]
	}
}



