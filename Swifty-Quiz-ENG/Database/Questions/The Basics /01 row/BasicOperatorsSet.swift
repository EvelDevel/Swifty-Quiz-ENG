
//  Created by Евгений Никитин on 15.04.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

// MARK:  02 - Вопросы (id) с 101 по 200

class BasicOperatorsSet {
	static func getQuestions() -> [Question] {
		return [
			Question(question: ["A special symbol or phrase that you use to check, change, or combine values"],
					 image: "",
					 optionA: "Operator",
					 optionB: "Operand",
					 optionC: "Variable",
					 optionD: "",
					 questionId: 101,
					 helpText: "An operator is a special symbol or phrase that you use to check, change, or combine values."),
			
			Question(question: ["The value that operators affect in their work",
								"Operators execute commands on these values",
								"The values that operators manipulate while performing their work"],
					 image: "",
					 optionA: "Operands",
					 optionB: "Expressions",
					 optionC: "Symbols",
					 optionD: "",
					 questionId: 102,
					 helpText: "The values that operators affect are operands. In the expression 1 + 2, the + symbol is a binary operator and its two operands are the values 1 and 2."),
			
			Question(question: ["Operators that operate on a single target",
								"These operators operate on a single target",
								"The operators that can operate only on a single target and be of prefix or postfix types"],
					 image: "",
					 optionA: "Unary",
					 optionB: "Binary",
					 optionC: "Ternary",
					 optionD: "",
					 questionId: 103,
					 helpText: "Unary operators operate on a single target (such as -a). Unary prefix operators appear immediately before their target (such as !b), and unary postfix operators appear immediately after their target (such as c!)."),
			
			Question(question: ["Unary operators that appear immediately before the value",
								"The unary operators that appear before the value",
								"What kind of unary operators appear immediately before their operand?"],
					 image: "",
					 optionA: "Prefix",
					 optionB: "Postfix",
					 optionC: "Infix",
					 optionD: "",
					 questionId: 104,
					 helpText: "Unary prefix operators appear immediately before their target (such as !b)."),
			
			Question(question: ["Unary operators that appear immediately after the value",
								"Unary operators that follow the value, that is appear after the value",
								"What kind of unary operators appear immediately after the value?"],
					 image: "",
					 optionA: "Postfix",
					 optionB: "Prefix",
					 optionC: "Infix",
					 optionD: "",
					 questionId: 105,
					 helpText: "Unary postfix operators appear immediately after their target (such as c!)."),
			
			Question(question: ["Which of these operators is called the assignment operator?",
								"Which operator is used to initialize or update a value with another value?",
								"Choose the assignment operator from these options"],
					 image: "",
					 optionA: "=",
					 optionB: "==",
					 optionC: "!=",
					 optionD: "===",
					 questionId: 106,
					 helpText: "The assignment operator (a = b) initializes or updates the value of a with the value of b."),
			
			Question(question: ["Operators that operate on two targets",
								"These operators operate on two targets ",
								"What kind of operator operates on two operands at the same time?"],
					 image: "",
					 optionA: "Binary",
					 optionB: "Ternary",
					 optionC: "Unary",
					 optionD: "",
					 questionId: 107,
					 helpText: "Binary operators operate on two targets (such as 2 + 3) and are infix because they appear in between their two targets."),
			
			Question(question: ["Operators that operate on three targets",
								"These operators operate on three operands",
								"Which operators can operate on three targets?"],
					 image: "",
					 optionA: "Ternary",
					 optionB: "Binary",
					 optionC: "Unary",
					 optionD: "All operators",
					 questionId: 108,
					 helpText: "Ternary operators operate on three targets. Like C, Swift has only one ternary operator, the ternary conditional operator (a ? b : c). The ternary conditional operator provides an efficient shorthand for deciding which of two expressions to consider. Use the ternary conditional operator with care, however. Its conciseness can lead to hard-to-read code if overused. Avoid combining multiple instances of the ternary conditional operator into one compound statement."),
			
			Question(question: ["Operators that appear in between their two targets"],
					 image: "",
					 optionA: "Infix",
					 optionB: "Prefix",
					 optionC: "Postfix",
					 optionD: "",
					 questionId: 109,
					 helpText: "Binary operators operate on two targets (such as 2 + 3) and are infix because they appear in between their two targets."),
			
			Question(question: ["Which operator initializes or changes the value of a variable?",
								"The operator that can change the value of a variable to the value another variable",
								"Which operator can assign the value of a variable to the value of another variable?"],
					 image: "",
					 optionA: "=",
					 optionB: "==",
					 optionC: "===",
					 optionD: "",
					 questionId: 110,
					 helpText: "The assignment operator (a = b) initializes or updates the value of a with the value of b. If the right side of the assignment is a tuple with multiple values, its elements can be decomposed into multiple constants or variables at once: let (x, y) = (1, 2)"),
			
			Question(question: ["Can Swift's assignment operator return a value?",
								"Can the assignment operator return a value?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "Only Bool",
					 optionD: "",
					 questionId: 111,
					 helpText: "Unlike the assignment operator in C and Objective-C, the assignment operator in Swift does not itself return a value. This feature prevents the assignment operator (=) from being used by accident when the equal to operator (==) is actually intended. By making if x = y invalid, Swift helps you to avoid these kinds of errors in your code."),
			
			Question(question: ["If the right side of the assignment is a tuple, can we decompose it into multiple constants or variables at once?",
								"The left side of the expression is a tuple, can we assign multiple constants or variables to all of its values",
								"Can we assign multiple constants or variables to a tuple’s values at once?"],
					 image: "",
					 optionA: "Yes, like this: (x, y) = (1, 2)",
					 optionB: "Yes, like this: (x, y) = 1 / 2",
					 optionC: "No, we can't",
					 optionD: "",
					 questionId: 112,
					 helpText: "If the right side of the assignment is a tuple with multiple values, its elements can be decomposed into multiple constants or variables at once: let (x, y) = (1, 2)"),
			
			Question(question: ["How many standard arithmetic operators does Swift support?",
								"How many arithmetic operators are supported in Swift?",
								"Swift provides exactly that number of arithmetic operators"],
					 image: "",
					 optionA: "Four",
					 optionB: "Three",
					 optionC: "Two",
					 optionD: "",
					 questionId: 113,
					 helpText: "Swift supports the four standard arithmetic operators for all number types: Addition (+). Subtraction (-). Multiplication (*). Division (/)"),
			
			Question(question: ["What arithmetic operator is supported for String concatenation?",
								"The arithmetic operator that can be used to concatenate string values",
								"Concatenation of string values can be done through ... "],
					 image: "",
					 optionA: "Addition operator",
					 optionB: "Multiplication operator",
					 optionC: "Assignment operator",
					 optionD: "",
					 questionId: 114,
					 helpText: "The addition operator is supported for String concatenation."),
			
			Question(question: ["Is that correct that Swift arithmetic operators allow values to overflow by default?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 115,
					 helpText: "Unlike the arithmetic operators in C and Objective-C, the Swift arithmetic operators don’t allow values to overflow by default. You can opt in to value overflow behavior by using Swift’s overflow operators (such as a &+ b)."),
			
			Question(question: ["Which operator shows how many multiples of a will fit inside b?",
								"Which operator shows how many multiples of c will fit inside d and returns the value that is left over?",
								"Which operator works out how many multiples of b will fit inside a and returns the remainder?"],
					 image: "",
					 optionA: "Remainder operator",
					 optionB: "Assignment operator",
					 optionC: "Identical to operator",
					 optionD: "",
					 questionId: 116,
					 helpText: "The remainder operator (a % b) works out how many multiples of b will fit inside a and returns the value that is left over (known as the remainder). The remainder operator (%) is also known as a modulo operator in other languages. However, its behavior in Swift for negative numbers means that, strictly speaking, it’s a remainder rather than a modulo operation."),
			
			Question(question: ["What’s the remainder of 9 % 4?"],
					 image: "",
					 optionA: "1",
					 optionB: "2",
					 optionC: "3",
					 optionD: "4",
					 questionId: 117,
					 helpText: "Here’s how the remainder operator works. To calculate 9 % 4, you first work out how many 4s will fit inside 9 (You can fit two 4s inside 9, and the remainder is 1). In Swift, this would be written as: 9 % 4. To determine the answer for a % b, the % operator calculates the following equation and returns remainder as its output: a = (b x some multiplier) + remainder, where some multiplier is the largest number of multiples of b that will fit inside a. Inserting 9 and 4 into this equation yields: 9 = (4 x 2) + 1"),
			
			Question(question: ["What remainder will be in -9 % 4 expression?"],
					 image: "",
					 optionA: "-1",
					 optionB: "1",
					 optionC: "2",
					 optionD: "-2",
					 questionId: 118,
					 helpText: "We will get: -9 = (4 × -2) + -1, so the remainder will be -1."),
			
			Question(question: ["Pick the remainder of 9 % -4 expression?"],
					 image: "",
					 optionA: "1",
					 optionB: "2",
					 optionC: "4",
					 optionD: "8",
					 questionId: 119,
					 helpText: "The sign of b is ignored for negative values of b. This means that a % b and a % -b always give the same answer."),
			
			Question(question: ["How to introduce unary minus operator correctly?"],
					 image: "",
					 optionA: "-1",
					 optionB: "- 2",
					 optionC: "8 -",
					 optionD: "",
					 questionId: 120,
					 helpText: "The sign of a numeric value can be toggled using a prefixed -, known as the unary minus operator. The unary minus operator (-) is prepended directly before the value it operates on, without any white space."),
			
			Question(question: ["What is the name of the operator in this expression: a += 2?",
								"Choose the operator that is implemented here: c += 11?",
								"What operator is used in the expression: apples += 55?"],
					 image: "",
					 optionA: "Compound assignment operator",
					 optionB: "Assignment operator",
					 optionC: "Compound addition operator",
					 optionD: "Plus - equal operator",
					 questionId: 121,
					 helpText: "Like C, Swift provides compound assignment operators that combine assignment (=) with another operation. One example is the addition assignment operator (+=): var a = 1, a += 2 // a is now equal to 3. The expression a += 2 is shorthand for a = a + 2. Effectively, the addition and the assignment are combined into one operator that performs both tasks at the same time. The compound assignment operators don’t return a value. For example, you can’t write let b = a += 2."),
			
			Question(question: ["Does the unary plus operator (+) change the original value?",
								"Does the unary plus operator alter the original value?",
								"Will the original value changed if we apply the unary plus operator to it?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "Yes, - become +",
					 optionD: "",
					 questionId: 122,
					 helpText: "The unary plus operator (+) simply returns the value it operates on, without any change. Although the unary plus operator doesn’t actually do anything, you can use it to provide symmetry in your code for positive numbers when also using the unary minus operator for negative numbers."),
			
			Question(question: ["How many comparison operators does Swift support?",
								"How many comparison operators are there in Swift?",
								"How many comparison operators are provided in Swift?"],
					 image: "",
					 optionA: "Six",
					 optionB: "Eight",
					 optionC: "Four",
					 optionD: "",
					 questionId: 123,
					 helpText: "Swift supports the following comparison operators: Equal to (a == b). Not equal to (a != b). Greater than (a > b). Less than (a < b). Greater than or equal to (a >= b). Less than or equal to (a <= b)"),
			
			Question(question: ["Pick the value that will be assigned to the constant anotherMinusOne?",
								"What is the value of the constant anotherMinusOne at the end of the following code?"],
					 image: "BasicOperators22",
					 optionA: "-1",
					 optionB: "1",
					 optionC: "-2",
					 optionD: "2",
					 questionId: 124,
					 helpText: "Correct answer: -1. The unary plus operator (+) simply returns the value it operates on, without any change. Although the unary plus operator doesn’t actually do anything, you can use it to provide symmetry in your code for positive numbers when also using the unary minus operator for negative numbers."),
			
			Question(question: ["Choose the ‘equal to’ comparison operator?"],
					 image: "",
					 optionA: "==",
					 optionB: "=",
					 optionC: "===",
					 optionD: "!=",
					 questionId: 125,
					 helpText: "The comparison operator equal to is: a == b."),
			
			Question(question: ["What does the ‘greater than or equal to’ comparison operator look?"],
					 image: "",
					 optionA: ">=",
					 optionB: "<=",
					 optionC: "=>",
					 optionD: "=<",
					 questionId: 126,
					 helpText: "Greater than or equal to: a >= b"),
			
			Question(question: ["Which of these represent the ‘identity’ operator?"],
					 image: "",
					 optionA: "===",
					 optionB: "==",
					 optionC: "=",
					 optionD: "!==",
					 questionId: 127,
					 helpText: "Swift also provides two identity operators (=== and !==), which you use to test whether two object references both refer to the same object instance."),
			
			Question(question: ["What type do all comparison operators return?",
								"Which type is returned by all of the comparison operators?"],
					 image: "",
					 optionA: "Bool",
					 optionB: "Int",
					 optionC: "Double",
					 optionD: "nil",
					 questionId: 128,
					 helpText: "Each of the comparison operators returns a Bool value to indicate whether or not the statement is true. For example: 1 == 1 // true, since 1 is 1, 2! = 1 // true, because 2 is not equal to 1, 2 > 1 // true, because 2 is greater than 1, etc. Comparison operators are often used in conditional expressions, including the if statement."),
			
			Question(question: ["The syntax of this operator is: expression ? action1 : action2?",
								"Which operator is this: question ? answer1 : answer2?",
								"Choose the operator that takes the form: a ? b: c"],
					 image: "",
					 optionA: "Ternary conditional operator",
					 optionB: "Binary conditional operator",
					 optionC: "Assignment operator",
					 optionD: "Unary prefix operator",
					 questionId: 129,
					 helpText: "The ternary conditional operator is a special operator with three parts, which takes the form question ? answer1 : answer2. It’s a shortcut for evaluating one of two expressions based on whether question is true or false. If question is true, it evaluates answer1 and returns its value; otherwise, it evaluates answer2 and returns its value."),
			
			Question(question: ["Can two tuples of type (String, Int) be compared with each other?",
								"You have two tuples of type (String, Int). Can you compare them using Swift?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "Only  != or ==",
					 optionC: "Only < or >",
					 optionD: "No",
					 questionId: 130,
					 helpText: "You can compare two tuples if they have the same type and the same number of values. Tuples are compared from left to right, one value at a time, until the comparison finds two values that aren’t equal. Those two values are compared, and the result of that comparison determines the overall result of the tuple comparison. If all the elements are equal, then the tuples themselves are equal. Tuples can be compared with a given operator only if the operator can be applied to each value in the respective tuples."),
			
			Question(question: ["Can two tuples of type (String, Bool) be compared with each other?",
								"Let’s say you have two tuples of type (String, Bool). Can Swift compare them?"],
					 image: "",
					 optionA: "No",
					 optionB: "Only != or ==",
					 optionC: "Yes",
					 optionD: "",
					 questionId: 131,
					 helpText: "Tuples can be compared with a given operator only if the operator can be applied to each value in the respective tuples. You can compare two tuples of type (String, Int) because both String and Int values can be compared using the < operator. In contrast, two tuples of type (String, Bool) can’t be compared with the < operator because the < operator can’t be applied to Bool values."),
			
			Question(question: ["The Swift standard library includes tuple comparison operators for tuples with fewer than seven elements. Is that true?",
								"Is that right that to compare tuples with seven or more elements, you must implement the comparison operators yourself?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 132,
					 helpText: "The Swift standard library includes tuple comparison operators for tuples with fewer than seven elements. To compare tuples with seven or more elements, you must implement the comparison operators yourself."),
			
			Question(question: ["The operator that unwraps the optional ‘a’ or returns the default value of b if a = nil",
								"The operator that unwraps the optional if it contains a value or otherwise it returns nil",
								"Which operator returns the default value when the variable of an optional type is nil?"],
					 image: "",
					 optionA: "The nil-coalescing operator",
					 optionB: "The identical to operator",
					 optionC: "The optional chaining operator",
					 optionD: "",
					 questionId: 133,
					 helpText: "The nil-coalescing operator (a ?? b) unwraps an optional a if it contains a value, or returns a default value b if a is nil. The expression a is always of an optional type. The expression b must match the type that is stored inside a."),
			
			Question(question: ["What value will be assigned to the colorToUse constant?",
								"What value will colorToUse get?"],
					 image: "BasicOperators31",
					 optionA: "red",
					 optionB: "Value of userDefinedColorName",
					 optionC: "We will get an error",
					 optionD: "nil",
					 questionId: 134,
					 helpText: "The userDefinedColorName variable is defined as an optional String, with a default value of nil. Because userDefinedColorName is of an optional type, you can use the nil-coalescing operator to consider its value. In the example above, the operator is used to determine an initial value for a String variable called colorNameToUse. Because userDefinedColorName is nil, the expression userDefinedColorName ?? defaultColorName returns the value of defaultColorName, or \"red\". If you assign a non-nil value to userDefinedColorName and perform the nil-coalescing operator check again, the value wrapped inside userDefinedColorName is used instead of the default."),
			
			Question(question: ["What value will be assigned to the constant test if the code compiles?",
								"If the constant test is successfully assigned a value, what value will it get?",
								"What is the value of the test constant at the end of the following code?"],
					 image: "BasicOperators32",
					 optionA: "К",
					 optionB: "nil",
					 optionC: "We will get an error",
					 optionD: "",
					 questionId: 135,
					 helpText: "The nil-coalescing operator (a ?? b) unwraps an optional a if it contains a value, or returns a default value b if a is nil. The expression a is always of an optional type. The expression b must match the type that is stored inside a. In this example, the variable character, with an implicit type declaration, is assigned the type String by default, which means the types are equal and the constant test will be assigned the value K."),
			
			Question(question: ["What range operators are available in Swift?",
								"Operators of the following range types are supported in Swift",
								"The range operators that Swift supports"],
					 image: "",
					 optionA: "Closed and Half-Open Range Operators",
					 optionB: "Multithreading and Singlethreading",
					 optionC: "Only One-Sided Ranges",
					 optionD: "",
					 questionId: 136,
					 helpText: "Swift includes several range operators, which are shortcuts for expressing a range of values: Closed Range Operator, Half-Open Range Operator."),
			
			Question(question: ["The operator of this range specifies a range from a to b, including a and b themselves",
								"What range operator defines a range from a to b, including a and b themselves?"],
					 image: "",
					 optionA: "Closed range operator",
					 optionB: "Half-Open range operator",
					 optionC: "Open range operator",
					 optionD: "",
					 questionId: 137,
					 helpText: "The closed range operator (a...b) defines a range that runs from a to b, and includes the values a and b. The value of a must not be greater than b. The closed range operator is useful when iterating over a range in which you want all of the values to be used, such as with a for-in loop."),
			
			Question(question: ["The range operator that defines a range from a to b, but doesn’t include b",
								"Which range operator specifies values from a to b, but doesn’t include b?"],
					 image: "",
					 optionA: "Half-Open range operator",
					 optionB: "Closed range operator",
					 optionC: "One-Sided range operator",
					 optionD: "",
					 questionId: 138,
					 helpText: "The half-open range operator (a..<b) defines a range that runs from a to b, but doesn’t include b. It’s said to be half-open because it contains its first value, but not its final value. As with the closed range operator, the value of a must not be greater than b. If the value of a is equal to b, then the resulting range will be empty. Half-open ranges are particularly useful when you work with zero-based lists such as arrays, where it’s useful to count up to (but not including) the length of the list."),
			
			Question(question: ["A range that extends as far as possible, but only in one direction?",
								"A range that continues as far as possible, but only one way?",
								"A range that includes all elements of an array from a specific index to the array’s last index?"],
					 image: "",
					 optionA: "One-Sided Range",
					 optionB: "Open Range",
					 optionC: "Endless Range",
					 optionD: "",
					 questionId: 139,
					 helpText: "The closed range operator has an alternative form for ranges that continue as far as possible in one direction—for example, a range that includes all the elements of an array from index 2 to the end of the array. In these cases, you can omit the value from one side of the range operator. This kind of range is called a one-sided range because the operator has a value on only one side."),
			
			Question(question: ["Does the closed range operator have a corresponding one-sided form?",
								"Does the half-open range operator have a corresponding one-sided form?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 140,
					 helpText: "The closed range operator has an alternative form for ranges that continue as far as possible in one direction—for example, a range that includes all the elements of an array from index 2 to the end of the array. In these cases, you can omit the value from one side of the range operator. This kind of range is called a one-sided range because the operator has a value on only one side. The half-open range operator also has a one-sided form that’s written with only its final value. Just like when you include a value on both sides, the final value isn’t part of the range."),
			
			Question(question: ["How many standard logical operators does Swift support?",
								"Swift supports ... standard logical operators",
								"The number of logical operators supported by Swift"],
					 image: "",
					 optionA: "3",
					 optionB: "4",
					 optionC: "2",
					 optionD: "",
					 questionId: 141,
					 helpText: "Logical operators modify or combine the Boolean logic values true and false. Swift supports the three standard logical operators found in C-based languages: logical NOT (!a), logical AND (a && b), logical OR (a || b)"),
			
			Question(question: ["Which logical operator inverts a Boolean value - true becomes false and false becomes true?",
								"A logical operator that inverts a Boolean value (true becomes false and vice versa)?",
								"Which sign introduces the logical operator that inverts a Boolean value"],
					 image: "",
					 optionA: "!",
					 optionB: "&&",
					 optionC: "||",
					 optionD: "¡",
					 questionId: 142,
					 helpText: "The logical NOT operator (!a) inverts a Boolean value so that true becomes false, and false becomes true. The logical NOT operator is a prefix operator, and appears immediately before the value it operates on, without any white space. The phrase if !allowedEntry can be read as “if not allowed entry.” The subsequent line is only executed if “not allowed entry” is true; that is, if allowedEntry is false. As in this example, careful choice of Boolean constant and variable names can help to keep code readable and concise, while avoiding double negatives or confusing logic statements."),
			
			Question (question: ["Which operator will return true when comparing if the objects refer to the same location in memory?"],
					  image: "",
					  optionA: "===",
					  optionB: "==",
					  optionC: "=",
					  optionD: "&&",
					  questionId: 143,
					  helpText: "Swift's identity check operator (===) returns true if variables refer to the same memory location."),
			
			Question(question: ["Which logical operator outputs true if and only if both of its operands are true?",
								"If at least one operand of this logical operator is false, the whole expression will be false",
								"Only when both operands are true this logical operator returns true"],
					 image: "",
					 optionA: "&&",
					 optionB: "||",
					 optionC: "!",
					 optionD: "",
					 questionId: 144,
					 helpText: "The logical AND operator (a && b) creates logical expressions where both values must be true for the overall expression to also be true.If either value is false, the overall expression will also be false. In fact, if the first value is false, the second value won’t even be evaluated, because it can’t possibly make the overall expression equate to true. This is known as short-circuit evaluation."),
			
			Question(question: ["If the first operand is false when using logical AND (&&), will the second value be evaluated?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 145,
					 helpText: "When using logical AND, if the first value is false, the second value won’t even be evaluated, because it can’t possibly make the overall expression equate to true. This is known as short-circuit evaluation."),
			
			Question(question: ["How many Swift’s logical operators are infix operators?"],
					 image: "",
					 optionA: "2",
					 optionB: "1",
					 optionC: "3",
					 optionD: "All of them",
					 questionId: 146,
					 helpText: "Two logical operators are infix: && (AND) and || (OR)."),
			
			Question(question: ["Using this operator, you can create logical expressions that will return true if at least one of the operands is true",
								"If at least one of the operands is true, the whole expression will be true",
								"The boolean operator that returns true when at least one operand is true"],
					 image: "",
					 optionA: "|| (OR)",
					 optionB: "! (NOT)",
					 optionC: "&& (AND)",
					 optionD: "",
					 questionId: 147,
					 helpText: "The logical OR operator (a || b) is an infix operator made from two adjacent pipe characters. You use it to create logical expressions in which only one of the two values has to be true for the overall expression to be true."),
			
			Question(question: ["If the left side of the logical OR expression is true, will the right side be evaluated?",
								"The left side of the given expression with the boolean operator || is true, will Swift evaluate the right side?",
								"Will the second part of an expression be evaluated if the logical OR is true in its first part?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 148,
					 helpText: "Like the Logical AND operator, the Logical OR operator uses short-circuit evaluation to consider its expressions. If the left side of a Logical OR expression is true, the right side is not evaluated, because it can’t change the outcome of the overall expression."),
			
			Question(question: ["What will the expression (red1 === red2) return considering that let red1 = UIColor.red, let red2 = UIColor.red?",
								"let green1 = UIColor.green, let green2 = UIColor.green, what will be the result of the following evaluation (green1 === green2)?",
								"If two variables refer to the same color UIColor.blue, what will the identity comparison operator (===) return?"],
					 image: "",
					 optionA: "true",
					 optionB: "false",
					 optionC: "Color name",
					 optionD: "",
					 questionId: 149,
					 helpText: "When we initialize several variables through a reference to the same UIColor.color, all the variables become references to the same color instance, that is, they are identical."),
			
			Question(question: ["The value we will get in the console after running the code above"],
					 image: "BasicOperators47",
					 optionA: "6",
					 optionB: "8",
					 optionC: "9",
					 optionD: "",
					 questionId: 150,
					 helpText: "Correct answer: 6. Despite the confusing spaces, Swift has well-defined operator precedence. In the task, the execution order is as follows: 1 + (2 * number) - 1"),
			
			Question(question: ["What will this code snippet return?"],
					 image: "BasicOperators46",
					 optionA: "true",
					 optionB: "false",
					 optionC: ".red",
					 optionD: "",
					 questionId: 151,
					 helpText: "True will be printed to the console. UIColor.red does not create a new object every time, but always returns the same one, so the comparison operator for identity returns true (variables refer to the same place in memory)."),
			
			Question(question: ["What kind of range the constant low represent?"],
					 image: "BasicOperators48",
					 optionA: "One-Sided",
					 optionB: "Two-Sided",
					 optionC: "Half-Open",
					 optionD: "Close",
					 questionId: 152,
					 helpText: "Swift incorporates a lot of other programming languages. This also happened with one-sided ranges, which have long been used in development, for example, in Python. In this form of ranges, only one of the boundaries is indicated, while the other is determined automatically.")
		]
	}
	
	
	///
	
	
	static func getDemoQuestions() -> [Question] {
		return [
			Question(question: ["A special symbol or phrase that you use to check, change, or combine values"],
					 image: "",
					 optionA: "Operator",
					 optionB: "Operand",
					 optionC: "Variable",
					 optionD: "",
					 questionId: 101,
					 helpText: "An operator is a special symbol or phrase that you use to check, change, or combine values."),
			
			Question(question: ["The value that operators affect in their work",
								"Operators execute commands on these values",
								"The values that operators manipulate while performing their work"],
					 image: "",
					 optionA: "Operands",
					 optionB: "Expressions",
					 optionC: "Symbols",
					 optionD: "",
					 questionId: 102,
					 helpText: "The values that operators affect are operands. In the expression 1 + 2, the + symbol is a binary operator and its two operands are the values 1 and 2."),
			
			Question(question: ["Operators that operate on a single target",
								"These operators operate on a single target",
								"The operators that can operate only on a single target and be of prefix or postfix types"],
					 image: "",
					 optionA: "Unary",
					 optionB: "Binary",
					 optionC: "Ternary",
					 optionD: "",
					 questionId: 103,
					 helpText: "Unary operators operate on a single target (such as -a). Unary prefix operators appear immediately before their target (such as !b), and unary postfix operators appear immediately after their target (such as c!)."),
			
			Question(question: ["Unary operators that appear immediately before the value",
								"The unary operators that appear before the value",
								"What kind of unary operators appear immediately before their operand?"],
					 image: "",
					 optionA: "Prefix",
					 optionB: "Postfix",
					 optionC: "Infix",
					 optionD: "",
					 questionId: 104,
					 helpText: "Unary prefix operators appear immediately before their target (such as !b)."),
			
			Question(question: ["Unary operators that appear immediately after the value",
								"Unary operators that follow the value, that is appear after the value",
								"What kind of unary operators appear immediately after the value?"],
					 image: "",
					 optionA: "Postfix",
					 optionB: "Prefix",
					 optionC: "Infix",
					 optionD: "",
					 questionId: 105,
					 helpText: "Unary postfix operators appear immediately after their target (such as c!)."),
			
			Question(question: ["Which of these operators is called the assignment operator?",
								"Which operator is used to initialize or update a value with another value?",
								"Choose the assignment operator from these options"],
					 image: "",
					 optionA: "=",
					 optionB: "==",
					 optionC: "!=",
					 optionD: "===",
					 questionId: 106,
					 helpText: "The assignment operator (a = b) initializes or updates the value of a with the value of b."),
			
			Question(question: ["Operators that operate on two targets",
								"These operators operate on two targets ",
								"What kind of operator operates on two operands at the same time?"],
					 image: "",
					 optionA: "Binary",
					 optionB: "Ternary",
					 optionC: "Unary",
					 optionD: "",
					 questionId: 107,
					 helpText: "Binary operators operate on two targets (such as 2 + 3) and are infix because they appear in between their two targets."),
			
			Question(question: ["Operators that operate on three targets",
								"These operators operate on three operands",
								"Which operators can operate on three targets?"],
					 image: "",
					 optionA: "Ternary",
					 optionB: "Binary",
					 optionC: "Unary",
					 optionD: "All operators",
					 questionId: 108,
					 helpText: "Ternary operators operate on three targets. Like C, Swift has only one ternary operator, the ternary conditional operator (a ? b : c). The ternary conditional operator provides an efficient shorthand for deciding which of two expressions to consider. Use the ternary conditional operator with care, however. Its conciseness can lead to hard-to-read code if overused. Avoid combining multiple instances of the ternary conditional operator into one compound statement."),
			
			Question(question: ["Operators that appear in between their two targets"],
					 image: "",
					 optionA: "Infix",
					 optionB: "Prefix",
					 optionC: "Postfix",
					 optionD: "",
					 questionId: 109,
					 helpText: "Binary operators operate on two targets (such as 2 + 3) and are infix because they appear in between their two targets."),
			
			Question(question: ["Which operator initializes or changes the value of a variable?",
								"The operator that can change the value of a variable to the value another variable",
								"Which operator can assign the value of a variable to the value of another variable?"],
					 image: "",
					 optionA: "=",
					 optionB: "==",
					 optionC: "===",
					 optionD: "",
					 questionId: 110,
					 helpText: "The assignment operator (a = b) initializes or updates the value of a with the value of b. If the right side of the assignment is a tuple with multiple values, its elements can be decomposed into multiple constants or variables at once: let (x, y) = (1, 2)"),
			
			Question(question: ["Can Swift's assignment operator return a value?",
								"Can the assignment operator return a value?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "Only Bool",
					 optionD: "",
					 questionId: 111,
					 helpText: "Unlike the assignment operator in C and Objective-C, the assignment operator in Swift does not itself return a value. This feature prevents the assignment operator (=) from being used by accident when the equal to operator (==) is actually intended. By making if x = y invalid, Swift helps you to avoid these kinds of errors in your code."),
			
			Question(question: ["If the right side of the assignment is a tuple, can we decompose it into multiple constants or variables at once?",
								"The left side of the expression is a tuple, can we assign multiple constants or variables to all of its values",
								"Can we assign multiple constants or variables to a tuple’s values at once?"],
					 image: "",
					 optionA: "Yes, like this: (x, y) = (1, 2)",
					 optionB: "Yes, like this: (x, y) = 1 / 2",
					 optionC: "No, we can't",
					 optionD: "",
					 questionId: 112,
					 helpText: "If the right side of the assignment is a tuple with multiple values, its elements can be decomposed into multiple constants or variables at once: let (x, y) = (1, 2)"),
			
			Question(question: ["How many standard arithmetic operators does Swift support?",
								"How many arithmetic operators are supported in Swift?",
								"Swift provides exactly that number of arithmetic operators"],
					 image: "",
					 optionA: "Four",
					 optionB: "Three",
					 optionC: "Two",
					 optionD: "",
					 questionId: 113,
					 helpText: "Swift supports the four standard arithmetic operators for all number types: Addition (+). Subtraction (-). Multiplication (*). Division (/)"),
			
			Question(question: ["What arithmetic operator is supported for String concatenation?",
								"The arithmetic operator that can be used to concatenate string values",
								"Concatenation of string values can be done through ... "],
					 image: "",
					 optionA: "Addition operator",
					 optionB: "Multiplication operator",
					 optionC: "Assignment operator",
					 optionD: "",
					 questionId: 114,
					 helpText: "The addition operator is supported for String concatenation."),
			
			Question(question: ["Is that correct that Swift arithmetic operators allow values to overflow by default?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 115,
					 helpText: "Unlike the arithmetic operators in C and Objective-C, the Swift arithmetic operators don’t allow values to overflow by default. You can opt in to value overflow behavior by using Swift’s overflow operators (such as a &+ b)."),
			
			Question(question: ["Which operator shows how many multiples of a will fit inside b?",
								"Which operator shows how many multiples of c will fit inside d and returns the value that is left over?",
								"Which operator works out how many multiples of b will fit inside a and returns the remainder?"],
					 image: "",
					 optionA: "Remainder operator",
					 optionB: "Assignment operator",
					 optionC: "Identical to operator",
					 optionD: "",
					 questionId: 116,
					 helpText: "The remainder operator (a % b) works out how many multiples of b will fit inside a and returns the value that is left over (known as the remainder). The remainder operator (%) is also known as a modulo operator in other languages. However, its behavior in Swift for negative numbers means that, strictly speaking, it’s a remainder rather than a modulo operation."),
			
			Question(question: ["What’s the remainder of 9 % 4?"],
					 image: "",
					 optionA: "1",
					 optionB: "2",
					 optionC: "3",
					 optionD: "4",
					 questionId: 117,
					 helpText: "Here’s how the remainder operator works. To calculate 9 % 4, you first work out how many 4s will fit inside 9 (You can fit two 4s inside 9, and the remainder is 1). In Swift, this would be written as: 9 % 4. To determine the answer for a % b, the % operator calculates the following equation and returns remainder as its output: a = (b x some multiplier) + remainder, where some multiplier is the largest number of multiples of b that will fit inside a. Inserting 9 and 4 into this equation yields: 9 = (4 x 2) + 1"),
			
			Question(question: ["What remainder will be in -9 % 4 expression?"],
					 image: "",
					 optionA: "-1",
					 optionB: "1",
					 optionC: "2",
					 optionD: "-2",
					 questionId: 118,
					 helpText: "We will get: -9 = (4 × -2) + -1, so the remainder will be -1."),
			
			Question(question: ["Pick the remainder of 9 % -4 expression?"],
					 image: "",
					 optionA: "1",
					 optionB: "2",
					 optionC: "4",
					 optionD: "8",
					 questionId: 119,
					 helpText: "The sign of b is ignored for negative values of b. This means that a % b and a % -b always give the same answer."),
			
			Question(question: ["How to introduce unary minus operator correctly?"],
					 image: "",
					 optionA: "-1",
					 optionB: "- 2",
					 optionC: "8 -",
					 optionD: "",
					 questionId: 120,
					 helpText: "The sign of a numeric value can be toggled using a prefixed -, known as the unary minus operator. The unary minus operator (-) is prepended directly before the value it operates on, without any white space."),
			
			Question(question: ["What is the name of the operator in this expression: a += 2?",
								"Choose the operator that is implemented here: c += 11?",
								"What operator is used in the expression: apples += 55?"],
					 image: "",
					 optionA: "Compound assignment operator",
					 optionB: "Assignment operator",
					 optionC: "Compound addition operator",
					 optionD: "Plus - equal operator",
					 questionId: 121,
					 helpText: "Like C, Swift provides compound assignment operators that combine assignment (=) with another operation. One example is the addition assignment operator (+=): var a = 1, a += 2 // a is now equal to 3. The expression a += 2 is shorthand for a = a + 2. Effectively, the addition and the assignment are combined into one operator that performs both tasks at the same time. The compound assignment operators don’t return a value. For example, you can’t write let b = a += 2."),
			
			Question(question: ["Does the unary plus operator (+) change the original value?",
								"Does the unary plus operator alter the original value?",
								"Will the original value changed if we apply the unary plus operator to it?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "Yes, - become +",
					 optionD: "",
					 questionId: 122,
					 helpText: "The unary plus operator (+) simply returns the value it operates on, without any change. Although the unary plus operator doesn’t actually do anything, you can use it to provide symmetry in your code for positive numbers when also using the unary minus operator for negative numbers."),
			
			Question(question: ["How many comparison operators does Swift support?",
								"How many comparison operators are there in Swift?",
								"How many comparison operators are provided in Swift?"],
					 image: "",
					 optionA: "Six",
					 optionB: "Eight",
					 optionC: "Four",
					 optionD: "",
					 questionId: 123,
					 helpText: "Swift supports the following comparison operators: Equal to (a == b). Not equal to (a != b). Greater than (a > b). Less than (a < b). Greater than or equal to (a >= b). Less than or equal to (a <= b)"),
			
			Question(question: ["Pick the value that will be assigned to the constant anotherMinusOne?",
								"What is the value of the constant anotherMinusOne at the end of the following code?"],
					 image: "BasicOperators22",
					 optionA: "-1",
					 optionB: "1",
					 optionC: "-2",
					 optionD: "2",
					 questionId: 124,
					 helpText: "Correct answer: -1. The unary plus operator (+) simply returns the value it operates on, without any change. Although the unary plus operator doesn’t actually do anything, you can use it to provide symmetry in your code for positive numbers when also using the unary minus operator for negative numbers."),
			
			Question(question: ["Choose the ‘equal to’ comparison operator?"],
					 image: "",
					 optionA: "==",
					 optionB: "=",
					 optionC: "===",
					 optionD: "!=",
					 questionId: 125,
					 helpText: "The comparison operator equal to is: a == b."),
			
			Question(question: ["What does the ‘greater than or equal to’ comparison operator look?"],
					 image: "",
					 optionA: ">=",
					 optionB: "<=",
					 optionC: "=>",
					 optionD: "=<",
					 questionId: 126,
					 helpText: "Greater than or equal to: a >= b"),
			
			Question(question: ["Which of these represent the ‘identity’ operator?"],
					 image: "",
					 optionA: "===",
					 optionB: "==",
					 optionC: "=",
					 optionD: "!==",
					 questionId: 127,
					 helpText: "Swift also provides two identity operators (=== and !==), which you use to test whether two object references both refer to the same object instance."),
			
			Question(question: ["What type do all comparison operators return?",
								"Which type is returned by all of the comparison operators?"],
					 image: "",
					 optionA: "Bool",
					 optionB: "Int",
					 optionC: "Double",
					 optionD: "nil",
					 questionId: 128,
					 helpText: "Each of the comparison operators returns a Bool value to indicate whether or not the statement is true. For example: 1 == 1 // true, since 1 is 1, 2! = 1 // true, because 2 is not equal to 1, 2 > 1 // true, because 2 is greater than 1, etc. Comparison operators are often used in conditional expressions, including the if statement."),
			
			Question(question: ["The syntax of this operator is: expression? action1 : action2?",
								"Which operator is this: question? answer1 : answer2?",
								"Choose the operator that takes the form: a? b: c"],
					 image: "",
					 optionA: "Ternary conditional operator",
					 optionB: "Binary conditional operator",
					 optionC: "Assignment operator",
					 optionD: "Unary prefix operator",
					 questionId: 129,
					 helpText: "The ternary conditional operator is a special operator with three parts, which takes the form question ? answer1 : answer2. It’s a shortcut for evaluating one of two expressions based on whether question is true or false. If question is true, it evaluates answer1 and returns its value; otherwise, it evaluates answer2 and returns its value."),
			
			Question(question: ["Can two tuples of type (String, Int) be compared with each other?",
								"You have two tuples of type (String, Int). Can you compare them using Swift?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "Only  != or ==",
					 optionC: "Only < or >",
					 optionD: "No",
					 questionId: 130,
					 helpText: "You can compare two tuples if they have the same type and the same number of values. Tuples are compared from left to right, one value at a time, until the comparison finds two values that aren’t equal. Those two values are compared, and the result of that comparison determines the overall result of the tuple comparison. If all the elements are equal, then the tuples themselves are equal. Tuples can be compared with a given operator only if the operator can be applied to each value in the respective tuples.")
		]
	}
}
