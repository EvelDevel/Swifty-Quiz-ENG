
//  Created by Евгений Никитин on 11.05.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

// MARK: 03 - Вопросы (id) с 201 по 300

class StringAndCharactersSet {
	static func getQuestions() -> [Question] {
		return [
			Question(question: ["A string is a series of ...",
								"Continue: a string is a collection ...",
								"A string is a collection of what elements?"],
					 image: "",
					 optionA: "Characters",
					 optionB: "Words",
					 optionC: "Letters",
					 optionD: "",
					 questionId: 201,
					 helpText: "A string is a series of characters, such as \"hello, world\" or \"albatross\". Swift strings are represented by the String type. The contents of a String can be accessed in various ways, including as a collection of Character values."),
			
			Question(question: ["The type of strings in Swift",
								"Which type all Swift’s strings belong to?"],
					 image: "",
					 optionA: "String",
					 optionB: "Character",
					 optionC: "",
					 optionD: "",
					 questionId: 202,
					 helpText: "Swift strings are represented by the String type."),
			
			Question(question: ["A sequence of characters surrounded by double quotation marks",
								"Several characters surrounded by double quotation marks",
								"The literal that consists of a sequence of characters"],
					 image: "",
					 optionA: "String literal",
					 optionB: "Array literal",
					 optionC: "Literal",
					 optionD: "",
					 questionId: 203,
					 helpText: "You can include predefined String values within your code as string literals. A string literal is a sequence of characters surrounded by double quotation marks (\"). You can use a string literal as an initial value for a constant or variable."),
			
			Question(question: ["How many double quotation marks should we use when opening and closing a multiline string literal?",
								"How many double quotation marks surround a multiline string literal?",
								"The number of double quotation marks we put while opening and closing a multiline string literal"],
					 image: "",
					 optionA: "3",
					 optionB: "2",
					 optionC: "1",
					 optionD: "4",
					 questionId: 204,
					 helpText: "If you need a string that spans several lines, use a multiline string literal—a sequence of characters surrounded by three double quotation marks. A multiline string literal includes all of the lines between its opening and closing quotation marks. The string begins on the first line after the opening quotation marks (\"\"\") and ends on the line before the closing quotation marks, which means that neither of the strings below start or end with a line break"),
			
			Question(question: ["What character adds a line break in a multiline string literal, and it does it only in code allowing you not to display the line break as part of the string value of this line?"],
					 image: "",
					 optionA: "Backslash",
					 optionB: "Asterisk",
					 optionC: "Dash",
					 optionD: "",
					 questionId: 205,
					 helpText: "When your source code includes a line break inside of a multiline string literal, that line break also appears in the string’s value. If you want to use line breaks to make your source code easier to read, but you don’t want the line breaks to be part of the string’s value, write a backslash at the end of those lines. To simplify - Use it if you want to wrap a line inside your code to make it more readable, but don't want that line to wrap as well after compilation."),
			
			Question(question: ["How can you include several special characters in a string without invoking their effect?"],
					 image: "",
					 optionA: "Surround a string literal with #",
					 optionB: "Surround a string literal with backslashes",
					 optionC: "Through shielding",
					 optionD: "",
					 questionId: 206,
					 helpText: "You can place a string literal within extended delimiters to include special characters in a string without invoking their effect. You place your string within quotation marks (\") and surround that with number signs (#)."),
			
			Question(question: ["How can you initialize an empty string with initializer syntax?",
								"How is an empty String type initialized with initializer syntax?",
								"This is exactly how an empty string is initialized with initializer syntax"],
					 image: "",
					 optionA: "= String()",
					 optionB: "= [String]",
					 optionC: "= (String)",
					 optionD: "",
					 questionId: 207,
					 helpText: "To create an empty String value as the starting point for building a longer string, either assign an empty string literal to a variable: var emptyString = \"\", or initialize a new String instance with initializer syntax: var anotherEmptyString = String()"),
			
			Question(question: ["How can you initialize an empty string with an empty string literal?",
								"How is an empty String type initialized with an empty string literal?",
								"An empty string is initialized with an empty string literal this way"],
					 image: "",
					 optionA: "var emptyString = \"\"",
					 optionB: "var emptyString = String()",
					 optionC: "var emptyString = String(\"\")",
					 optionD: "",
					 questionId: 208,
					 helpText: "To create an empty String value as the starting point for building a longer string, either assign an empty string literal to a variable: var emptyString = \"\", or initialize a new String instance with initializer syntax: var anotherEmptyString = String()"),
			
			Question(question: ["Through which String’s property can we find out if a string is empty?",
								"How do you know if a string is empty?",
								"Through this property we can check if a String value is empty"],
					 image: "",
					 optionA: ".isEmpty",
					 optionB: ".count",
					 optionC: ".capacity",
					 optionD: ".removeRange",
					 questionId: 209,
					 helpText: "Find out whether a String value is empty by checking its Boolean isEmpty property."),
			
			Question(question: ["What result can be returned after applying the .isEmpty property to a string?",
								"The .isEmpty property applied to a string returns ... ",
								"What the result of .isEmpty property we expect to get when applying it to a String value?"],
					 image: "",
					 optionA: "true or false",
					 optionB: "1 or 0",
					 optionC: "number of characters",
					 optionD: "",
					 questionId: 210,
					 helpText: "Find out whether a String value is empty by checking its Boolean isEmpty property, it returns true or false."),
			
			Question(question: ["What do we need to assign the String value to so that it can be modified?",
								"How to assign a String value so that we can change it later?",
								"In order to modify a String value, what should we assign it to?"],
					 image: "",
					 optionA: "To a variable",
					 optionB: "To a constant",
					 optionC: "To a NSMutableString",
					 optionD: "",
					 questionId: 211,
					 helpText: "You indicate whether a particular String can be modified (or mutated) by assigning it to a variable (in which case it can be modified), or to a constant (in which case it can’t be modified)."),
			
			Question(question: ["What happens to the value of a String type when it is passed to a function or method?",
								"When assigning an existing String to another variable, what happens to the String’s value?",
								"What happens when a String value is assigned to a new constant?"],
					 image: "",
					 optionA: "The value is copied",
					 optionB: "We assign the reference",
					 optionC: "",
					 optionD: "",
					 questionId: 212,
					 helpText: "Swift’s String type is a value type. If you create a new String value, that String value is copied when it’s passed to a function or method, or when it’s assigned to a constant or variable. In each case, a new copy of the existing String value is created, and the new copy is passed or assigned, not the original version."),
			
			Question(question: ["Сan you be confident that you are passed by a function won’t be modified unless you modify it yourself?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 213,
					 helpText: "Swift’s copy-by-default String behavior ensures that when a function or method passes you a String value, it’s clear that you own that exact String value, regardless of where it came from. You can be confident that the string you are passed won’t be modified unless you modify it yourself."),
			
			Question(question: ["What can we access by iterating through a string inside the for-in loop?",
								"What can you access when iterating a String value inside a for-in loop?"],
					 image: "",
					 optionA: "Individual Character values",
					 optionB: "A specific letter",
					 optionC: "The number of characters",
					 optionD: "",
					 questionId: 214,
					 helpText: "You can access the individual Character values for a String by iterating over the string with a for-in loop."),
			
			Question(question: ["What value will the \"string\" constant have?",
								"After compiling the following code, what value will \"string\" have?"],
					 image: "StringAndCharacters15",
					 optionA: "abc",
					 optionB: "a, b, c",
					 optionC: "[abc]",
					 optionD: "",
					 questionId: 215,
					 helpText: "String values can be constructed by passing an array of Character values as an argument to its initializer, so the value of the constant \"string\" will be \"abc\""),
			
			Question(question: ["What operator can be used to add or concatenate String values?",
								"String values can be concatenated using one of the following operators. Which one?"],
					 image: "",
					 optionA: "+",
					 optionB: "-",
					 optionC: "*",
					 optionD: "",
					 questionId: 216,
					 helpText: "String values can be added together (or concatenated) with the addition operator (+) to create a new String value."),
			
			Question(question: ["Can we append a String value to an existing String variable with the addition assignment operator \"+=\"?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "No, only with +",
					 optionD: "",
					 questionId: 217,
					 helpText: "Yes, you can append a String value to an existing String variable with the addition assignment operator (+=)"),
			
			Question(question: ["Can we append a Character value to a String variable with the String type’s append() method?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 218,
					 helpText: "You can append a Character value to a String variable with the String type’s append() method."),
			
			Question(question: ["Can we append a String or Character to an existing Character variable?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "Yes, if it's a variable",
					 optionD: "",
					 questionId: 219,
					 helpText: "You can’t append a String or Character to an existing Character variable, because a Character value must contain a single character only."),
			
			Question(question: ["A way to construct a new String value from a mix of constants, variables, literals, and expressions by including their values inside a string literal"],
					 image: "",
					 optionA: "String interpolation",
					 optionB: "String concatenation",
					 optionC: "Combining strings",
					 optionD: "",
					 questionId: 220,
					 helpText: "String interpolation is a way to construct a new String value from a mix of constants, variables, literals, and expressions by including their values inside a string literal. You can use string interpolation in both single-line and multiline string literals. Each item that you insert into the string literal is wrapped in a pair of parentheses, prefixed by a backslash."),
			
			Question(question: ["Every instance of Swift’s Character type represents ..."],
					 image: "",
					 optionA: "An extended grapheme cluster",
					 optionB: "A cluster of symbols",
					 optionC: "A collection",
					 optionD: "",
					 questionId: 221,
					 helpText: "Every instance of Swift’s Character type represents a single extended grapheme cluster. An extended grapheme cluster is a sequence of one or more Unicode scalars that (when combined) produce a single human-readable character."),
			
			Question(question: ["Can different characters or different representations of the same character require different amounts of memory in Swift?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 222,
					 helpText: "Extended grapheme clusters can be composed of multiple Unicode scalars. This means that different characters—and different representations of the same character—can require different amounts of memory to store. Because of this, characters in Swift don’t each take up the same amount of memory within a string’s representation. As a result, the number of characters in a string can’t be calculated without iterating through the string to determine its extended grapheme cluster boundaries."),
			
			Question(question: ["Use this property to access the position of the first Character in a String",
								"Which property can be used to access the position of the first Character in a String?",
								"The property used to access the position of the first Character in a String"],
					 image: "",
					 optionA: "startIndex",
					 optionB: "firstIndex",
					 optionC: "prefix",
					 optionD: "first",
					 questionId: 223,
					 helpText: "Use the startIndex property to access the position of the first Character of a String. The endIndex property is the position after the last character in a String. As a result, the endIndex property isn’t a valid argument to a string’s subscript. If a String is empty, startIndex and endIndex are equal."),
			
			Question(question: ["Use this property to access the position after the last Character in a String",
								"Which property can be used to access the position after the last Character in a String?",
								"The property used to access the position after the last Character in a String"],
					 image: "",
					 optionA: "endIndex",
					 optionB: "lastIndex",
					 optionC: "suffix",
					 optionD: "",
					 questionId: 224,
					 helpText: "The endIndex property is the position after the last character in a String. As a result, the endIndex property isn’t a valid argument to a string’s subscript."),
			
			Question(question: ["If a String is empty, startIndex and endIndex are ..."],
					 image: "",
					 optionA: "Equal",
					 optionB: "Unequal",
					 optionC: "Empty",
					 optionD: "Equal to nil",
					 questionId: 225,
					 helpText: "If a String is empty, startIndex and endIndex are equal."),
			
			Question(question: ["What methods can we use to access the index before and after the specified index?",
								"We can access the index before and after the specified index using these methods",
								"What methods can we use to access the index before and after the specified one?"],
					 image: "",
					 optionA: "index(before:) and index(after:)",
					 optionB: "indexBefore(of:) and indexAfter(of:)",
					 optionC: "before(index:) and after(index:)",
					 optionD: "",
					 questionId: 226,
					 helpText: "You access the indices before and after a given index using the index(before:) and index(after:) methods of String. "),
			
			Question(question: ["What do we get when we try to access a Character outside the range of a string?",
								"What will be the result of accessing a Character outside the range of a string?"],
					 image: "",
					 optionA: "Runtime error",
					 optionB: "nil",
					 optionC: "Compile-time error",
					 optionD: "String’s last value",
					 questionId: 227,
					 helpText: "Attempting to access an index outside of a string’s range or a Character at an index outside of a string’s range will trigger a runtime error."),
			
			Question(question: ["What character will be assigned to the \"character\" variable?"],
					 image: "StringAndCharacters26",
					 optionA: "h",
					 optionB: "t",
					 optionC: "e",
					 optionD: "",
					 questionId: 228,
					 helpText: "Correct answer: h."),
			
			Question(question: ["Can we use the startIndex property with any type that conforms to the Collection protocol?",
								"Can we use the endIndex property with any type that conforms to the Collection protocol?",
								"Can we use the index (before:), index (after:) and index (_: offsetBy :) methods with the Array, Dictionary, or Set types?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 229,
					 helpText: "You can use the startIndex and endIndex properties and the index(before:), index(after:), and index(_:offsetBy:) methods on any type that conforms to the Collection protocol. This includes String, as shown here, as well as collection types such as Array, Dictionary, and Set."),
			
			Question(question: ["A method that allows you to insert a character into a string at a specified index?",
								"Which method allows you to insert a character into a string at a specified index?",
								"How can we insert a character into the string at a specified index?"],
					 image: "",
					 optionA: "insert(_:at:)",
					 optionB: "insert(contentsOf:at:)",
					 optionC: "append()",
					 optionD: "",
					 questionId: 230,
					 helpText: "To insert a single character into a string at a specified index, use the insert(_:at:) method, and to insert the contents of another string at a specified index, use the insert(contentsOf:at:) method."),
			
			Question(question: ["A method that allows you to insert the contents of a string into another string at a specified index?",
								"Which method allows you to insert the contents of a string into another string at a specified index?",
								"How can we insert the contents of another string into another string at a specified index"],
					 image: "",
					 optionA: "insert(contentsOf:at:)",
					 optionB: "insert(_:at:)",
					 optionC: "append()",
					 optionD: "",
					 questionId: 231,
					 helpText: "To insert a single character into a string at a specified index, use the insert(_:at:) method, and to insert the contents of another string at a specified index, use the insert(contentsOf:at:) method."),
			
			Question(question: ["What value will the variable have after executing the code?"],
					 image: "StringAndCharacters30",
					 optionA: "Hey, you!",
					 optionB: "Hey! you,",
					 optionC: "Hey!, you",
					 optionD: "",
					 questionId: 232,
					 helpText: "Correct answer: Hey, you!."),
			
			Question(question: ["What value will the variable have after running this code snipped?"],
					 image: "StringAndCharacters31",
					 optionA: "Hell!o",
					 optionB: "Hello !",
					 optionC: "Hello!",
					 optionD: "",
					 questionId: 233,
					 helpText: "Correct answer: Hell!o"),
			
			Question(question: ["A method that allows you to remove a character from a string at a specified index?",
								"Which method allows you to delete a character at a specified index?",
								"With this method we can remove a character from a specified index"],
					 image: "",
					 optionA: "remove(at:)",
					 optionB: "removeSubrange(_:)",
					 optionC: "delete(at:)",
					 optionD: "",
					 questionId: 234,
					 helpText: "To remove a single character from a string at a specified index, use the remove(at:) method, and to remove a substring at a specified range, use the removeSubrange(_:) method."),
			
			Question(question: ["How to remove values from a string at a specified range of indices?",
								"How can we remove values from a string at a specified range of indices?"],
					 image: "",
					 optionA: "removeSubrange(_:)",
					 optionB: "remove(at:)",
					 optionC: "delete(at:)",
					 optionD: "",
					 questionId: 235,
					 helpText: "To remove a single character from a string at a specified index, use the remove(at:) method, and to remove a substring at a specified range, use the removeSubrange(_:) method."),
			
			Question(question: ["Can we use the insert(_:at:) and insert(contentsOf:at:) methods with any types that conform to the RangeReplaceableCollection protocol?",
								"Can we use the insert(_:at:), insert(contentsOf:at:) methods with any types that conform to the RangeReplaceableCollection protocol?",
								"Can we use the remove(at:) and removeSubrange(_:) methods with the Array, Dictionary, and Set types?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 236,
					 helpText: "You can use the insert(_:at:), insert(contentsOf:at:), remove(at:), and removeSubrange(_:) methods on any type that conforms to the RangeReplaceableCollection protocol. This includes String, as well as collection types such as Array, Dictionary, and Set."),
			
			Question(question: ["What value will we get after running the following code?"],
					 image: "StringAndCharacters35",
					 optionA: "Hello",
					 optionB: "Hello!",
					 optionC: "Hello there",
					 optionD: "there!",
					 questionId: 237,
					 helpText: "Correct answer: Hello."),
			
			Question(question: ["Are substrings suitable for long-term storage?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 238,
					 helpText: "Substrings aren’t suitable for long-term storage—because they reuse the storage of the original string, the entire original string must be kept in memory as long as any of its substrings are being used."),
			
			Question(question: ["Each substring has a region of memory where the characters that make up the substring are stored. Is that true?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 239,
					 helpText: "Like strings, each substring has a region of memory where the characters that make up the substring are stored. The difference between strings and substrings is that, as a performance optimization, a substring can reuse part of the memory that’s used to store the original string, or part of the memory that’s used to store another substring. (Strings have a similar optimization, but if two strings share memory, they are equal.)"),
			
			Question(question: ["How many ways to compare textual values does Swift provide?",
								"The number of ways to compare textual values in Swift",
								"How many different options do you have to compare Swift’s textual values?"],
					 image: "",
					 optionA: "Three",
					 optionB: "Two",
					 optionC: "Eleven",
					 optionD: "",
					 questionId: 240,
					 helpText: "Swift provides three ways to compare textual values: string and character equality, prefix equality, and suffix equality."),
			
			Question(question: ["What operators can be used to check equality of strings and characters?",
								"Two strings can be checked for equality with these two comparison operators",
								"Choose the operators that we can use to check if two strings or two characters are equal or not?"],
					 image: "",
					 optionA: "== and !=",
					 optionB: "== and !==",
					 optionC: "= and !=",
					 optionD: ">= and <=",
					 questionId: 241,
					 helpText: "String and character equality is checked with the “equal to” operator (==) and the “not equal to” operator (!=). Two String values (or two Character values) are considered equal if their extended grapheme clusters are canonically equivalent. Extended grapheme clusters are canonically equivalent if they have the same linguistic meaning and appearance, even if they’re composed from different Unicode scalars behind the scenes."),
			
			Question(question: ["Does string and character comparisons are locale-sensitive?",
								"Does string comparisons are locale-sensitive?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 242,
					 helpText: "String and character comparisons in Swift are not locale-sensitive."),
			
			Question(question: ["What methods can you use to check if a string has a specific string prefix or suffix?",
								"You can check the presence of a certain suffix and prefix in a string using ... methods"],
					 image: "",
					 optionA: "hasPrefix(_:) and hasSuffix(_:)",
					 optionB: "prefix() and suffix()",
					 optionC: "hasPref(_:) and hasSuff(_:)",
					 optionD: "",
					 questionId: 243,
					 helpText: "To check whether a string has a particular string prefix or suffix, call the string’s hasPrefix(_:) and hasSuffix(_:) methods, both of which take a single argument of type String and return a Boolean value."),
			
			Question(question: ["Are empty strings considered string literals?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 244,
					 helpText: "An empty string is a string literal. You can pass it as a value to a text data type parameter."),
			
			Question(question: ["Does the String(_:) initializer accept floating point number literal?",
								"Can we pass a value of an arbitrary data type to the String(_:) initializer?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "Only another string",
					 optionD: "",
					 questionId: 245,
					 helpText: "Swift allows you to pass an arbitrary value to the String(_:) initialization method. This initializer can receive as input not only a text value, but also a variable of an arbitrary data type (for example, Double). This function converts the value passed to it to String. A similar mechanism exists for the types Float(_:), Double(_:), or Int(_:).")
		]
	}
	
	
	///
	
	
	static func getDemoQuestions() -> [Question] {
		return [
			Question(question: ["A string is a series of ...",
								"Continue: a string is a collection ...",
								"A string is a collection of what elements?"],
					 image: "",
					 optionA: "Characters",
					 optionB: "Words",
					 optionC: "Letters",
					 optionD: "",
					 questionId: 201,
					 helpText: "A string is a series of characters, such as \"hello, world\" or \"albatross\". Swift strings are represented by the String type. The contents of a String can be accessed in various ways, including as a collection of Character values."),
			
			Question(question: ["The type of strings in Swift",
								"Which type all Swift’s strings belong to?"],
					 image: "",
					 optionA: "String",
					 optionB: "Character",
					 optionC: "",
					 optionD: "",
					 questionId: 202,
					 helpText: "Swift strings are represented by the String type."),
			
			Question(question: ["A sequence of characters surrounded by double quotation marks",
								"Several characters surrounded by double quotation marks",
								"The literal that consists of a sequence of characters"],
					 image: "",
					 optionA: "String literal",
					 optionB: "Array literal",
					 optionC: "Literal",
					 optionD: "",
					 questionId: 203,
					 helpText: "You can include predefined String values within your code as string literals. A string literal is a sequence of characters surrounded by double quotation marks (\"). You can use a string literal as an initial value for a constant or variable."),
			
			Question(question: ["How many double quotation marks should we use when opening and closing a multiline string literal?",
								"How many double quotation marks surround a multiline string literal?",
								"The number of double quotation marks we put while opening and closing a multiline string literal"],
					 image: "",
					 optionA: "3",
					 optionB: "2",
					 optionC: "1",
					 optionD: "4",
					 questionId: 204,
					 helpText: "If you need a string that spans several lines, use a multiline string literal—a sequence of characters surrounded by three double quotation marks. A multiline string literal includes all of the lines between its opening and closing quotation marks. The string begins on the first line after the opening quotation marks (\"\"\") and ends on the line before the closing quotation marks, which means that neither of the strings below start or end with a line break"),
			
			Question(question: ["What character adds a line break in a multiline string literal, and it does it only in code allowing you not to display the line break as part of the string value of this line?"],
					 image: "",
					 optionA: "Backslash",
					 optionB: "Asterisk",
					 optionC: "Dash",
					 optionD: "",
					 questionId: 205,
					 helpText: "When your source code includes a line break inside of a multiline string literal, that line break also appears in the string’s value. If you want to use line breaks to make your source code easier to read, but you don’t want the line breaks to be part of the string’s value, write a backslash at the end of those lines. To simplify - Use it if you want to wrap a line inside your code to make it more readable, but don't want that line to wrap as well after compilation."),
			
			Question(question: ["How can you include several special characters in a string without invoking their effect?"],
					 image: "",
					 optionA: "Surround a string literal with #",
					 optionB: "Surround a string literal with backslashes",
					 optionC: "Through shielding",
					 optionD: "",
					 questionId: 206,
					 helpText: "You can place a string literal within extended delimiters to include special characters in a string without invoking their effect. You place your string within quotation marks (\") and surround that with number signs (#)."),
			
			Question(question: ["How can you initialize an empty string with initializer syntax?",
								"How is an empty String type initialized with initializer syntax?",
								"This is exactly how an empty string is initialized with initializer syntax"],
					 image: "",
					 optionA: "= String()",
					 optionB: "= [String]",
					 optionC: "= (String)",
					 optionD: "",
					 questionId: 207,
					 helpText: "To create an empty String value as the starting point for building a longer string, either assign an empty string literal to a variable: var emptyString = \"\", or initialize a new String instance with initializer syntax: var anotherEmptyString = String()"),
			
			Question(question: ["How can you initialize an empty string with an empty string literal?",
								"How is an empty String type initialized with an empty string literal?",
								"An empty string is initialized with an empty string literal this way"],
					 image: "",
					 optionA: "var emptyString = \"\"",
					 optionB: "var emptyString = String()",
					 optionC: "var emptyString = String(\"\")",
					 optionD: "",
					 questionId: 208,
					 helpText: "To create an empty String value as the starting point for building a longer string, either assign an empty string literal to a variable: var emptyString = \"\", or initialize a new String instance with initializer syntax: var anotherEmptyString = String()"),
			
			Question(question: ["Through which String’s property can we find out if a string is empty?",
								"How do you know if a string is empty?",
								"Through this property we can check if a String value is empty"],
					 image: "",
					 optionA: ".isEmpty",
					 optionB: ".count",
					 optionC: ".capacity",
					 optionD: ".removeRange",
					 questionId: 209,
					 helpText: "Find out whether a String value is empty by checking its Boolean isEmpty property."),
			
			Question(question: ["What result can be returned after applying the .isEmpty property to a string?",
								"The .isEmpty property applied to a string returns ... ",
								"What the result of .isEmpty property we expect to get when applying it to a String value?"],
					 image: "",
					 optionA: "true or false",
					 optionB: "1 or 0",
					 optionC: "number of characters",
					 optionD: "",
					 questionId: 210,
					 helpText: "Find out whether a String value is empty by checking its Boolean isEmpty property, it returns true or false."),
			
			Question(question: ["What do we need to assign the String value to so that it can be modified?",
								"How to assign a String value so that we can change it later?",
								"In order to modify a String value, what should we assign it to?"],
					 image: "",
					 optionA: "To a variable",
					 optionB: "To a constant",
					 optionC: "To a NSMutableString",
					 optionD: "",
					 questionId: 211,
					 helpText: "You indicate whether a particular String can be modified (or mutated) by assigning it to a variable (in which case it can be modified), or to a constant (in which case it can’t be modified)."),
			
			Question(question: ["What happens to the value of a String type when it is passed to a function or method?",
								"When assigning an existing String to another variable, what happens to the String’s value?",
								"What happens when a String value is assigned to a new constant?"],
					 image: "",
					 optionA: "The value is copied",
					 optionB: "We assign the reference",
					 optionC: "",
					 optionD: "",
					 questionId: 212,
					 helpText: "Swift’s String type is a value type. If you create a new String value, that String value is copied when it’s passed to a function or method, or when it’s assigned to a constant or variable. In each case, a new copy of the existing String value is created, and the new copy is passed or assigned, not the original version."),
			
			Question(question: ["Сan you be confident that you are passed by a function won’t be modified unless you modify it yourself?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 213,
					 helpText: "Swift’s copy-by-default String behavior ensures that when a function or method passes you a String value, it’s clear that you own that exact String value, regardless of where it came from. You can be confident that the string you are passed won’t be modified unless you modify it yourself."),
			
			Question(question: ["What can we access by iterating through a string inside the for-in loop?",
								"What can you access when iterating a String value inside a for-in loop?"],
					 image: "",
					 optionA: "Individual Character values",
					 optionB: "A specific letter",
					 optionC: "The number of characters",
					 optionD: "",
					 questionId: 214,
					 helpText: "You can access the individual Character values for a String by iterating over the string with a for-in loop."),
			
			Question(question: ["What value will the \"string\" constant have?",
								"After compiling the following code, what value will \"string\" have?"],
					 image: "StringAndCharacters15",
					 optionA: "abc",
					 optionB: "a, b, c",
					 optionC: "[abc]",
					 optionD: "",
					 questionId: 215,
					 helpText: "String values can be constructed by passing an array of Character values as an argument to its initializer, so the value of the constant \"string\" will be \"abc\""),
			
			Question(question: ["What operator can be used to add or concatenate String values?",
								"String values can be concatenated using one of the following operators. Which one?"],
					 image: "",
					 optionA: "+",
					 optionB: "-",
					 optionC: "*",
					 optionD: "",
					 questionId: 216,
					 helpText: "String values can be added together (or concatenated) with the addition operator (+) to create a new String value."),
			
			Question(question: ["Can we append a String value to an existing String variable with the addition assignment operator \"+=\"?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "No, only with +",
					 optionD: "",
					 questionId: 217,
					 helpText: "Yes, you can append a String value to an existing String variable with the addition assignment operator (+=)"),
			
			Question(question: ["Can we append a Character value to a String variable with the String type’s append() method?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 218,
					 helpText: "You can append a Character value to a String variable with the String type’s append() method."),
			
			Question(question: ["Can we append a String or Character to an existing Character variable?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "Yes, if it's a variable",
					 optionD: "",
					 questionId: 219,
					 helpText: "You can’t append a String or Character to an existing Character variable, because a Character value must contain a single character only."),
			
			Question(question: ["A way to construct a new String value from a mix of constants, variables, literals, and expressions by including their values inside a string literal"],
					 image: "",
					 optionA: "String interpolation",
					 optionB: "String concatenation",
					 optionC: "Combining strings",
					 optionD: "",
					 questionId: 220,
					 helpText: "String interpolation is a way to construct a new String value from a mix of constants, variables, literals, and expressions by including their values inside a string literal. You can use string interpolation in both single-line and multiline string literals. Each item that you insert into the string literal is wrapped in a pair of parentheses, prefixed by a backslash."),
			
			Question(question: ["Every instance of Swift’s Character type represents ..."],
					 image: "",
					 optionA: "An extended grapheme cluster",
					 optionB: "A cluster of symbols",
					 optionC: "A collection",
					 optionD: "",
					 questionId: 221,
					 helpText: "Every instance of Swift’s Character type represents a single extended grapheme cluster. An extended grapheme cluster is a sequence of one or more Unicode scalars that (when combined) produce a single human-readable character."),
			
			Question(question: ["Can different characters or different representations of the same character require different amounts of memory in Swift?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 222,
					 helpText: "Extended grapheme clusters can be composed of multiple Unicode scalars. This means that different characters—and different representations of the same character—can require different amounts of memory to store. Because of this, characters in Swift don’t each take up the same amount of memory within a string’s representation. As a result, the number of characters in a string can’t be calculated without iterating through the string to determine its extended grapheme cluster boundaries."),
			
			Question(question: ["Use this property to access the position of the first Character in a String",
								"Which property can be used to access the position of the first Character in a String?",
								"The property used to access the position of the first Character in a String"],
					 image: "",
					 optionA: "startIndex",
					 optionB: "firstIndex",
					 optionC: "prefix",
					 optionD: "first",
					 questionId: 223,
					 helpText: "Use the startIndex property to access the position of the first Character of a String. The endIndex property is the position after the last character in a String. As a result, the endIndex property isn’t a valid argument to a string’s subscript. If a String is empty, startIndex and endIndex are equal."),
			
			Question(question: ["Use this property to access the position after the last Character in a String",
								"Which property can be used to access the position after the last Character in a String?",
								"The property used to access the position after the last Character in a String"],
					 image: "",
					 optionA: "endIndex",
					 optionB: "lastIndex",
					 optionC: "suffix",
					 optionD: "",
					 questionId: 224,
					 helpText: "The endIndex property is the position after the last character in a String. As a result, the endIndex property isn’t a valid argument to a string’s subscript."),
			
			Question(question: ["If a String is empty, startIndex and endIndex are ..."],
					 image: "",
					 optionA: "Equal",
					 optionB: "Unequal",
					 optionC: "Empty",
					 optionD: "Equal to nil",
					 questionId: 225,
					 helpText: "If a String is empty, startIndex and endIndex are equal."),
			
			Question(question: ["What methods can we use to access the index before and after the specified index?",
								"We can access the index before and after the specified index using these methods",
								"What methods can we use to access the index before and after the specified one?"],
					 image: "",
					 optionA: "index(before:) and index(after:)",
					 optionB: "indexBefore(of:) and indexAfter(of:)",
					 optionC: "before(index:) and after(index:)",
					 optionD: "",
					 questionId: 226,
					 helpText: "You access the indices before and after a given index using the index(before:) and index(after:) methods of String. "),
			
			Question(question: ["What do we get when we try to access a Character outside the range of a string?",
								"What will be the result of accessing a Character outside the range of a string?"],
					 image: "",
					 optionA: "Runtime error",
					 optionB: "nil",
					 optionC: "Compile-time error",
					 optionD: "String’s last value",
					 questionId: 227,
					 helpText: "Attempting to access an index outside of a string’s range or a Character at an index outside of a string’s range will trigger a runtime error."),
			
			Question(question: ["What character will be assigned to the \"character\" variable?"],
					 image: "StringAndCharacters26",
					 optionA: "h",
					 optionB: "t",
					 optionC: "e",
					 optionD: "",
					 questionId: 228,
					 helpText: "Correct answer: h."),
			
			Question(question: ["Can we use the startIndex property with any type that conforms to the Collection protocol?",
								"Can we use the endIndex property with any type that conforms to the Collection protocol?",
								"Can we use the index (before:), index (after:) and index (_: offsetBy :) methods with the Array, Dictionary, or Set types?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 229,
					 helpText: "You can use the startIndex and endIndex properties and the index(before:), index(after:), and index(_:offsetBy:) methods on any type that conforms to the Collection protocol. This includes String, as shown here, as well as collection types such as Array, Dictionary, and Set."),
			
			Question(question: ["A method that allows you to insert a character into a string at a specified index?",
								"Which method allows you to insert a character into a string at a specified index?",
								"How can we insert a character into the string at a specified index?"],
					 image: "",
					 optionA: "insert(_:at:)",
					 optionB: "insert(contentsOf:at:)",
					 optionC: "append()",
					 optionD: "",
					 questionId: 230,
					 helpText: "To insert a single character into a string at a specified index, use the insert(_:at:) method, and to insert the contents of another string at a specified index, use the insert(contentsOf:at:) method.")
		]
	}
}
