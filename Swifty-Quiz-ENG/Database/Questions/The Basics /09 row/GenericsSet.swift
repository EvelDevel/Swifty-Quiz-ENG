
//  Created by Евгений Никитин on 12.05.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

// MARK:  Вопросы (id) с 2101 по 2200

class GenericsSet {
    static func getQuestions() -> [Question] {
        return [
            Question(question: ["Как \"Универсальные шаблоны\" будет по английски?"],
                     image: "",
                     optionA: "Generics",
                     optionB: "Closures",
                     optionC: "Subscripts",
                     optionD: "Collections",
                     questionId: 2101,
                     helpText: "Правильный ответ: Generics."),
            
            Question(question: ["Что вы можете создавать с помощью универсальных шаблонов?",
                                "Что помогают реализовать универсальные шаблоны?",
                                "Универсальные шаблоны помогают реализовывать это"],
                     image: "",
                     optionA: "Гибкие функции",
                     optionB: "Коллекции",
                     optionC: "Переменные свойства",
                     optionD: "Архитектуру",
                     questionId: 2102,
                     helpText: "Универсальный код позволяет вам писать гибкие, общего назначения функции и типы, которые могут работать с любыми другими типами, с учетом требований, которые вы определили. Вы можете написать код, который не повторяется и выражает свой контент в ясной абстрактной форме."),
            
            Question(question: ["Используются ли универсальные шаблоны в библиотеках Swift?",
                                "Swift использует в своих библиотеках универсальные шаблоны. Так ли это?",
                                "Как вы думаете, используются ли универсальные шаблоны в стандартных библиотеках Swift?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "",
                     optionD: "",
                     questionId: 2103,
                     helpText: "Универсальные шаблоны одна из самых мощных особенностей Swift, и большая часть всех библиотек Swift построена на основе универсального кода. На самом деле вы используете универсальный код все время, даже если вы этого не осознаете."),
            
            Question(question: ["Являются ли Swift Array универсальными?",
                                "Являются ли Dictionary универсальными?",
                                "Являются ли коллекции Swift Array или Dictionary универсальными?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "Только Dictionary",
                     optionD: "Только Array",
                     questionId: 2104,
                     helpText: "Коллекции Swift Array или Dictionary являются универсальными. Вы можете создать массив, который содержит значения типа Int или массив, который содержит значения String, или на самом деле любой другой массив, который может содержать любой другой тип. Аналогично вы создаете словарь, который может содержать значения разных типов, и нет никакого ограничения по типу хранящихся значений."),
            
            Question(question: ["С какими типами могут работать универсальные функции?",
                                "Универсальные функции могут работать с этими типами"],
                     image: "",
                     optionA: "С любыми",
                     optionB: "С числовыми",
                     optionC: "С текстовыми",
                     optionD: "Со ссылочными",
                     questionId: 2105,
                     helpText: "Универсальные функции могут работать с любыми типами."),
            
            Question(question: ["Универсальные функции используют заполнитель имени типа, как он традиционно записывается?"],
                     image: "",
                     optionA: "<T>",
                     optionB: "T",
                     optionC: "(T)",
                     optionD: "",
                     questionId: 2106,
                     helpText: "Универсальная функция использует заполнитель имени типа <T> вместо текущего имени типа (Int, String, Double…). Заполнитель имени типа ничего не говорит о том, чем должно являться T, но он говорит о том, что все входящие параметры функции должны быть одного типа T, независимо от того, что такое T. Текущий тип T будет определяться каждый раз, как вызывается функция. Когда между параметром типа и функцией нет значимых отношений, то по традиции именами становятся отдельные буквы, такие как T, U, V."),
            
            Question(question: ["В какой момент выводится тип <T> у универсальных функций?"],
                     image: "",
                     optionA: "Во время вызова функции",
                     optionB: "Когда запускается тело",
                     optionC: "После завершения ее работы",
                     optionD: "Когда объявляем",
                     questionId: 2107,
                     helpText: "Каждый раз при вызове универсальной функции тип Т выводится из типов, которые передаются в эту функцию."),
            
            Question(question: ["Что здесь является параметром типа?"],
                     image: "Generics8",
                     optionA: "<T>",
                     optionB: "_ a: inout T",
                     optionC: "_ b: inout T",
                     optionD: "temporaryA",
                     questionId: 2108,
                     helpText: "В этом примере, в функции swapTwoValues(_:_:) заполнитель имени типа T - пример параметра типа. Параметры типа определяют и называют тип наполнителя, и пишутся сразу после имени функции, между угловыми скобками (например, <T>). Как только вы определили параметр типа, то вы можете использовать его в качестве типа параметра функции или как возвращаемый функциональный тип, или как аннотация типа внутри тела функции. В каждом случае заполнитель типа отображается параметром типа, который заменяется на актуальное значение типа при вызове функции."),
            
            Question(question: ["Можем ли мы использовать несколько параметров типа?",
                                "Мы можем использовать больше одного параметра типа, записав их через запятую. Это так?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "",
                     optionD: "",
                     questionId: 2109,
                     helpText: "Вы можете использовать несколько параметров типа, просто вписав их в угловых скобках через запятую."),
            
            Question(question: ["В каком стиле мы должны записывать параметры типа?",
                                "В параметрах типа имена записываются в этом стиле"],
                     image: "",
                     optionA: "Upper Camel Case",
                     optionB: "Lower Camel Case",
                     optionC: "Без разницы",
                     optionD: "",
                     questionId: 2110,
                     helpText: "Всегда давайте параметрам типа имена \"горбатого\" верхнего регистра (Upper Camel Case), чтобы указать, что они являются заполнителем для типа, а не значением. Например <T> или <Parameters>."),
            
            Question(question: ["Можем ли мы определять наши универсальные типы?",
                                "Позволяет ли Swift, в дополнении к универсальным функциям, определять универсальные типы?",
                                "Можете ли вы определять универсальные типы в Swift?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "",
                     optionD: "",
                     questionId: 2111,
                     helpText: "В дополнение к универсальным функциям, Swift позволяет вам определять ваши универсальные типы. Это к примеру универсальные классы, структуры и перечисления, которые могут работать с любыми типами, наподобие тому, как работают Array или Dictionary."),
            
            Question(question: ["Можем ли мы расширять универсальный тип?",
                                "Можете ли вы расширить универсальный тип?",
                                "Универсальный тип может быть расширен. Так ли это?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "",
                     optionD: "",
                     questionId: 2112,
                     helpText: "Да. Когда вы расширяете универсальный тип, вы не обеспечиваете список параметров в качестве определения расширения. Вместо этого, список параметров типа, из исходного определения типа, доступен внутри тела расширения, а имена исходных параметров типа используются для ссылки на параметры типа из исходного определения."),
            
            Question(question: ["Когда вы расширяете универсальный тип, должны ли вы обеспечивать список параметров этого типа в качестве определения расширения?",
                                "Чтобы пользоваться параметрами универсального типа, при его расширении, должны ли вы его явно обеспечивать в качестве определения расширения?"],
                     image: "",
                     optionA: "Нет",
                     optionB: "Да",
                     optionC: "",
                     optionD: "",
                     questionId: 2113,
                     helpText: "Когда вы расширяете универсальный тип, вы не обеспечиваете список параметров в качестве определения расширения. Вместо этого, список параметров типа, из исходного определения типа, доступен внутри тела расширения, а имена исходных параметров типа используются для ссылки на параметры типа из исходного определения."),
            
            Question(question: ["Как называется процесс, при котором мы говорим универсальному типу, что его параметры должны наследовать от определенного класса или соответствовать определенному протоколу или композиции протоколов."],
                     image: "",
                     optionA: "Ограничения типа",
                     optionB: "Сужение типа",
                     optionC: "Границы типа",
                     optionD: "Оговорка типа",
                     questionId: 2114,
                     helpText: "Иногда бывает нужно внедрить определенные ограничения типа на типы, которые могут быть использованы вместе с универсальными функциями или универсальными типами. Ограничения типа указывают на то, что параметры типа должны наследовать от определенного класса или соответствовать определенному протоколу или композиции протоколов. Для примера возьмем тип Dictionary, который имеет некоторые ограничения типов, которые могут быть использованы в качестве ключей. Как было описано в главе Словари, тип ключа словаря должен быть хешируемым. Таким образом он должен предоставить способ представить себя уникальным."),
            
            Question(question: ["Можем ли мы определять свои собственные ограничения типа, когда создаем пользовательские универсальные классы?",
                                "Когда вы создаете пользовательские классы, вы можете определить свои собственные ограничения типа. Так ли это?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "",
                     optionD: "",
                     questionId: 2115,
                     helpText: "Вы можете определить свои собственные ограничения типа, когда создаете пользовательские универсальные классы, и эти ограничения предоставляют еще больше возможностей универсальному программированию. Абстрактные понятия, как Hashable, характеризуют типы с точки зрения их концептуальных характеристик, а не их явного типа."),
            
            Question(question: ["Выберите вариант с корректным ограничением типа, когда мы требуем чтобы параметр был подклассом другого класса"],
                     image: "",
                     optionA: "<T: SomeClass>",
                     optionB: "<T> - SomeClass",
                     optionC: "<T(Someclass)>",
                     optionD: "",
                     questionId: 2116,
                     helpText: "Вы пишете ограничения типа, поместив ограничение единственного класса или протокола после имени параметра типа, и разделив их между собой запятыми, обозначая их в качестве части списка параметров. func someFunction<T: SomeClass, U: SomeProtocol>(someT: T, someU: U) { // тело функции… }. Эта гипотетическая функция имеет два параметра типа. Первый параметр типа - T, имеет ограничение типа, которое требует чтобы T, было подклассом класса SomeClass. Второй параметр типа - U, имеет ограничение типа, которое требует чтобы U соответствовал протоколу SomeProtocol."),
            
            Question(question: ["Какое ограничение типа необходимо присвоить универсальному типу <T>, чтобы он мог реализовывать поддержку операторов равенства и неравенства?"],
                     image: "",
                     optionA: "Протокол Equatable",
                     optionB: "Hashable",
                     optionC: "Любой суперкласс",
                     optionD: "",
                     questionId: 2117,
                     helpText: "Стандартная библиотека Swift определяет протокол Equatable, который требует любой соответствующий ей тип реализовывать равенство оператору равенства (==) и реализовывать неравенство оператору неравенства (!=), для того, чтобы значения этих типов можно было сравнивать между собой. Все стандартные типы Swift автоматически поддерживают протокол Equatable. Любой тип, который удовлетворяет протоколу Equatable, может быть безопасно использован, потому что гарантирована поддержка оператора равенства и неравенства."),
            
            Question(question: ["Каким ключевым словом можно добавить связанный тип к протоколу?"],
                     image: "",
                     optionA: "associatedtype",
                     optionB: "mutating",
                     optionC: "subscript",
                     optionD: "append",
                     questionId: 2118,
                     helpText: "Правильный ответ: associatedtype. При определении протокола бывает нужно определить еще один или более связанных типов в качестве части определения протокола. Связанный тип дает плейсхолдер имени типу, который используется как часть протокола. Фактический тип, который будет использоваться связанным типом не указывается до тех пор, пока не будет принят протокол. Связанные типы указываются при помощи ключевого слова associatedtype."),
            
            //            Question(question: ["",
            //                                "",
            //                                ""],
            //                     image: "",
            //                     optionA: "",
            //                     optionB: "",
            //                     optionC: "",
            //                     optionD: "",
            //
            //                     questionId: 2119,
            //                     helpText: ""),
        ]
    }
}
