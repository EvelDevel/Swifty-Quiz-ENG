
//  Created by Евгений Никитин on 11.05.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

// MARK: 07 - Вопросы (id) с 601 по 700

class ClosuresSet {
	static func getQuestions() -> [Question] {
		return [
			Question(question: ["Сan you pass around closures as values in your code?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 602,
					 helpText: "Closures are self-contained blocks of functionality that can be passed around and executed later on in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages."),
			
			Question(question: ["What can closures do with references to constants and variables?"],
					 image: "",
					 optionA: "Capture and store it",
					 optionB: "Process it",
					 optionC: "Swap it",
					 optionD: "",
					 questionId: 603,
					 helpText: "Closures can capture and store references to any constants and variables from the context in which they are defined. This is known as closing over those constants and variables. Swift handles all of the memory management of capturing for you."),
			
			Question(question: ["Does Swift handle all of the memory management of capturing (closing over constants and variables) for you?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 60300,
					 helpText: "Closures can capture and store references to any constants and variables from the context in which they are defined. This is known as closing over those constants and variables. Swift handles all of the memory management of capturing for you."),
			
			Question(question: ["Are global functions special cases of closures?",
								"Are nested functions special cases of closures?",
								"Global and nested functions are actually special cases of closures. Is that true?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 604,
					 helpText: "Global and nested functions are actually special cases of closures."),
			
			Question(question: ["Closures take one of ... forms in Swift",
								"How many forms do closures take in Swift?"],
					 image: "",
					 optionA: "Three",
					 optionB: "Two",
					 optionC: "Four",
					 optionD: "One",
					 questionId: 605,
					 helpText: "Closures take one of three forms: 1. Global functions are closures that have a name and don’t capture any values. 2. Nested functions are closures that have a name and can capture values from their enclosing function. 3. Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context."),
			
			Question(question: ["Closures that have a name and don’t capture any values are ...",
								"Which of the following are closures that have a name and don’t capture any values?"],
					 image: "",
					 optionA: "Global functions",
					 optionB: "Nested functions",
					 optionC: "Unnamed closures",
					 optionD: "",
					 questionId: 60500,
					 helpText: "Global functions are closures that have a name and don’t capture any values."),
			
			Question(question: ["Closures that have a name and can capture values from their enclosing function are ...",
								"Which of these can be defined as closures that have a name and can capture values from their enclosing function?"],
					 image: "",
					 optionA: "Nested functions",
					 optionB: "Global functions",
					 optionC: "Unnamed closures",
					 optionD: "Closure expressions",
					 questionId: 60501,
					 helpText: "Nested functions are closures that have a name and can capture values from their enclosing function."),
			
			Question(question: ["How can we call unnamed closures written in a lightweight syntax",
								"Unnamed closures written in a lightweight syntax that can capture values from their surrounding context are ..."],
					 image: "",
					 optionA: "Closure expressions",
					 optionB: "Nested functions",
					 optionC: "Global functions",
					 optionD: "Untamed closures",
					 questionId: 60502,
					 helpText: "Closure expressions are unnamed closures written in a lightweight syntax that can capture values from their surrounding context."),
			
			Question(question: ["How many points does Swift closure optimization include?",
								"There are several ways to optimize closure syntax. How many closure-related optimization options does Swift offer?"],
					 image: "",
					 optionA: "Four",
					 optionB: "Three",
					 optionC: "Five",
					 optionD: "Zero",
					 questionId: 606,
					 helpText: "Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include: 1. Inferring parameters and return value types from context. 2. Implicit returns from single-expression closures. 3. Shorthand argument names. 4. Trailing closure syntax."),
			
			Question(question: ["Can Swift infer parameters and return value types in closures from context?",
								"Can you omit returns in single-expression closures?",
								"Can you use shorthand argument names in closures?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 60600,
					 helpText: "Swift’s closure expressions have a clean, clear style, with optimizations that encourage brief, clutter-free syntax in common scenarios. These optimizations include: 1. Inferring parameters and return value types from context. 2. Implicit returns from single-expression closures. 3. Shorthand argument names. 4. Trailing closure syntax."),
			
			Question(question: ["Swift’s standard library provides a method that sorts an array of values of a known type, based on the output of a closure that you provide. Which answer refers to that method?",
								"Which method, once it completes the sorting process, returns a new array of the same type and size as the old one, with its elements in the correct order?"],
					 image: "",
					 optionA: "sorted(by:)",
					 optionB: "filter()",
					 optionC: "joined()",
					 optionD: "reordered(by:)",
					 questionId: 607,
					 helpText: "Swift’s standard library provides a method called sorted(by:), which sorts an array of values of a known type, based on the output of a sorting closure that you provide. Once it completes the sorting process, the sorted(by:) method returns a new array of the same type and size as the old one, with its elements in the correct sorted order. The original array is not modified by the sorted(by:) method."),
			
			Question(question: ["Which one is the preferable way to provide the sorting closure as an argument to the sorted(by:) method?"],
					 image: "",
					 optionA: "Closure expression",
					 optionB: "Take any existing function",
					 optionC: "Write a normal function",
					 optionD: "",
					 questionId: 608,
					 helpText: "One way to provide the sorting closure is to write a normal function of the correct type, and to pass it in as an argument to the sorted(by:) method. However, this is a rather long-winded way to write what is essentially a single-expression function (a > b). So, it would be preferable to write the sorting closure inline, using closure expression syntax."),
			
			Question(question: ["Can we use in-out parameters in closure expression syntax?",
								"Is it correct that closure expressions support in-out parameters?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 609,
					 helpText: "The parameters in closure expression syntax can be in-out parameters, but they can’t have a default value. "),
			
			Question(question: ["Can we assign default values to parameters of a closure?",
								"Can closure parameters take default values?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 610,
					 helpText: "The parameters in closure expression syntax can be in-out parameters, but they can’t have a default value. "),
			
			Question(question: ["Can we use variadic parameters in closure expression syntax?",
								"Can we use tuples in closure expression syntax as a parameter type?",
								"Can we use tuples in closure expression syntax as a return type?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 611,
					 helpText: "Variadic parameters can be used if you name the variadic parameter. Tuples can also be used as parameter types and return types."),
			
			Question(question: ["For the inline closure expression, the parameters and return type are written this way",
								"How must we introduce the parameters and return type while working with inline closure expressions?"],
					 image: "",
					 optionA: "Inside the curly braces",
					 optionB: "Outside the curly braces",
					 optionC: "It doesn't matter",
					 optionD: "",
					 questionId: 612,
					 helpText: "For the inline closure expression, the parameters and return type are written inside the curly braces, not outside of them."),
			
			Question(question: ["The start of the closure’s body is introduced by this keyword",
								"Closure's body starts after this keyword",
								"Which keyword do you use to introduce a closure's body?"],
					 image: "",
					 optionA: "in",
					 optionB: "out",
					 optionC: "after",
					 optionD: "for",
					 questionId: 613,
					 helpText: "The start of the closure’s body is introduced by the in keyword. This keyword indicates that the definition of the closure’s parameters and return type has finished, and the body of the closure is about to begin."),
			
			Question(question: ["Can Swift infer the types of closure expression parameters and the type of the value it returns?",
								"When all of the types in closure expression are inferred, can we omit the return arrow (->)?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 614,
					 helpText: "When a closure is passed as an argument to a method, Swift can infer the types of its parameters and the type of the value it returns. For instance, if the sorted(by:) method is being called on an array of strings, its argument must be a function of type (String, String) -> Bool. This means that the (String, String) and Bool types don’t need to be written as part of the closure expression’s definition. Because all of the types can be inferred, the return arrow (->) and the parentheses around the names of the parameters can also be omitted."),
			
			Question(question: ["You can make the types explicit if you wish, and doing so is encouraged to ...",
								"Which of these is the main reason of making a closure’s types explicit?"],
					 image: "",
					 optionA: "Avoid ambiguity",
					 optionB: "Speed-up the closure",
					 optionC: "Explicit indication of types is required",
					 optionD: "",
					 questionId: 615,
					 helpText: "You can make the types explicit if you wish, and doing so is encouraged if it avoids ambiguity for readers of your code."),
			
			Question(question: ["Can single-expression closures implicitly return the result of their single expression by omitting the return keyword from their declaration?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 616,
					 helpText: "Single-expression closures can implicitly return the result of their single expression by omitting the return keyword from their declaration, as in this example: reversedNames = names.sorted(by: { s1, s2 in s1 > s2 } ). Here, the function type of the sorted(by:) method’s argument makes it clear that a Bool value must be returned by the closure. Because the closure’s body contains a single expression (s1 > s2) that returns a Bool value, there’s no ambiguity, and the return keyword can be omitted."),
			
			Question(question: ["Does Swift automatically provide shorthand argument names to inline closures?",
								"Can we use shorthand argument names in inline closures?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 617,
					 helpText: "Swift automatically provides shorthand argument names to inline closures, which can be used to refer to the values of the closure’s arguments by the names $0, $1, $2, and so on. If you use these shorthand argument names within your closure expression, you can omit the closure’s argument list from its definition, and the number and type of the shorthand argument names will be inferred from the expected function type. The in keyword can also be omitted, because the closure expression is made up entirely of its body: reversedNames = names.sorted(by: { $0 > $1 } ). Here, $0 and $1 refer to the closure’s first and second String arguments."),
			
			Question(question: ["Are the first and the second closures equivalent?"],
					 image: "Closures18",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 618,
					 helpText: "Yes. Swift’s String type defines its string-specific implementation of the greater-than operator (>) as a method that has two parameters of type String, and returns a value of type Bool. This exactly matches the method type needed by the sorted(by:) method. Therefore, you can simply pass in the greater-than operator, and Swift will infer that you want to use its string-specific implementation."),
			
			Question(question: ["There’s a closure type that can be written after the function call’s parentheses. What is it called?",
								"The closure that you write after the function call’s parentheses even though it is still an argument to the function",
								"Which closure syntax doesn’t require you to write the argument label for the first closure as part of the function call?"],
					 image: "",
					 optionA: "Trailing closure",
					 optionB: "Last closure",
					 optionC: "Final closure",
					 optionD: "",
					 questionId: 619,
					 helpText: "If you need to pass a closure expression to a function as the function’s final argument and the closure expression is long, it can be useful to write it as a trailing closure instead. You write a trailing closure after the function call’s parentheses, even though the trailing closure is still an argument to the function. When you use the trailing closure syntax, you don’t write the argument label for the first closure as part of the function call."),
			
			Question(question: ["Which line does not use a trailing closure?",
								"One on these lines of code doesn't use trailing closure. Which one?"],
					 image: "Closures20",
					 optionA: "The first one",
					 optionB: "The second one",
					 optionC: "Both of them",
					 optionD: "Neither of them",
					 questionId: 620,
					 helpText: "Trailing closure is only used in the second example. You write a trailing closure after the function call’s parentheses, even though the trailing closure is still an argument to the function."),
			
			Question(question: ["If a closure expression is provided as the function’s only argument in form of a trailing closure, do you need to write a pair of parentheses () while calling that function?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 621,
					 helpText: "If a closure expression is provided as the function’s or method’s only argument and you provide that expression as a trailing closure, you don’t need to write a pair of parentheses () after the function or method’s name when you call the function."),
			
			Question(question: ["Swift’s Array type has a ... method, which takes a closure expression as its single argument"],
					 image: "",
					 optionA: "map(_:)",
					 optionB: "sort()",
					 optionC: "flatMap(_:)",
					 optionD: "shuffled()",
					 questionId: 622,
					 helpText: "Swift’s Array type has a map(_:) method, which takes a closure expression as its single argument. The closure is called once for each item in the array, and returns an alternative mapped value (possibly of some other type) for that item. You specify the nature of the mapping and the type of the returned value by writing code in the closure that you pass to map(_:). After applying the provided closure to each array element, the map(_:) method returns a new array containing all of the new mapped values, in the same order as their corresponding values in the original array."),
			
			Question(question: ["Can a closure capture and then modify the values of constants and variables from the surrounding context in which it is defined?",
								"Can a closure refer to the values of constants and variables it captured from the surrounding context, even if scope that defined them no longer exists?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "Only variables",
					 optionD: "",
					 questionId: 623,
					 helpText: "A closure can capture constants and variables from the surrounding context in which it is defined. The closure can then refer to and modify the values of those constants and variables from within its body, even if the original scope that defined the constants and variables no longer exists."),
			
			Question(question: ["Can a nested function capture any of its outer function’s arguments and also capture any constants and variables defined within the outer function?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 624,
					 helpText: "In Swift, the simplest form of a closure that can capture values is a nested function, written within the body of another function. A nested function can capture any of its outer function’s arguments and can also capture any constants and variables defined within the outer function."),
			
			Question(question: ["What will be printed to the console after executing the following code?"],
					 image: "Closures35",
					 optionA: "Objc",
					 optionB: "Swift",
					 optionC: "Compile-time error",
					 optionD: "None of the options is correct",
					 questionId: 625,
					 helpText: "As soon as the closure is created (when we define code), the language variable is captured. The value is available at that moment in the closure's body, and Objc is printed as a result. Closures can capture constants and variables from the surrounding context in which they are defined. They can then refer to and modify the values of those constants and variables from within its body, even if the original scope that defined the constants and variables no longer exists."),
			
			Question(question: ["Are functions and closures represent reference types under the hood?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No, they are value types",
					 optionC: "No, they are functional types",
					 optionD: "",
					 questionId: 626,
					 helpText: "Functions and closures are reference types. Whenever you assign a function or a closure to a constant or a variable, you are actually setting that constant or variable to be a reference to the function or closure. This also means that if you assign a closure to two different constants or variables, both of those constants or variables refer to the same closure."),
			
			Question(question: ["Which keyword can you use to indicate that a closure can be passed as an argument to a function, but will be called after the function returns?",
								"You can use the ... keyword, when your closure is allowed be passed as an argument to the function, but is called after the function returns"],
					 image: "",
					 optionA: "@escaping",
					 optionB: "@exit",
					 optionC: "@delayed",
					 optionD: "@after",
					 questionId: 627,
					 helpText: "A closure is said to escape a function when the closure is passed as an argument to the function, but is called after the function returns. When you declare a function that takes a closure as one of its parameters, you can write @escaping before the parameter’s type to indicate that the closure is allowed to escape."),
			
			Question(question: ["The escaping closure is called only when ...",
								"The escaping closure isn’t called until ..."],
					 image: "",
					 optionA: "The operation is completed",
					 optionB: "The operation is started",
					 optionC: "Operation lifecycle doesn’t affect it",
					 optionD: "",
					 questionId: 628,
					 helpText: "One way that a closure can escape is by being stored in a variable that’s defined outside the function. As an example, many functions that start an asynchronous operation take a closure argument as a completion handler. The function returns after it starts the operation, but the closure isn’t called until the operation is completed—the closure needs to escape, to be called later."),
			
			Question(question: ["What will happen if you don’t mark the parameter of this function with @escaping?"],
					 image: "Closures29",
					 optionA: "Сompile-time error",
					 optionB: "The function will work fine",
					 optionC: "Runtime error",
					 optionD: "",
					 questionId: 629,
					 helpText: "The someFunctionWithEscapingClosure(_:) function takes a closure as its argument and adds it to an array that’s declared outside the function. If you didn’t mark the parameter of this function with @escaping, you would get a compile-time error."),
			
			Question(question: ["A closure that is created by Swift to wrap an expression that’s being passed as an argument to a function",
								"The closures of that type are created by Swift to wrap an expression that’s being passed as an argument to a function"],
					 image: "",
					 optionA: "Autoclosure",
					 optionB: "Semi-autoclosure",
					 optionC: "In-out closure",
					 optionD: "Escaping closure",
					 questionId: 630,
					 helpText: "An autoclosure is a closure that is automatically created to wrap an expression that’s being passed as an argument to a function. It doesn’t take any arguments, and when it’s called, it returns the value of the expression that’s wrapped inside of it. This syntactic convenience lets you omit braces around a function’s parameter by writing a normal expression instead of an explicit closure."),
			
			Question(question: ["Will the expression inside a closure ever be evaluated, if the closure is never called?"],
					 image: "",
					 optionA: "No",
					 optionB: "Yes",
					 optionC: "",
					 optionD: "",
					 questionId: 631,
					 helpText: "If a closure is never called, the expression inside the closure is never evaluated. For instance, if we have an array and the first element of the array is removed by the code inside the closure, the actual array element won’t be removed until the closure is actually called."),
			
			Question(question: ["How can you indicate autoclosure in code?"],
					 image: "",
					 optionA: "@autoclosure",
					 optionB: "@aclosure",
					 optionC: "@auto",
					 optionD: "autoclosure",
					 questionId: 632,
					 helpText: "Correct answer: @autoclosure."),
			
			Question(question: ["Can we use @autoclosure and @escaping at the same time?"],
					 image: "",
					 optionA: "Yes",
					 optionB: "No",
					 optionC: "",
					 optionD: "",
					 questionId: 633,
					 helpText: "If you want an autoclosure that is allowed to escape, use both the @autoclosure and @escaping attributes."),
			
			Question(question: ["What will be printed to the console?"],
					 image: "Closures34",
					 optionA: "Unknown",
					 optionB: "OK",
					 optionC: "Not found",
					 optionD: "Server",
					 questionId: 634,
					 helpText: "Correct answer: Unknown. We assign the value of 300 to the message variable, and we also send the value of 300 to the computed property foo for checking. After checking inside foo, we return Unknown.")
		]
	}
}
